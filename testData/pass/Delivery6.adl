CONTEXT Deliveries

SERVICE Leveranciers : I[Provider]
 = [ besteller : issuedTo~;from
   , opdracht:accepted
   , leverantie: provider~ = [ Leverantie: I[Delivery], order:of=[Ordernummer:I[Order],klant:from], klant:deliveredto ]
   , rekening: sentBy~=[klant:sent,leverantie: delivery]
   ]

SERVICE Klanten : I[Client]
 = [ opdracht: from~ = [opdrachtnummer:I[Order], leverancier:issuedTo]
   , rekening: sent~=[rekeningnummer:I[Invoice],betaalddoor:paid~, betaald:paid~;paid]
   ]

SERVICE Bestellingen : I[Order]
 = [ van : from
   , aan : issuedTo
   , betaaldeOrders : from;paid;delivery;of;V[Order*ONE]
   ]

SERVICE Rekeningen : I[Invoice]
 = [ leverancier : sentBy
   , leverantie : delivery
   , klant : sent
   , betaaldeOrders : paid~;paid
   ]

SERVICE Levering : I[Delivery]
 = [ leverancier : provider
   , klant : deliveredto
   , betaald : deliveredto;paid;delivery;V[Delivery*ONE]
   ]

SERVICE Bestellijst : I[ONE]
 = [ LijstItem : V[ONE*Delivery]
      = [ leverancier : provider
        , klant : deliveredto
        , betaald : deliveredto;paid;delivery;V[Delivery*ONE]
   ]    ]

PATTERN Deliveries


-- Upon creation of a new order, the provider must be known. Therefore every order always has precisely one provider.

 issuedTo :: Order -> Provider PRAGMA "" " has been issued to "
  = [ ("Order 22/09/2006 Cookies", "Candy's candy")
    ; ("C45666"                  , "Carter"       )
    ; ("C45683"                  , "Carter"       )
    ].

-- Since there can be orders, which have not (yet) been delivered, the relation of must not be surjective.
-- However, for every delivery, there is always precisely one order.

 of :: Delivery -> Order [] PRAGMA "" " was made upon order "
  = [ ("Cookies #0382"      , "Order 22/09/2006 Cookies")
    ; ("Jelly beans #4921"  , "C45666"                  )
    ; ("Peanut butter #1993", "C45683"                  )
    ].

-- To allow that deliveries exist, which have not yet been delivered, the relation provider cannot be total.

 provider :: Delivery * Provider [UNI,TOT] PRAGMA "" " has been delivered by "
  = [ ("Cookies #0382"      , "Candy's candy")
    ; ("Jelly beans #4921"  , "Carter"       )
    ; ("Peanut butter #1993", "Carter"       )
    ].

-- To allow that orders exist, which are not yet accepted, the relation accepted may not be surjective.

 accepted :: Provider * Order [INJ] PRAGMA "Provider " " has accepted order "
  = [ ("Candy's candy", "Order 22/09/2006 Cookies")
    ; ("Carter"       , "C45666"                  )
    ; ("Carter"       , "C45683"                  )
    ].
 accepted |- issuedTo~ 
 EXPLANATION "not allowed to accept this order"

 SIGNAL order ON issuedTo~ |- accepted
 EXPLANATION "orders received."

 SIGNAL deliver ON accepted |- provider~;of
  EXPLANATION "deliverable orders"
 of;accepted~ |- provider COMPUTING provider
 provider |- of;accepted~
  EXPLANATION "No delivery is made to a client without an order accepted by the producer. (1.38)"

 deliveredto :: Delivery -> Client
  = [ ("Jelly beans #4921",	"Applegate")
    ; ("Cookies #0382",	"Brown")
    ; ("Peanut butter #1993",	"Conway")
    ].
 from :: Order -> Client
  = [ ("C45666"                  , "Applegate")
    ; ("Order 22/09/2006 Cookies", "Brown"    )
    ; ("C45683"                  , "Conway"   )
    ].
 of;from |- deliveredto COMPUTING deliveredto
  EXPLANATION "Deliveries are made to the client who ordered the delivery."

 sent :: Invoice -> Client PRAGMA "Invoice " " was sent to "
  = [ ("5362a", "Applegate")
    ; ("721i" , "Brown"    )
    ; ("9443a", "Conway"   )
    ].
 delivery :: Invoice -> Delivery [] PRAGMA "Invoice " " covers delivery "
  = [ ("5362a", "Jelly beans #4921")
    ; ("721i" , "Cookies #0382"    )
    ; ("9443a", "Peanut butter #1993"   )
    ].
 delivery~;sent |- deliveredto
  EXPLANATION "A client accepts invoices for delivered orders only. (1.39)"
 sentBy :: Invoice -> Provider PRAGMA "Invoice " " has been sent by "
  = [ ("721i" , "Candy's candy")
    ; ("5362a", "Carter"       )
    ; ("9443a", "Carter"       )
    ].
 sentBy = delivery;of;issuedTo COMPUTING sentBy
  EXPLANATION "An invoice must sent by the provider to whom an order was issued."
SIGNAL pending ON provider = delivery~;sentBy
 EXPLANATION "invoices to be sent (1.40)"

-- Since invoices can exist that are not (yet) paid, the relation paid cannot be surjective.
-- Since clients can exist that have not (yet) paid their invoice, the relation paid cannot be total.

 paid :: Client * Invoice [INJ] PRAGMA "Client " " has paid invoice "
  = [ ("Applegate", "5362a")
    ; ("Brown", "721i")
    ; ("Conway", "9443a")
    ].
 paid~ |- delivery;of;from EXPLANATION "Invoices must be paid by the client who ordered the delivery"
 SIGNAL payable ON delivery;of;from |- paid~
 EXPLANATION "Accept payments only for invoices sent."
 sent = delivery;of;from COMPUTING sent
ENDPATTERN
ENDCONTEXT