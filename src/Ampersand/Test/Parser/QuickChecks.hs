{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE Rank2Types #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE NoMonomorphismRestriction #-}
--to avoid warning for trace
{-# OPTIONS_GHC -Wno-deprecations #-}

module Ampersand.Test.Parser.QuickChecks
  ( doAllQuickCheckPropertyTests,
  )
where

import Ampersand.ADL1.PrettyPrinters (prettyPrint)
import Ampersand.Basics
  ( Bool (False),
    Int,
    Maybe (Nothing),
    MonadIO (liftIO),
    Num ((-)),
    RIO,
    Semigroup ((<>)),
    Show (show),
    Text,
    curry,
    tshow,
    zipWith,
    ($),
    (++),
    (.),
  )
import Ampersand.Core.ParseTree (P_Context)
import Ampersand.Input.ADL1.CtxError (Guarded (..))
import Ampersand.Input.Parsing (parseCtx)
import Ampersand.Test.Parser.ArbitraryTree ()
import qualified RIO.Text as T
import Test.QuickCheck
  ( Arbitrary (arbitrary),
    Args (..),
    Property,
    counterexample,
    forAllShow,
    quickCheckWith,
    (===),
  )

doAllQuickCheckPropertyTests :: RIO env () -- (Bool,Text)
doAllQuickCheckPropertyTests = do
  liftIO . quickCheckWith checkArgs $ prop_parserRoundtrip
  where
    checkArgs :: Args
    checkArgs =
      Args
        { replay = Nothing,
          maxSuccess = 64,
          maxDiscardRatio = 8,
          maxSize = 8, -- otherwise there's nothing quick about it.
          maxShrinks = 50,
          chatty = False
        }

prop_parserRoundtrip :: P_Context -> Property
prop_parserRoundtrip pCtx =
  forAllShow
    arbitrary
    (T.unpack . prettyCtx)
    ( \ctx ->
        case parseCtx "File generated by QuickCheck. When you see it in an error, there is something wrong with the parser!"
          . prettyCtx
          $ pCtx of
          Checked (pCtx', _) _ -> ctx === pCtx'
          Errors a -> counterexample (show a ++ "\n" ++ T.unpack (prettyCtx ctx)) False
    )

prettyCtx :: P_Context -> Text
prettyCtx =
  T.unlines
    . zipWith (curry includeLineNr) [1 ..]
    . T.lines
    . prettyPrint
  where
    includeLineNr :: (Int, Text) -> Text
    includeLineNr (nr, str) = "{-" <> T.replicate (4 - T.length (tshow nr)) "0" <> tshow nr <> "-} " <> str
