ADL_V2          ::= ContextDef
ContextDef      ::= 'CONTEXT' Id IncludeStatement* LanguageRef? TextMarkup?
                  ( MetaData     |
                    PatternDef   |
                    ProcessDef   |
                    RuleDef      |
                    RelationDef  |
                    ConceptDef   |
                    GenDef       |
                    KeyDef       |
                    InterfaceDef |
                    Plug         |
                    Purpose      |
                    Population   |
                    Themes
                   )* 'ENDCONTEXT'
IncludeStatement ::= 'INCLUDE' FilePath
LanguageRef     ::= 'IN' ('DUTCH' | 'ENGLISH')
TextMarkup      ::= 'REST' | 'HTML' | 'LATEX' | 'MARKDOWN'
MetaData        ::= 'META' String String
PatternDef      ::= 'PATTERN' Id LanguageRef?
                  ( RuleDef      |
                    RelationDef  |
                    RoleRule     |
                    RoleRelation |
                    ConceptDef   |
                    GenDef       |
                    KeyDef       |
                    Purpose      |
                    Population
                  )* 'ENDPATTERN'
RuleDef         ::= 'RULE' (ADLid ':')? Expr Meaning* 
                    ('MESSAGE' LanguageRef? TextMarkup? (String | Expl))* 
                    ('VIOLATION' (('TXT' | 'SRC' | 'TGT') String)(',' (('TXT' | 'SRC' | 'TGT') String))* )?
RelationDef     ::= ((Id '::' ConceptRef ( '*'| '->' | '<-' | ('[' (('0'| '1') '..' ('1'|'*') | '1' | '*')? '-' (('0'| '1') '..' ('1'|'*') | '1' | '*')? ']'  ) ) ConceptRef) |
                     (RELATION Id Sign))
                    'BYPLUG'? Props? 'BYPLUG'? ('PRAGMA' String String*)? Meaning? ('=' Content )? ('DEFINE' ('SRC' | 'TGT') String)? '.'?
Props           ::= '['(      ('UNI'|'INJ'|'SUR'|'TOT'|'SYM'|'ASY'|'TRN'|'RFX'|'IRF'|'PROP')
                         (',' ('UNI'|'INJ'|'SUR'|'TOT'|'SYM'|'ASY'|'TRN'|'RFX'|'IRF'|'PROP'))*
                       )? ']'
ConceptDef      ::= 'CONCEPT' Id 'BYPLUG'? String ('TYPE' String)? String?
GenDef          ::= 'SPEC' Id 'ISA' Id
KeyDef          ::= 'KEY' LabelProps ConceptRef '(' 
                       ( ('PRIMHTML' String)
                       | ( ( ('TXT' String)
                           | (LabelProps? Expr)
                           ) 
                           ( ',' ( ('TXT' String)
                                 | (LabelProps? Expr)
                                 )
                           )* 
                         )
                       )
                    ')'
InterfaceDef    ::= 'INTERFACE' 
                    ('(' RelSign (',' RelSign)* ')')?
                    ('{' (Id Id*) (',' Id Id*)*'}')?
                    ('FOR' Id (',' Id)* )?
                    ':' Expr SubInterface
SubInterface    ::= 'INTERFACE' Id |
                    Box
Plug            ::= ('SQLPLUG' | 'PHPPLUG') Obj
Purpose         ::= 'PURPOSE'
                    ('CONCEPT'  Id       |
                     'RELATION' Id Sign? |
                     'RULE'      Id      |
                     'KEY'       Id      |
                     'PATTERN'   Id      |
                     'INTERFACE' Id      |
                     'CONTEXT'   Id
                    )
                    LanguageRef?
                    TextMarkup?
                    ('REF' String)? Expl
Expl            ::= '{+' String '-}'
Population      ::= 'POPULATION' RelSign 'CONTAINS' Content
RoleRule        ::= 'ROLE' Id (',' Id)* 'MAINTAINS' Id (',' Id)*
Meaning         ::= 'MEANING' LanguageRef? TextMarkup? Expl

Expr            ::= Exp1 (( '=' | '|-') Exp1)?
Exp1            ::= Exp2 (( '/\' | '\/') Exp2)*
Exp2            ::= Exp3 ('-' Exp3)?
Exp3            ::= Exp4 (( '\' | '/') Exp4)?
Exp4            ::= (Exp5 (';' Exp5)* ) |
                    (Exp5 ('!' Exp5)* ) |
                    Exp5
Exp5            ::= '-'? Exp6 |
                    Exp6  ( Sign | '~' | '*' | '+')
Exp6            ::= RelationRef | 
                    '('   Expr   ')'
RelationRef     ::= 'I' | 'V' | Varid | Atom
RelSign         ::= RelationRef Sign?
Sign            ::= '[' ConceptRef ( '*' ConceptRef)? ']'
ConceptRef      ::= 'ONE' | Id
LabelProps      ::= Id ('{' Id (',' Id)* '}')* ':'
ObjDef          ::= LabelProps Expr SubInterface?
Box             ::= 'BOX' '[' ObjDef (',' ObjDef)* ']'
Content         ::= '[' (('(' Value ',' Value ')') (';' ('(' Value ',' Value ')') )*)? ']'
