# Inspired by https://tech.freckle.com/2021/05/18/haskell-on-actions/
name: CI_test

on:
  pull_request:
  push:
    branches:
      - "**" # Only trigger on branches (i.e. not tags, ..)

jobs:

  release:
    name: Release
    needs: [ build-and-test-ubuntu
           , build-and-test-macOS
           , build-and-test-windows
           ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: download version.txt from previous job
        uses: actions/download-artifact@v2
        with:
          name: version.txt
      - name: get-version
        run: | 
          echo "::set-output name=version::$(cat version.txt)"
        id: get-version
      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: ${{ steps.get-version.outputs.version }}
          tag_name: ${{ github.ref }}
          body: |
            Here you find yet another release of Ampersand. Check out the [releasenotes](https://github.com/AmpersandTarski/Ampersand/blob/development/ReleaseNotes.md) to see what has changed. 
        env:
          GITHUB_TOKEN: ${{ github.token }}     
      - name: create directory structure
        run: |
          mkdir release
          mkdir release/Linux
          mkdir release/windows
          mkdir release/macOS
      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v2
        with:
          name: ampersand-Linux-binaries-${{ steps.get-version.outputs.version }}
          path: release/Linux
      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ampersand-Linux-binaries-${{ steps.get-version.outputs.version }}

      - name: Download artifacts (macOS)
        uses: actions/download-artifact@v2
        with:
          name: ampersand-macOS-binaries-${{ steps.get-version.outputs.version }}
          path: release/macOS
      - name: Upload macOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ampersand-macOS-binaries-${{ steps.get-version.outputs.version }}

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v2
        with:
          name: ampersand-Windows-binaries-${{ steps.get-version.outputs.version }}
          path: release/Windows
      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ampersand-Windows-binaries-${{ steps.get-version.outputs.version }}






  build-and-test-ubuntu:
    name: Build and test on ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Set path
        run : |
          echo $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo $GITHUB_PATH
      - name: Checkout project contents
        uses: actions/checkout@v2
      - name: Use cache when available
        uses: freckle/stack-cache-action@main
      - name: Build and test
        uses: freckle/stack-action@main # stack-action does all these steps: dependencies, build, test.
        with:
          stack-arguments: '--copy-bins --flag ampersand:buildAll'
          weeder: false
          hlint: false
      - name: Get version
        id: get-version
        run: |
          ampersand --numeric-version > version.txt 
          echo "::set-output name=version::$(cat version.txt)"
          cat version.txt
      - name: save version 
        uses: actions/upload-artifact@v2
        with:
          name: version.txt
          path: version.txt
      - name: Upload artifacts (Linux)
        uses: actions/upload-artifact@v2
        with:
          name: ampersand-Linux-binaries-${{ steps.get-version.outputs.version }}
          path: /home/runner/.local/bin/*
      

  build-and-test-macOS:
    name: Build and test on macOS
    runs-on: macos-latest
    steps:
      - name: Set path
        run : |
          echo $GITHUB_PATH
          echo "/Users/runner/.local/bin" >> $GITHUB_PATH
          echo $GITHUB_PATH
      - name: Checkout project contents
        uses: actions/checkout@v2
      - name: Use cache when available
        uses: freckle/stack-cache-action@main
      - name: Build and test
        uses: freckle/stack-action@main
        with:
          stack-arguments: '--copy-bins --flag ampersand:buildAll'
          weeder: false
          hlint: false
      - name: Get version
        id: get-version
        run: |
          echo "::set-output name=version::$(ampersand --numeric-version)"
      - name: Upload artifacts (macOS)
        uses: actions/upload-artifact@v2
        with:
          name: ampersand-macOS-binaries-${{ steps.get-version.outputs.version }}
          path: /Users/runner/.local/bin/*

  build-and-test-windows:
    name: Build and test on Windows
    runs-on: windows-latest
    steps:
      - name: Checkout project contents
        uses: actions/checkout@v2
      - name: Use cache (manually) # See https://github.com/freckle/stack-cache-action/issues/5
        uses: actions/cache@v2.1.3
# TODO: Cache might be done better, see for inspiration:  https://github.com/godu/advent-of-code-2020/blob/46796832f59d185457a8edf8de043a54a451d688/.github/workflows/ci.yml
        with:
          path: | 
            ~/.ghc
            ~/.stack
          key: ${{ runner.os }}-stack
      - name: Set up MySQL
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
      - name: Setup PHP 
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mysqli
      - name: Build and test
        uses: freckle/stack-action@main
        with:
          stack-arguments: '--copy-bins --flag ampersand:buildAll'
          weeder: false
          hlint: false
      - name: Get version
        id: get-version
        run: |
          echo "::set-output name=version::$(C:\Users\runneradmin\AppData\Roaming\local\bin\ampersand --numeric-version)"
      - name: Upload artifacts (Windows)
        uses: actions/upload-artifact@v2
        with:
          name: ampersand-Windows-binaries-${{ steps.get-version.outputs.version }}
          path: C:\Users\runneradmin\AppData\Roaming\local\bin\*

  