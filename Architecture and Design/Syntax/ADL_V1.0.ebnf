Architecture   = Context { Context } .
Context        = CONTEXT Conid [LanguageID] \n 
                  [ ":" Expr [ BINDING Bind { "," Bind }]] \n
                  [ EXTENDS Conid { "," Conid} ] \n
		          { ContextElement }  \n
				  ENDCONTEXT .
Bind           = BIND Declaration TOPHP (Conid | String).
LanguageID     = IN ( DUTCH | ENGLISH ).
RefID          = REF String .
Explain        = ( EXPLAIN | PURPOSE ) [LanguageID] RefID Expl .
ExplObj        = ( CONCEPT (Conid | String)
                 | RELATION Relation 
			     | RULE ADLid
			     | KEY ADLid
			     | SERVICE ADLid
     		     | PATTERN ADLid
			     | CONTEXT ADLid
			     ).
ContextElement = ( Pattern
                 | Declaration
				 | ConceptDef
				 | KeyDef
				 | Service
				 | InternalPlug
				 | ExternalPlug
				 | Explain
				 | RoleService
				 | RoleRelation
				 | POPULATION Relation CONTAINS Content
				 ).

Pattern        = PATTERN (Conid | String)
                 { PatElem } ENDPATTERN .
PatElem        = ( RuleDef
                 | Gen
				 | Declaration
				 | ConceptDef
				 | KeyDef
				 | Explain
				 | TEST PExpression
				 ).
RuleDef        = ( RULE [ADLid ":" ] ( Expr "|-" Expr
                                     | Expr "-|" Expr
                                     | Expr "="  Expr
                                     | Expr ) [ Phrase ]
				 ) .
Phrase         = PHRASE [LanguageID] String .
Gen            = GEN (Conid | String) ISA (Conid | String) .
PostStr        = ( "~" | "+" | "-" | "*" ) { ( "~" | "+" | "-" | "*" )} .
PreStr         = "-" {  "-" } .
PTerm          = ( preOp "(" PExpression ")" postOp Type
                 | preOp Relation postOp Type
                 ) .
Type           = "[" Concept [ "*" Concept ] "]" .
preOp          = { "-" } .				 
postOp         = { ( "~" | "+" | "*") } .
PExpression    = PTerm { ( ";" | "!" | "/\" | "\/" | "|-" | "=") PTerm } .
Expr           = FactorI { "\/" FactorI } .
FactorI        = Factor  { "/\" Factor  } .
Factor         = TermD   { "!"  TermD } .
TermD          = Term    { ";"  Term  } .
Term           = ( [ preStr ] Relation [ postStr ] 
                 | [ preStr ] "(" Expr ")" [ postStr ] 
				 ) .
Term2          = [ preStr ] ( Relation | "(" Expr ")" ) [ postStr ] . 
Relation       = ( ( I | Atom ) 
                      [ "[" Concept "]" ] 
                 | ( V | Varid ) 
				      [ "[" ( Concept 
				            | Concept "*" Concept 
					        ) "]" ] 
				 ) . 
Concept        = ( ONE | Conid | String ) .
LabelProps     = ADLid [ "{" ADLid { "," ADLid } "}" ] ":" .
ConceptDef     = CONCEPT (Conid | String) [BYPLUG] String [String] .				 
KeyDef         = KEY LabelProps Concept "("	KeyAtt {"," KeyAtt} ")".
KeyAtt         = [ LabelProps ] Expr.
RoleService    = ROLE ADLid { "," ADLid } USES ADLid { "," ADLid } .
RoleRelation   = ROLE ADLid { "," ADLid } EDITS Relation { "," Relation } .
InternalPlug   = SQLPLUG Obj . 
ExternalPlug   = PHPPLUG Obj . 
Service        = SERVICE ADLid \n
                  [ "(" Relation { "," Relation } ")" ] \n
                  [ "{" ADLid { ADLid } [ "," ADLid { ADLid } ] "}" ] \n
				  ":" Expr \n
				  [ "=" "[" [ Obj { "," Obj } ] "]" ].
Obj            = LabelProps Expr \n
                 [ ALWAYS  {( UNI  | TOT | PROP )} ]  \n
                 [ "=" "[" Obj { "," Obj } "]" ].		
Declaration    = Varid "::" Concept ( "*" | "->" ) Concept \n
                 [ BYPLUG ] [ Props ] \n 
				 [ BYPLUG ] [ Pragma ] \n
				 [ "=" Content ] ["."] .	
Content        = "[" [ Record { ";" Record } ] "]" .
Props          = "[" [ Prop { "," Prop } ] "]" .
Prop           = ( UNI | INJ |  SUR| TOT | SYM | ASY | TRN | RFX ). 
Pragma         = PRAGMA String { String } . 	
Record         = "(" String "," String ")". 
