ADL_V2          ::= ContextDef
ContextDef      ::= 'CONTEXT' ContextRef LanguageRef? (':' Expr Bindings)?
                  ( PatternDef   |
                    ProcessDef   |
                    RuleDef      |
                    RelationDef  |
                    ConceptDef   |
                    KeyDef       |
                    InterfaceDef |
                    Plug         |
                    ExplainDef      |
                    Population  )* 'ENDCONTEXT'
PatternDef      ::= 'PATTERN' Id LanguageRef?
                  ( RuleDef      |
                    Gen          |
                    RelationDef  |
                    ConceptDef   |
                    KeyDef       |
                    ExplainDef     )* 'ENDPATTERN'

ProcessDef      ::= 'PROCESS' Id LanguageRef?
                  ( RuleDef      |
                    Gen          |
                    RelationDef  |
                    RoleRule     |
                    RoleRelation |
                    ConceptDef   |
                    KeyDef       |
                    ExplainDef)  * 'ENDPROCESS'
RuleDef         ::= 'RULE' (ADLid ':')? Expr Phrase? 
RelationDef     ::= ((Id '::' Concept ( '*'| '->') Concept) |
                     (RELATION Id Sign))
                    'BYPLUG'? Props? 'BYPLUG'? Pragma? ('MEANING' String)? ('=' Content )? '.'?
ConceptDef      ::= 'CONCEPT' Id 'BYPLUG'? String String?
KeyDef          ::= 'KEY' LabelProps Concept '(' KeyAtt (',' KeyAtt)* ')'
InterfaceDef    ::= 'INTERFACE' ('(' RelSign (',' RelSign)* ')')?
                    ('{' (Id Id*) (',' Id Id*)*'}')?
                    ':' Expr Box
Plug            ::= ('SQLPLUG' | 'PHPPLUG') Obj
ExplainDef      ::= ('EXPLAIN' | 'PURPOSE') 
                    ('CONCEPT' ConceptRef |
                     'RELATION' RelationRef |
                     'RULE' RuleRef |
                     'KEY' KeyRef |
                     'PATTERN' PatternRef |
                     'PROCESS' ProcessRef |
                     'INTERFACE' InterfaceRef |
                     'CONTEXT' ContextRef ) 
                    LanguageRef?
                    ('REF' String)? String

Population      ::= 'POPULATION' RelationRef Sign? 'CONTAINS' Content

Phrase          ::= 'PHRASE' LanguageID String
Gen             ::= 'GEN' Id 'ISA' Id

Expr            ::= Exp1 (( '=' | '|-') Exp1)?
Exp1            ::= Exp2 (( '/\' | '\/') Exp2)*
Exp2            ::= Exp3 ('-' Exp3)?
Exp3            ::= Exp4 (( '\' | '/') Exp4)?
Exp4            ::= (Exp5 (';' Exp5)* ) |
                    (Exp5 ('!' Exp5)* ) |
                    Exp5
Exp5            ::= '-'? Exp6 |
                    Exp6  ( Sign | '~' | '*' | '+')
Exp6            ::= RelationRef | 
                    '('   Expr   ')'

RelationRef        ::= 'I' | 'V' | Varid | Atom
RelSign         ::= RelationRef Sign?
Sign            ::= '[' Concept ( '*' Concept)? ']'

Concept         ::= 'ONE' | Id

LabelProps      ::= Id ('{' Id (',' Id)* '}')* ':'


KeyAtt          ::= LabelProps? Expr

RoleRelation    ::= 'ROLE' Id (',' Id)* 'EDITS' RelSign (',' RelSign)*
RoleRule        ::= 'ROLE' Id (',' Id)* 'MAINTAINS' RelSign (',' RelSign)*



Box             ::= 'BOX' '[' Obj (',' Obj)* ']'
Obj             ::= LabelProps Expr Box

Props           ::= '['(      ('UNI'|'INJ'|'SUR'|'TOT'|'SYM'|'ASY'|'TRN'|'RFX'|'IRF'|'PROP')
                         (',' ('UNI'|'INJ'|'SUR'|'TOT'|'SYM'|'ASY'|'TRN'|'RFX'|'IRF'|'PROP'))*
                       )? ']'
Pragma          ::= 'PRAGMA' String String*




Content         ::= '[' (('(' String ',' String ')') (';' ('(' String ',' String ')') )*)? ']'

