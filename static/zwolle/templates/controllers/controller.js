/*
Controller for interface "$interfaceName$" (context: "$contextName$"). Generated code, edit with care.
$if(verbose)$Generated using template: $usedTemplate$
Generated by $ampersandVersionStr$

INTERFACE "$interfaceName$" : $expAdl$ :: $source$ * $target$  ($if(!isRoot)$non-$endif$root interface)
Roles: [$roles;separator=", "$]
$endif$*/
AmpersandApp.controller('$interfaceName$Controller', function (\$scope, \$rootScope, \$route, \$routeParams, Restangular, \$location, \$timeout, \$localStorage, \$sessionStorage, ResourceService) {
    const resourceType = '$source$';
    const ifcName = '$interfaceName$';
    
    if(\$routeParams['new'] && '$source$' == '$target$') resourceId = '_NEW'; // Set resourceId to special '_NEW' value in case new resource must be created 
    else if(resourceType == 'SESSION') resourceId = \$sessionStorage.session.id;
    else if (resourceType == 'ONE') resourceId = '1';
    else resourceId = \$routeParams.resourceId;
    
    \$scope.resource = {};
    \$scope.resource._path_ = '/resources/' + resourceType + '/' + resourceId;
    \$scope.resource._isRoot_ = true;
    \$scope.resource[ifcName] = {};
    
    // Function to change location to create a new resource
    \$scope.newResource = function(){
        \$location.url('/' + ifcName + '?new');
    };
    
    /**********************************************************************************************
     * GET INTERFACE
     *********************************************************************************************/
    
    // Create new resource
    if(\$routeParams['new']){
        
        /*
        \$scope.createResource(\$scope.resource, ifcName)
        .then(function(data){
            \$location.url('/' + ifcName + '/'+ data.content._id_, false);
        },function(reason){
            \$rootScope.addError('Failed to create resource: ' + reason);
        });
        */
    
    // Get resource interface data
    }else{
        getResourceData(\$scope.resource, ifcName, \$scope.resource);
    }
    
    // Function to get (GET) a resource
    const getResourceData = function(resource, ifc, callingObj){
        if(!Array.isArray(callingObj._loading_)) callingObj._loading_) = []; // list with promises
        
        callingObj._loading_.push(
            Restangular.one(resource._path_ + '/' + ifc)
            .get()
            .then(
                function(data){
                    if(\$.isEmptyObject(data.plain())) \$rootScope.addInfo('No results found');
                    else angular.extend(resource[ifc], data);
                }, function(reason){
                    \$rootScope.addError('Failed to get resource: ' + reason);
                }
            )
        );
    }
    
    // Function to cancel edits and reset resource data
    const cancelResource = function(resource){
        if(!Array.isArray(resource._loading_)) resource._loading_) = []; // list with promises
        
        resource._loading_.push(
            Restangular.one(resource._path_)
            .get()
            .then(
                function(data){
                    if(\$.isEmptyObject(data.plain())) \$rootScope.addInfo('No results found');
                    else angular.extend(resource, data);
                    
                    // Update visual feedback (notifications and buttons)
                    \$rootScope.getNotifications();
                    ResourceService.initResourceMetaData(resource);
                }, function(reason){
                    \$rootScope.addError('Failed to get resource: ' + reason);
                }
            )
        );
    };
    
    // Function to create (POST) a new resource
    const createResource = function(obj, ifc, callingObj, prepend){
        if(prepend === 'undefined') var prepend = false;
        if(!Array.isArray(callingObj._loading_)) callingObj._loading_) = []; // list with promises
        
        callingObj._loading_.push(
            Restangular.one(obj._path_).all(ifc)
            .post({}, {})
            .then(
                function(data){
                    // Update visual feedback (notifications and buttons)
                    ResourceService.processResponse(callingObj, data);
                    
                    // Add new resource to ifc
                    if(!Array.isArray(obj[ifc])){ // non-uni -> list
                        if(prepend) obj[ifc].unshift(data.content);
                        else obj[ifc].push(data.content);
                    }else{ // uni
                        obj[ifc] = data.content;
                    }
                }, function(reason){
                    \$rootScope.addError('Failed to create resource: ' + reason);
                }
            )
        );
    };
    
    // Function to delete a resource
    const deleteResource = function(parent, ifc, resource){
        if(!Array.isArray(resource._loading_)) resource._loading_) = []; // list with promises
        
        if(confirm('Are you sure?')){
            resource._loading_.push(
                Restangular.one(resource._path_)
                .remove({})
                .then(
                    function(data){
                        // Update visual feedback (notifications and buttons)
                        \$rootScope.updateNotifications(data.notifications);
                        
                        // Remove resource from ifc
                        if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni -> list
                        else parent[ifc] = null; // uni
                    }, function(reason){
                        \$rootScope.addError('Failed to delete resource: ' + reason);
                    }
                )
            );
        }
    };
    
    // Function to change certain attributes of a resource (PATCH)
    \$scope.save = ResourceService.saveResource;
    
    /*
     * An empty object for typeahead functionality.
     * Defined here so it can be reused in an interface
     * Prevents multiple calls for the same resourceType
     */
    \$scope.typeahead = {};
    
    /**********************************************************************************************
     * Helper functions
     **********************************************************************************************/
    
    \$scope.\$on("\$locationChangeStart", function(event, next, current){
        if(ResourceService.checkRequired()){
            confirmed = confirm("You have unsaved edits. Do you wish to leave?");
            if (event && !confirmed) event.preventDefault();
            else if(event && confirmed) ResourceService.emptyUpdatedResources();
            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');
        }
    });
    
    \$scope.pendingPromises = ResourceService.pendingPromises;
});