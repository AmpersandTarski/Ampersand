/*
Controller for interface "$interfaceName$" (context: "$contextName$"). Generated code, edit with care.
$if(verbose)$Generated using template: $usedTemplate$
Generated by $ampersandVersionStr$

INTERFACE "$interfaceName$" : $expAdl$ :: $source$ * $target$  ($if(!isRoot)$non-$endif$root interface)
Roles: [$roles;separator=", "$]
$endif$*/
AmpersandApp.controller('$interfaceName$Controller', function (\$scope, \$rootScope, \$route, \$routeParams, Restangular, \$location, \$timeout, \$localStorage, \$sessionStorage) {
    let resourceType = '$source$';
    let ifcName = '$interfaceName$';
    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)
    
    if(\$routeParams['new'] && '$source$' == '$target$') resourceId = '_NEW'; // Set resourceId to special '_NEW' value in case new resource must be created 
    else if(resourceType == 'SESSION') resourceId = \$sessionStorage.session.id;
    else if (resourceType == 'ONE') resourceId = '1';
    else resourceId = \$routeParams.resourceId;
    
    \$scope.resource = {};
    \$scope.resource._path_ = '/resources/' + resourceType + '/' + resourceId;
    \$scope.resource._loading_ = [];
    \$scope.resource._isRoot_ = true;
    \$scope.resource[ifcName] = {};
    
    // Function to change location to create a new resource
    \$scope.newResource = function(){
        \$location.url('/' + ifcName + '?new');
    };
    
    /**********************************************************************************************
     * GET INTERFACE
     *********************************************************************************************/
    
    // Create new resource
    if(\$routeParams['new']){
        
        /*
        \$scope.createResource(\$scope.resource, ifcName)
        .then(function(data){
            \$location.url('/' + ifcName + '/'+ data.content._id_, false);
        },function(reason){
            \$rootScope.addError('Failed to create resource: ' + reason);
        });
        */
    
    // Get resource interface data
    }else{
        getResourceData(\$scope.resource, ifcName, \$scope.resource);
    }
    
    // Function to get (GET) a resource
    const getResourceData = function(resource, ifc, callingObj){
        if(!Array.isArray(callingObj._loading_)) callingObj._loading_) = []; // list with promises
        
        callingObj._loading_.push(
            Restangular.one(resource._path_ + '/' + ifc)
            .get()
            .then(
                function(data){
                    if(\$.isEmptyObject(data.plain())) \$rootScope.addInfo('No results found');
                    else angular.extend(resource[ifc], data);
                }, function(reason){
                    \$rootScope.addError('Failed to get resource: ' + reason);
                }
            )
        );
    }
    
    // Function to cancel edits and reset resource data
    const cancelResource = function(resource){
        if(!Array.isArray(resource._loading_)) resource._loading_) = []; // list with promises
        
        resource._loading_.push(
            Restangular.one(resource._path_)
            .get()
            .then(
                function(data){
                    if(\$.isEmptyObject(data.plain())) \$rootScope.addInfo('No results found');
                    else angular.extend(resource, data);
                    
                    // Update visual feedback (notifications and buttons)
                    \$rootScope.getNotifications();
                    initResourceMetaData(resource);
                }, function(reason){
                    \$rootScope.addError('Failed to get resource: ' + reason);
                }
            )
        );
    };
    
    // Function to create (POST) a new resource
    const createResource = function(obj, ifc, callingObj, prepend){
        if(prepend === 'undefined') var prepend = false;
        if(!Array.isArray(callingObj._loading_)) callingObj._loading_) = []; // list with promises
        
        callingObj._loading_.push(
            Restangular.one(obj._path_).all(ifc)
            .post({}, {})
            .then(
                function(data){
                    // Update visual feedback (notifications and buttons)
                    processResponse(callingObj, data);
                    
                    // Add new resource to collection/list
                    if(!Array.isArray(obj[ifc])) obj[ifc] = [];
                    if(prepend) obj[ifc].unshift(data.content);
                    else obj[ifc].push(data.content);
                    
                }, function(reason){
                    \$rootScope.addError('Failed to create resource: ' + reason);
                }
            )
        );
    };
    
    // Function to delete a resource
    const deleteResource = function(parent, ifc, resource){
        if(!Array.isArray(resource._loading_)) resource._loading_) = []; // list with promises
        
        if(confirm('Are you sure?')){
            resource._loading_.push(
                Restangular.one(resource._path_)
                .remove({})
                .then(
                    function(data){
                        // Remove resource from collection/list
                        if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1);
                        else parent[ifc] = null;
                        
                        // Update visual feedback (notifications and buttons)
                        \$rootScope.updateNotifications(data.notifications);
                    }, function(reason){
                        \$rootScope.addError('Failed to delete resource: ' + reason);
                    }
                )
            );
        }
    };
    
    const addPatch = function(resource, patches){
        $if(verbose)$console.log(patches);$endif$
        if(typeof resource['_patchesCache_'] === 'undefined') resource['_patchesCache_'] = []; // new array
        resource['_patchesCache_'] = resource['_patchesCache_'].concat(patches); // add new patches
        
        \$scope.save(resource);
    };
    
    // Function to change certain attributes of a resource (PATCH)
    \$scope.save = function(resource){
        // Add resource to \$scope.updatedResources
        if(\$scope.updatedResources.indexOf(resource) === -1) \$scope.updatedResources.push(resource);
        
        if(\$localStorage.switchAutoSave){
            if(!Array.isArray(resource['_loading_'])) resource['_loading_'] = new Array();
            resource['_loading_'].push( // shows loading indicator
                Restangular.one(resource['_path_'])
                    .patch(resource['_patchesCache_'], {topLevelIfc : '$interfaceName$'})
                    .then(function(data) {
                        // Update resource data
                        if(resource['_ifcEntryResource_']){
                            resource['$interfaceName$'] = data.content;
                            //tlResource = resource;
                        }
                        else resource = \$.extend(resource, data.content);
                        
                        // Update visual feedback (notifications and buttons)
                        \$rootScope.updateNotifications(data.notifications);
                        processResponse(resource, data.invariantRulesHold);
                    })
            );
        }else{
            processResponse(resource, true);
        }
    
    /**********************************************************************************************
     * 
     *    Edit functions on scalar
     * 
     *********************************************************************************************/
    
    // Function to save item (non-array)
    \$scope.saveItem = function(resource, ifc, patchResource){
        if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') value = null;
        else value = resource[ifc];
        
        // Construct path
        pathLength = patchResource['_path_'].length;
        path = resource['_path_'].substring(pathLength) + '/' + ifc;
        
        // Construct patch
        patches = [{ op : 'replace', path : path, value : value}];
        
        // Patch!
        \$scope.patchResource(patchResource, patches);
    };
    
    // Function to add item to array
    \$scope.addItem = function(resource, ifc, selected, patchResource){
        if(typeof selected.value === 'undefined'){
            console.log('Value undefined');
        }else if(selected.value !== ''){
            // Adapt in js model
            if(typeof resource[ifc] === 'undefined' || resource[ifc] === null) resource[ifc] = [];
            resource[ifc].push(selected.value);
            
            // Construct path
            pathLength = patchResource['_path_'].length;
            path = resource['_path_'].substring(pathLength) + '/' + ifc;
            
            // Construct patch
            patches = [{ op : 'add', path : path, value : selected.value}];
            
            // Reset selected value
            selected.value = '';
            
            // Patch!
            \$scope.patchResource(patchResource, patches);
        }else{
            console.log('Empty value selected');
        }
    };
    
    // Function to remove item from array
    \$scope.removeItem = function(resource, ifc, key, patchResource){
        // Adapt js model
        value = resource[ifc][key];
        resource[ifc].splice(key, 1);
        
        // Construct path
        pathLength = patchResource['_path_'].length;
        path = resource['_path_'].substring(pathLength) + '/' + ifc;
        
        // Construct patch
        patches = [{ op : 'remove', path : path, value: value}];
        
        // Patch!
        \$scope.patchResource(patchResource, patches);
    };
    
    
    /**********************************************************************************************
     * 
     *    Edit functions on objects
     * 
     *********************************************************************************************/
    
    // Function to add an object to a certain interface (array) of a resource
    \$scope.addObject = function(resource, ifc, obj, patchResource){
        // If patchResource is undefined, the patchResource equals the resource
        if(typeof patchResource === 'undefined'){
            patchResource = resource
        }
        
        if(typeof obj['_id_'] === 'undefined' || obj['_id_'] == ''){
            console.log('Selected object id is undefined');
        }else{
            try {
                obj = obj.plain(); // plain is Restangular function
            }catch(e){} // when plain() does not exists (i.e. object is not restangular object)
            
            // Adapt js model
            if(resource[ifc] === null) resource[ifc] = obj;
            else if(Array.isArray(resource[ifc])) resource[ifc].push(obj);
            else console.log('Cannot add object. Resource[ifc] already set and/or not defined');
            
            // Construct path
            pathLength = patchResource['_path_'].length;
            path = resource['_path_'].substring(pathLength) + '/' + ifc;
            
            // Construct patch
            patches = [{ op : 'add', path : path, value : obj['_id_']}];
            
            // Patch!
            \$scope.patchResource(patchResource, patches);
        }
    };
    
    // Function to remove an object from a certain interface (array) of a resource
    \$scope.removeObject = function(resource, ifc, key, patchResource){
        // Adapt js model
        id = resource[ifc][key]['_id_'];
        resource[ifc].splice(key, 1);
        
        // Construct path
        pathLength = patchResource['_path_'].length;
        path = resource['_path_'].substring(pathLength) + '/' + ifc + '/' + id;
        
        // Construct patch
        patches = [{ op : 'remove', path : path}];
        
        // Patch!
        \$scope.patchResource(patchResource, patches);
    };
    
    // Typeahead functionality
    \$scope.typeahead = {}; // an empty object for typeahead
    \$scope.getTypeahead = function(resourceType){
        // Only if not yet set
        if(typeof \$scope.typeahead[resourceType] === 'undefined'){
            \$scope.typeahead[resourceType] = Restangular.all('resources/' + resourceType).getList().\$object;
        }
    };
    
    /**********************************************************************************************
     * Helper functions
     **********************************************************************************************/
    
    \$scope.pendingPromises = function(resource){
        if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises
        
        return resource._loading_.some(function(val){
            return val.\$\$state.status == 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected
        });
    }
    
    \$scope.\$on("\$locationChangeStart", function(event, next, current){
        checkRequired = updatedResources.reduce(function(prev, item, index, arr){
            return prev || item._patchesCache_.length;
        }, false);
        
        if(checkRequired){ // if checkRequired (see above)
            confirmed = confirm("You have unsaved edits. Do you wish to leave?");
            if (event && !confirmed) event.preventDefault();
        }
    });
    
    // Init/reset resource meta data
    const initResourceMetaData = function(resource){
        resource._showButtons_ = {'save' : false, 'cancel' : false};
        resource._patchesCache = [];
        setResourceStatus(resource, 'default');
    }
    
    // Process response: i.e. set resource buttons and status
    const processResponse = function(resource, response){
        \$rootScope.updateNotifications(response.notifications);
        
        if(response.invariantRulesHold){
            resource._showButtons_ = {'save' : false, 'cancel' : false};
            resource._patchesCache_ = []; // empty patches cache
            setResourceStatus(resource, 'success');
            
            // After 3 seconds, reset status to default
            \$timeout(function(){
                setResourceStatus(resource, 'default');
            }, 3000);
        }else{
            resource._showButtons_ = {'save' : false, 'cancel' : true};
            setResourceStatus(resource, 'danger');
        }
    };
    
    const setResourceStatus = function(resource, status){
        // Reset all status properties
        resource._status_ = { 'warning' : false
                            , 'danger'  : false
                            , 'default' : false
                            , 'success' : false
                            };
        // Set status property
        resource._status_[status] = true;
    };
});