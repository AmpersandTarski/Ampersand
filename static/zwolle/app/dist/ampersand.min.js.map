{"version":3,"sources":["module.js","admin/execengine.controller.js","admin/installer.controller.js","importer/importer.module.js","interfacing/atomic.controller.js","interfacing/atomicDate.controller.js","interfacing/atomicTypeAhead.controller.js","interfacing/atomicUploadFile.controller.js","interfacing/box.controller.js","interfacing/interface.controller.js","interfacing/resource.service.js","navbar/navigationBar.controller.js","navbar/navigationBar.service.js","navbar/role.service.js","navbar/roleMenu.controller.js","notifications/notification.service.js","notifications/notificationCenter.controller.js"],"names":["angular","module","config","$routeProvider","when","controller","templateUrl","interfaceLabel","otherwise","redirectTo","RestangularProvider","setBaseUrl","setDefaultHeaders","Content-Type","run","Restangular","$rootScope","$location","$route","NotificationService","RoleService","NavigationBarService","addFullRequestInterceptor","element","operation","what","url","headers","params","addResponseInterceptor","data","response","deferred","sessionRefreshAdvice","refreshNavBar","navTo","setErrorInterceptor","responseHandler","message","details","status","deactivateAllRoles","path","error","addInfo","msg","statusText","addError","html","undefined","notifications","updateNotifications","getCurrentDateTime","Date","original","reload","lastRoute","current","un","$on","apply","value","backdrop","minDuration","directive","link","scope","attrs","closest","hasClass","hide","bind","addClass","show","removeClass","event","which","target","blur","preventDefault","filter","obj","addKey","Array","isArray","Object","keys","map","key","defineProperty","enumerable","restrict","resource","transclude","$sce","trustAsHtml","$scope","one","get","then","plain","installing","installed","install","defPop","defaultPop","app","requires","length","service","FileUploader","uploader","onSuccessItem","fileItem","onErrorItem","item","ImportService","ResourceService","selected","saveItem","addItem","removeItem","remove","removeResource","delete","deleteResource","pad","number","r","String","modifyToJSON","toJSON","this","getUTCFullYear","getMonth","getDate","isOpen","openDatepicker","$event","stopPropagation","saveDateItem","property","patchResource","addDateItem","console","log","hasNoResults","getTypeahead","resourceType","forceGetCall","typeahead","all","getList","$object","typeaheadOnSelect","$item","$model","$label","ifc","_id_","push","copy","patch","createPatch","addPatches","typeAheadCreate","alias","formData","removeAfterUpload","autoUpload","content","code","createResource","save","saveResource","cancel","cancelResource","next","checkRequired","confirmed","confirm","emptyUpdatedResources","newResource","ifcName","pendingPromises","$localStorage","$timeout","updatedResources","getResource","callingObj","promise","_path_","$","isEmptyObject","extend","initResourceMetaData","_loading_","_patchesCache_","_isRoot_","processResponse","getNotifications","prepend","post","unshift","parent","splice","indexOf","$q","reject","index","pathLength","substring","op","patches","concat","switchAutoSave","setResourceStatus","_showButtons_","resolve","reduce","prev","arr","invariantRulesHold","_status_","warning","danger","default","success","some","val","$$state","$sessionStorage","$storage","defaultSettings","loadingNavBar","navbar","checkAllRules","createNewResource","openWithIfc","resetSettings","forEach","notificationPrefs","resetNotificationSettings","resetSwitchAutoSave","$window","w","resizeNavbar","width","children","first","appendTo","last","prependTo","toggleClass","$watch","session","sessionRoles","sessionVars","selectRole","roleId","toggleRole","selectRoleByLabel","roleLabel","role","label","id","set","active","getActiveRoleIds","roleIds","setActiveRoles","promises","signals","invariants","infos","successes","warnings","errors","addSuccess","switchAutoHideSuccesses","count","persistent","alreadyExists","i","addWarning","localStorage","closeAlert","alerts"],"mappings":"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","file":"ampersand.min.js","sourcesContent":["// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ng-code-mirror', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/home.html',\r\n            interfaceLabel : 'Home'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    // RestangularProvider.setPlainByDefault(true); available from Restangular v1.5.3\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif(data.navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        // 401: Unauthorized\r\n        if(response.status == 401) {\r\n            RoleService.deactivateAllRoles();\r\n            $location.path(''); // TODO: redirect to login page (if exists)\r\n        }\r\n        \r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object'){\r\n            if(response.data.error == 404) {\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications); \r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n    \r\n    \r\n}).value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n}).directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n}).directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n}).filter('toArray', function() {\r\n    // used from: https://github.com/petebacondarwin/angular-toArrayFilter\r\n    return function (obj, addKey) {\r\n        if (!obj) return obj;\r\n        if (Array.isArray(obj)) return obj; // obj is already an array\r\n        if ( addKey === false ) {\r\n          return Object.keys(obj).map(function(key) {\r\n            return obj[key];\r\n          });\r\n        } else {\r\n          return Object.keys(obj).map(function (key) {\r\n            return Object.defineProperty(obj[key], '$key', { enumerable: false, value: key});\r\n          });\r\n        }\r\n      };\r\n}).directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/partials/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n}).directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/partials/myNavToOtherInterfaces.html'\r\n    };\r\n}).filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});","// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp').controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                data = data.plain();\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});","angular.module('AmpersandApp').controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        Restangular.one('admin/installer').get({defaultPop : defPop}).then(function(data) {\r\n            data = data.plain();\r\n            NotificationService.updateNotifications(data);\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n    \r\n});","var app = angular.module('AmpersandApp');\r\napp.requires[app.requires.length] = 'angularFileUpload'; // add angularFileUpload to dependency list\r\napp.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true);\r\n            \r\n            if(response.notifications !== undefined) NotificationService.updateNotifications(response.notifications); \r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n});","angular.module('AmpersandApp').controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});","angular.module('AmpersandApp').controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});","angular.module('AmpersandApp').controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Adapt in js model\r\n                resource[ifc].push(angular.copy($item));\r\n                \r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch]);\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Adapt js model\r\n                resource[ifc] = angular.copy($item);\r\n                \r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch]);\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});","angular.module('AmpersandApp').controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        // Add response content (newly created FileObject) to ifc list in resource\r\n        fileItem.resource[fileItem.ifc].push(response.content);\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.error.message, response.error.code, true);\r\n    };\r\n});","angular.module('AmpersandApp').controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, prepend)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = ResourceService.saveResource; // function(resource)\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});","angular.module('AmpersandApp').controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function to change location to create a new resource\r\n    $scope.newResource = function(){\r\n        $location.url('/' + ifcName + '?new');\r\n    };\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n});","angular.module('AmpersandApp').service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj){\r\n            promise = Restangular\r\n            .one(resource._path_ + '/' + ifc)\r\n            .get()\r\n            .then(function(data){\r\n                try {\r\n                    data = data.plain();\r\n                }catch(error){}\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else if(resource[ifc] === null || Array.isArray(resource[ifc])) resource[ifc] = data;\r\n                else angular.extend(resource[ifc], data);\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        saveResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .patch(resource._patchesCache_, {})\r\n            .then(function(data) {\r\n                data = data.plain();\r\n                \r\n                // Update resource data\r\n                if(resource._isRoot_) resource.get();\r\n                else resource = angular.extend(resource, data.content);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(resource, data);\r\n\r\n                return resource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @param {bool} prepend\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, callingObj, prepend){\r\n            if(prepend === 'undefined') prepend = false;\r\n            \r\n            promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                data = data.plain();\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(callingObj, data);\r\n\r\n                newResource = data.content;\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(prepend) resource[ifc].unshift(newResource);\r\n                    else resource[ifc].push(newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {bool} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Adapt js model\r\n            if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n            else parent[ifc] = null; // uni = object\r\n            \r\n            // Construct patch(es)\r\n            patch = ResourceService.createPatch('remove', resource, patchResource);\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    data = data.plain();\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n                resource._loading_.push(promise);\r\n                \r\n                return promise;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            patch = ResourceService.createPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.addPatches(patchResource, [patch]).then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            value = resource[ifc][index];\r\n            patch = ResourceService.createPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Construct patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        createPatch : function(operation, resource, patchResource, ifc, value){\r\n            if(typeof patchResource === 'undefined') patchResource = resource;\r\n            pathLength = patchResource._path_.length;\r\n            \r\n            path = resource._path_.substring(pathLength);\r\n            if(typeof ifc !== 'undefined') path = path + '/' + ifc;\r\n            \r\n            if(typeof value === 'undefined') return { op : operation, path : path};\r\n            else return { op : operation, path : path, value : value};\r\n        },\r\n        \r\n        /**\r\n         * Add list of patches for given resource and call API (when auto-save is on)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object[]} patches\r\n         * @returns {Promise}\r\n         */\r\n        addPatches : function(resource, patches){\r\n            // Add new patches to resource\r\n            if(!Array.isArray(resource._patchesCache_)) resource._patchesCache_ = [];\r\n            resource._patchesCache_ = resource._patchesCache_.concat(patches);\r\n            \r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(resource) === -1) updatedResources.push(resource);\r\n            \r\n            // Save if autoSave is enabled\r\n            if($localStorage.switchAutoSave) {\r\n                return ResourceService.saveResource(resource);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve(resource);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.invariantRulesHold){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n    \r\n});","angular.module('AmpersandApp').controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $timeout, $location, NotificationService, RoleService, NavigationBarService) {\r\n    \r\n    $scope.$storage = $localStorage;\r\n    $scope.$sessionStorage = $sessionStorage;\r\n    $scope.defaultSettings = NavigationBarService.defaultSettings;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    \r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.resetSettings = function(){\r\n        // all off\r\n        angular.forEach($scope.$storage.notificationPrefs, \r\n            function(value, index, obj){\r\n                obj[index] = false;\r\n            }\r\n        );\r\n        $scope.$storage.switchAutoSave = false;\r\n        \r\n        $timeout(function() {\r\n            // reset to default        \r\n            $scope.resetNotificationSettings();\r\n            $scope.resetSwitchAutoSave();\r\n        }, 500);\r\n    };\r\n    \r\n    $scope.resetNotificationSettings = function(){\r\n        $scope.$storage.notificationPrefs = angular.extend($scope.$storage.notificationPrefs, $scope.defaultSettings.notifications);\r\n    };\r\n    \r\n    $scope.resetSwitchAutoSave = function(){\r\n        $scope.$storage.switchAutoSave = $scope.defaultSettings.switchAutoSave;\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n}).directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\").children().first().appendTo(\"#navbar-interfaces\");\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\").children().last().prependTo(\"#navbar-interfaces-dropdown-menu\");\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        scope.$watch('NavigationBarService.navbar', function() {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {        \r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        resizeNavbar();\r\n    };\r\n});","angular.module('AmpersandApp').service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, NotificationService){\r\n    let navbar = {};\r\n    let defaultSettings = {};\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        refreshNavBar : function(){\r\n            return Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n\r\n                angular.extend(navbar, data);\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                angular.extend(defaultSettings, data.defaultSettings);\r\n                \r\n                // Default settings for notificationPrefs\r\n                if($localStorage.notificationPrefs === undefined){\r\n                    $scope.resetNotificationSettings();\r\n                }\r\n                // Default setting for switchAutoSave\r\n                if($localStorage.switchAutoSave === undefined){\r\n                    $scope.resetSwitchAutoSave();\r\n                }\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n            }, function(error){\r\n                // on error\r\n            });\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});","angular.module('AmpersandApp').service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    RoleService = {\r\n        selectRole : function(roleId){\r\n            RoleService.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return RoleService.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n    \r\n    return RoleService;\r\n});","angular.module('AmpersandApp').controller('RoleMenuController', function ($scope, RoleService, NavigationBarService) {\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        NavigationBarService.promises.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n            })\r\n        );\r\n    };\r\n});","angular.module('AmpersandApp').service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notificationPrefs.switchAutoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});","angular.module('AmpersandApp').controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n"]}