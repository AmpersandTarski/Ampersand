{"version":3,"sources":["module.js","admin/execengine.controller.js","admin/installer.controller.js","angular-ui-switch/angular-ui-switch-adapted.js","importer/importer.module.js","interfacing/atomic.controller.js","interfacing/atomicDate.controller.js","interfacing/atomicTypeAhead.controller.js","interfacing/atomicUploadFile.controller.js","interfacing/box.controller.js","interfacing/interface.controller.js","interfacing/myBluronenter.directive.js","interfacing/myShowonooverBox.directive.js","interfacing/resource.service.js","navbar/myNavbarResize.directive.js","navbar/navigationBar.controller.js","navbar/navigationBar.service.js","navbar/role.service.js","notifications/notification.service.js","notifications/notificationCenter.controller.js","notifications/unsafe.filter.js","shared/loading/cgBusyDefaults.value.js","shared/myNavTo/myNavToInterfaces.directive.js","shared/myNavTo/myNavToOtherInterfaces.directive.js","ampersand.js","templates.js"],"names":["angular","module","config","$routeProvider","$locationProvider","when","controller","templateUrl","interfaceLabel","otherwise","redirectTo","hashPrefix","RestangularProvider","setBaseUrl","setDefaultHeaders","Content-Type","run","Restangular","$rootScope","$location","$route","NotificationService","RoleService","NavigationBarService","addFullRequestInterceptor","element","operation","what","url","headers","params","addResponseInterceptor","data","response","deferred","sessionRefreshAdvice","refreshNavBar","navTo","setErrorInterceptor","responseHandler","message","details","status","deactivateAllRoles","path","error","addInfo","msg","statusText","addError","html","undefined","notifications","updateNotifications","getCurrentDateTime","Date","original","reload","lastRoute","current","un","$on","apply","$scope","one","get","then","plain","installing","installed","install","defPop","defaultPop","directive","restrict","replace","transclude","template","attrs","ngModel","ngClick","class","app","requires","length","service","FileUploader","uploader","onSuccessItem","fileItem","onErrorItem","item","ImportService","ResourceService","selected","saveItem","addItem","removeItem","remove","removeResource","delete","deleteResource","pad","number","r","String","modifyToJSON","obj","toJSON","this","getUTCFullYear","getMonth","getDate","isOpen","openDatepicker","$event","preventDefault","stopPropagation","value","saveDateItem","property","patchResource","addDateItem","console","log","hasNoResults","getTypeahead","resourceType","forceGetCall","typeahead","all","getList","$object","typeaheadOnSelect","$item","$model","$label","resource","ifc","_id_","Array","isArray","patch","createPatch","addPatches","saved","push","copy","typeAheadCreate","alias","formData","removeAfterUpload","autoUpload","newResource","content","splice","createResource","save","saveResource","cancel","cancelResource","event","next","checkRequired","confirmed","confirm","emptyUpdatedResources","ifcName","pendingPromises","scope","bind","which","target","blur","link","closest","hasClass","hide","addClass","show","removeClass","$localStorage","$timeout","$q","updatedResources","getResource","callingObj","promise","_path_","$","isEmptyObject","extend","initResourceMetaData","_loading_","_patchesCache_","isCommitted","_isRoot_","processResponse","getNotifications","insertAtIndex","post","parent","indexOf","reject","index","pathLength","substring","op","patches","concat","autoSave","setResourceStatus","_showButtons_","resolve","reduce","prev","arr","_status_","warning","danger","default","success","some","val","$$state","$window","w","resizeNavbar","width","children","first","appendTo","last","prependTo","toggleClass","$watch","$sessionStorage","localStorage","sessionStorage","loadingNavBar","navbar","resetSettingsToDefault","toggleRole","roleId","set","setActiveRoles","checkAllRules","createNewResource","openWithIfc","top","new","refresh","role","ext","defaultSettings","notify_showSignals","notify_showInfos","notify_showSuccesses","notify_autoHideSuccesses","notify_showErrors","notify_showWarnings","notify_showInvariants","session","sessionRoles","sessionVars","initializeSettings","resetRequired","forEach","$reset","selectRole","selectRoleByLabel","roleLabel","label","id","active","getActiveRoleIds","roleIds","signals","invariants","infos","successes","warnings","errors","addSuccess","count","code","persistent","alreadyExists","i","addWarning","filter","closeAlert","alerts","$sce","trustAsHtml","backdrop","minDuration","$templateCache","put"],"mappings":"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","file":"ampersand.min.js","sourcesContent":["// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ui.codemirror', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/home.html',\r\n            interfaceLabel : 'Home'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    // RestangularProvider.setPlainByDefault(true); available from Restangular v1.5.3\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        // 401: Unauthorized\r\n        if(response.status == 401) {\r\n            RoleService.deactivateAllRoles();\r\n            $location.path(''); // TODO: redirect to login page (if exists)\r\n        }\r\n        \r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object'){\r\n            if(response.data.error == 404) {\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications); \r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n});\r\n","// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                data = data.plain();\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        Restangular.one('admin/installer').get({defaultPop : defPop}).then(function(data) {\r\n            data = data.plain();\r\n            NotificationService.updateNotifications(data);\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n","angular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE'\r\n  , replace: true\r\n  , transclude: true\r\n  , template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});","var app = angular.module('AmpersandApp');\r\napp.requires[app.requires.length] = 'angularFileUpload'; // add angularFileUpload to dependency list\r\napp.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true);\r\n            \r\n            if(response.notifications !== undefined) NotificationService.updateNotifications(response.notifications); \r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch])\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch])\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = ResourceService.saveResource; // function(resource)\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function to change location to create a new resource\r\n    $scope.newResource = function(){\r\n        $location.url('/' + ifcName + '?new');\r\n    };\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj){\r\n            promise = Restangular\r\n            .one(resource._path_ + '/' + ifc)\r\n            .get()\r\n            .then(function(data){\r\n                try {\r\n                    data = data.plain();\r\n                }catch(error){}\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else if(resource[ifc] === null || Array.isArray(resource[ifc])) resource[ifc] = data;\r\n                else angular.extend(resource[ifc], data);\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        saveResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .patch(resource._patchesCache_, {})\r\n            .then(function(data) {\r\n                data = data.plain();\r\n                \r\n                // Update resource data if committed\r\n                if(data.isCommitted) {\r\n                    if(resource._isRoot_) resource.get();\r\n                    else resource = angular.extend(resource, data.content);\r\n                }\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(resource, data);\r\n\r\n                return {resource : resource, saved: true};\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, callingObj, insertAtIndex){\r\n            promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                data = data.plain();\r\n                newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            patch = ResourceService.createPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .addPatches(patchResource, [patch])\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    data = data.plain();\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n                resource._loading_.push(promise);\r\n                \r\n                return promise;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            patch = ResourceService.createPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.addPatches(patchResource, [patch]).then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            value = resource[ifc][index];\r\n            patch = ResourceService.createPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Construct patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        createPatch : function(operation, resource, patchResource, ifc, value){\r\n            if(typeof patchResource === 'undefined') patchResource = resource;\r\n            pathLength = patchResource._path_.length;\r\n            \r\n            path = resource._path_.substring(pathLength);\r\n            if(typeof ifc !== 'undefined') path = path + '/' + ifc;\r\n            \r\n            if(typeof value === 'undefined') return { op : operation, path : path};\r\n            else return { op : operation, path : path, value : value};\r\n        },\r\n        \r\n        /**\r\n         * Add list of patches for given resource and call API (when auto-save is on)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object[]} patches\r\n         * @returns {Promise}\r\n         */\r\n        addPatches : function(resource, patches){\r\n            // Add new patches to resource\r\n            if(!Array.isArray(resource._patchesCache_)) resource._patchesCache_ = [];\r\n            resource._patchesCache_ = resource._patchesCache_.concat(patches);\r\n            \r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(resource) === -1) updatedResources.push(resource);\r\n            \r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave) {\r\n                return ResourceService.saveResource(resource);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false});\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\").children().first().appendTo(\"#navbar-interfaces\");\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\").children().last().prependTo(\"#navbar-interfaces-dropdown-menu\");\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        scope.$watch('NavigationBarService.navbar', function() {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {        \r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        resizeNavbar();\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.sessionStorage = $sessionStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService){\r\n    let navbar = {\r\n        top: [],\r\n        new: [],\r\n        refresh: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        refreshNavBar : function(){\r\n            return Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n\r\n                // Content of navbar\r\n                navbar.top = data.top;\r\n                navbar.new = data.new;\r\n                navbar.refresh = data.refresh;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    RoleService = {\r\n        selectRole : function(roleId){\r\n            RoleService.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return RoleService.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n    \r\n    return RoleService;\r\n});\r\n","angular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});","angular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n","angular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n","angular.module('AmpersandApp')\r\n.value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n","angular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n","// when using minified angular modules, use module('myApp', []).controller('MyController', ['myService', function (myService) { ...\r\nangular.module('AmpersandApp', ['ngResource', 'ngRoute', 'ngSanitize', 'restangular', 'ui.bootstrap', 'uiSwitch', 'cgBusy', 'siTable', 'ui.codemirror', 'ngStorage', 'angularFileUpload', 'ui.bootstrap.datetimepicker', 'hc.marked'])\r\n.config(function($routeProvider, $locationProvider) {\r\n    $routeProvider\r\n        // default start page\r\n        .when('/', { \r\n            controller : '',\r\n            templateUrl : 'app/src/shared/home.html',\r\n            interfaceLabel : 'Home'\r\n            })\r\n        // installer page\r\n        .when('/admin/installer', {\r\n            controller : 'InstallerController',\r\n            templateUrl : 'app/src/admin/installer.html',\r\n            interfaceLabel : 'Installer'\r\n            })\r\n        .when('/404', {\r\n            templateUrl: 'app/src/shared/404.html',\r\n            interfaceLabel: '404'\r\n            })\r\n        .otherwise({redirectTo: '/404'});\r\n    \r\n    $locationProvider.hashPrefix(''); // see: https://stackoverflow.com/questions/41211875/angularjs-1-6-0-latest-now-routes-not-working\r\n}).config(function(RestangularProvider) {\r\n    \r\n    RestangularProvider.setBaseUrl('api/v1'); // Generate: path to API folder\r\n    RestangularProvider.setDefaultHeaders({\"Content-Type\": \"application/json\"});\r\n    // RestangularProvider.setPlainByDefault(true); available from Restangular v1.5.3\r\n    \r\n}).run(function(Restangular, $rootScope, $location, $route, NotificationService, RoleService, NavigationBarService){\r\n\r\n    Restangular.addFullRequestInterceptor(function(element, operation, what, url, headers, params){\r\n        //params.navIfc = true;\r\n        //params.metaData = true;\r\n        return params;\r\n    });\r\n    \r\n    Restangular.addResponseInterceptor(function(data, operation, what, url, response, deferred){\r\n        if(operation != 'get' && operation != 'getList' && data.sessionRefreshAdvice) NavigationBarService.refreshNavBar();\r\n\t\tif((data || {}).navTo != null) $location.url(data.navTo);\r\n        \r\n        return data;\r\n    });\r\n    \r\n    Restangular.setErrorInterceptor(function(response, deferred, responseHandler) {\r\n        // 401: Unauthorized\r\n        if(response.status == 401) {\r\n            RoleService.deactivateAllRoles();\r\n            $location.path(''); // TODO: redirect to login page (if exists)\r\n        }\r\n        \r\n        var message;\r\n        var details;\r\n        if(typeof response.data === 'object'){\r\n            if(response.data.error == 404) {\r\n                NotificationService.addInfo(response.data.msg || 'Resource not found');\r\n            } else {\r\n                message = response.data.msg || response.statusText; // if empty response message, take statusText\r\n                NotificationService.addError(message, response.status, true, response.data.html);\r\n            }\r\n            \r\n            if(response.data.notifications !== undefined) NotificationService.updateNotifications(response.data.notifications); \r\n        }else{\r\n            message = response.status + ' ' + response.statusText;\r\n            details = response.data; // html content is excepted\r\n            NotificationService.addError(message, response.status, true, details);\r\n        }\r\n        \r\n        return true; // proceed with success or error hooks of promise\r\n    });\r\n    \r\n    $rootScope.getCurrentDateTime = function (){\r\n        return new Date();\r\n    };\r\n    \r\n    // Add feature to $location.url() function to be able to prevent reloading page (set reload param to false)\r\n    var original = $location.url;\r\n    $location.url = function (url, reload) {\r\n        if (reload === false) {\r\n            var lastRoute = $route.current;\r\n            var un = $rootScope.$on('$locationChangeSuccess', function () {\r\n                $route.current = lastRoute;\r\n                un();\r\n            });\r\n        }\r\n        return original.apply($location, [url]);\r\n    };\r\n});\r\n\n// Controller for extension app in navigation bar\r\nangular.module('AmpersandApp')\r\n.controller('ExecEngineController', function ($scope, Restangular, NotificationService) {\r\n    $scope.run = function (){\r\n        Restangular.one('admin/execengine/run').get()\r\n        .then(\r\n            function(data){ // on success\r\n                data = data.plain();\r\n                NotificationService.updateNotifications(data);\r\n            }\r\n        );\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InstallerController', function ($scope, Restangular, NotificationService, RoleService) {\r\n    $scope.installing = false;\r\n    $scope.installed = false;\r\n    \r\n    $scope.install = function(defPop){\r\n        $scope.installing = true;\r\n        $scope.installed = false;\r\n        Restangular.one('admin/installer').get({defaultPop : defPop}).then(function(data) {\r\n            data = data.plain();\r\n            NotificationService.updateNotifications(data);\r\n            \r\n            // deactive all roles\r\n            RoleService.deactivateAllRoles();\r\n            \r\n            $scope.installing = false;\r\n            $scope.installed = true;\r\n        }, function(){\r\n            $scope.installing = false;\r\n            $scope.installed = false;\r\n        });\r\n    };\r\n});\r\n\nangular.module('uiSwitch', [])\r\n\r\n.directive('switch', function(){\r\n  return {\r\n    restrict: 'AE'\r\n  , replace: true\r\n  , transclude: true\r\n  , template: function(element, attrs) {\r\n      var html = '';\r\n      html += '<a href=\"\"';\r\n      html +=   (attrs.ngModel && !attrs.ngClick) ? ' ng-click=\"' + attrs.ngModel + '=!' + attrs.ngModel + '\"' : '';\r\n      html += '>';\r\n      html += '<span';\r\n      html +=   ' class=\"switch' + (attrs.class ? ' ' + attrs.class : '') + '\"';\r\n      html +=   ' ng-class=\"{ checked:' + attrs.ngModel + ' }\"';\r\n      html +=   '>';\r\n      html +=   '<small></small>';\r\n      html += '</span>';\r\n      html += '<span ng-transclude></span>';\r\n      html += '</a>';\r\n      return html;\r\n    }\r\n  }\r\n});\nvar app = angular.module('AmpersandApp');\r\napp.requires[app.requires.length] = 'angularFileUpload'; // add angularFileUpload to dependency list\r\napp.config(function($routeProvider) {\r\n    $routeProvider\r\n        .when('/ext/importer', {\r\n            controller : 'PopulationImportController',\r\n            templateUrl : 'app/src/importer/importer.html',\r\n            interfaceLabel : 'Population importer'\r\n        });\r\n}).service('ImportService', function(FileUploader, NotificationService){\r\n    let uploader = new FileUploader({\r\n        url: 'api/v1/admin/import'\r\n    });\r\n\r\n    uploader.onSuccessItem = function(fileItem, response, status, headers) {\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n    \r\n    uploader.onErrorItem = function(item, response, status, headers){\r\n        let message;\r\n        let details;\r\n        if(typeof response === 'object'){\r\n            message = response.msg || 'Error while importing';\r\n            NotificationService.addError(message, status, true);\r\n            \r\n            if(response.notifications !== undefined) NotificationService.updateNotifications(response.notifications); \r\n        }else{\r\n            message = status + ' Error while importing';\r\n            details = response; // html content is excepted\r\n            NotificationService.addError(message, status, true, details);\r\n        }\r\n    };\r\n    \r\n    return {uploader : uploader};\r\n}).controller('PopulationImportController', function ($scope, ImportService) {\r\n    $scope.uploader = ImportService.uploader;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicController', function($scope, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.saveItem = ResourceService.saveItem; // function(resource, ifc, patchResource)\r\n    \r\n    $scope.addItem = ResourceService.addItem; // function(resource, ifc, selected, patchResource)\r\n    \r\n    $scope.removeItem = ResourceService.removeItem; // function(resource, ifc, index, patchResource)\r\n    \r\n    $scope.remove = ResourceService.removeResource; // function(parent, ifc, resource, patchResource)\r\n    \r\n    $scope.delete = ResourceService.deleteResource; // function(parent, ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicDateController', function ($scope, ResourceService) {\r\n    \r\n    $scope.isOpen = false;\r\n    \r\n    $scope.openDatepicker = function($event){\r\n        $event.preventDefault();\r\n        $event.stopPropagation();\r\n        $scope.isOpen = true;\r\n    };\r\n    \r\n    // Adds leading 0 if necesarry. Returns 2 digits.\r\n    function pad(number) {\r\n        var r = String(number);\r\n        if ( r.length === 1 ) {\r\n            r = '0' + r;\r\n        }\r\n        return r;\r\n    }\r\n    \r\n    function modifyToJSON(obj){\r\n        if(obj !== null){\r\n            obj.toJSON = function(){\r\n                return this.getUTCFullYear() + \r\n                    '-' + pad(this.getMonth() + 1) + // The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\r\n                    '-' + pad(this.getDate());\r\n            };\r\n        }\r\n    }\r\n    \r\n    $scope.selected = { value : ''}; // an empty object for temporary storing the input values\r\n    \r\n    $scope.saveDateItem = function(obj, property, patchResource){\r\n        modifyToJSON(obj[property]);\r\n        ResourceService.saveItem(obj, property, patchResource);\r\n    };\r\n    \r\n    $scope.addDateItem = function(obj, property, selected, patchResource){\r\n        if(selected.value !== ''){\r\n            modifyToJSON(selected.value);\r\n            ResourceService.addItem(obj, property, selected, patchResource);\r\n        }else{\r\n            console.log('Empty date selected');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicTypeAheadController', function($scope, Restangular, ResourceService){\r\n    \r\n    /*\r\n     * Object to temporary store value/resourceId to add to list\r\n     * Value/resourceId is stored as property of 'selected' obj. This is needed to pass it around by reference\r\n     */\r\n    $scope.selected = {};\r\n    \r\n    $scope.hasNoResults = false;\r\n    \r\n    /*\r\n     * Typeahead object is declared in interface.controller.js\r\n     * Thereby typeahead is called only once for every resourceType per interface\r\n     */\r\n    // $scope.typeahead = {};\r\n    \r\n    /*\r\n     * Typeahead functionality\r\n     * $scope.typeahead is initiated in InterfaceController to be able to reuse typeahead data\r\n     */\r\n    $scope.getTypeahead = function(resourceType, forceGetCall){\r\n        forceGetCall = typeof forceGetCall !== 'undefined' ? forceGetCall : false;\r\n\r\n        // Only if not yet set\r\n        if(typeof $scope.typeahead[resourceType] === 'undefined' || forceGetCall){\r\n            $scope.typeahead[resourceType] = Restangular.all('resource/' + resourceType).getList().$object;\r\n        }\r\n    };\r\n    \r\n    $scope.typeaheadOnSelect = function ($item, $model, $label, resource, ifc, patchResource){\r\n        if(typeof $item._id_ === 'undefined') console.log('Resource id undefined');\r\n        else if($item._id_ === '') console.log('Empty resource id provided');\r\n        else{\r\n            if(Array.isArray(resource[ifc])){\r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch])\r\n                .then(function(data){\r\n                    // Adapt in js model\r\n                    if(!data.saved) resource[ifc].push(angular.copy($item));\r\n                });\r\n                \r\n            }else if(resource[ifc] === null){\r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('replace', resource, patchResource, ifc, $item._id_);\r\n                ResourceService.addPatches(patchResource, [patch])\r\n                .then(function(data){\r\n                    // Adapt js model\r\n                    if(!data.saved) resource[ifc] = angular.copy($item);\r\n                });\r\n            }\r\n            else console.log('Error: Property already set and/or not defined');\r\n            \r\n            $scope.hasNoResults = false;\r\n        }\r\n        // Empty selected input\r\n        $scope.selected.value = '';\r\n    };\r\n    \r\n    $scope.typeAheadCreate = function (resource, ifc, selected, patchResource, resourceType){\r\n        if(Array.isArray(resource[ifc])) { \r\n            ResourceService.addItem(resource, ifc, selected, patchResource).then(\r\n                function(){\r\n                    $scope.getTypeahead(resourceType, true);\r\n                }\r\n            );\r\n        } else if(resource[ifc] === null) {\r\n            resource[ifc] = selected.value;\r\n            ResourceService.saveItem(resource, ifc, patchResource);\r\n        } else {\r\n            console.log('Error: Property already set and/or not defined');\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('AtomicUploadFileController', function($scope, FileUploader, NotificationService){\r\n    \r\n    // File uploader stuff\r\n    $scope.FileUploader = new FileUploader({\r\n        alias : 'file', // fieldname as used in $_FILES['file']\r\n        formData : [],\r\n        removeAfterUpload : true,\r\n        autoUpload : true\r\n    });\r\n    \r\n    $scope.FileUploader.onSuccessItem = function(fileItem, response, status, headers){\r\n        NotificationService.updateNotifications(response.notifications);\r\n        \r\n        newResource = response.content;\r\n        \r\n        // Add new resource to ifc\r\n        if(Array.isArray(fileItem.resource[fileItem.ifc])){ // non-uni = list\r\n            fileItem.resource[fileItem.ifc].splice(-1, 0, newResource);\r\n        }else{ // uni = object\r\n            fileItem.resource[fileItem.ifc] = newResource;\r\n        }\r\n    };\r\n    \r\n    $scope.FileUploader.onErrorItem = function(item, response, status, headers){\r\n        NotificationService.addError(response.msg, response.error, true, response.html);\r\n        NotificationService.updateNotifications(response.notifications);\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('BoxController', function($scope, ResourceService){\r\n    \r\n    // Function to create a new resource (does a POST)\r\n    $scope.createResource = ResourceService.createResource; // function(resource, ifc, callingObj, insertAtIndex)\r\n    \r\n    // Function to save certain attributes changes of a resource (does a PATCH)\r\n    $scope.save = ResourceService.saveResource; // function(resource)\r\n    \r\n    // Function to cancel unsaved edits (does a GET)\r\n    $scope.cancel = ResourceService.cancelResource; // function(resource)\r\n    \r\n    // Function to remove a resource from an interface (list)\r\n    $scope.remove = ResourceService.removeResource; // function(ifc, resource, patchResource)\r\n    \r\n    // Function to delete a resource\r\n    $scope.delete = ResourceService.deleteResource; // function(ifc, resource)\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('InterfaceController', function($scope, $location, ResourceService){\r\n    /*\r\n     * An empty object for typeahead functionality.\r\n     * Defined here so it can be reused in an interface\r\n     * Prevents multiple calls for the same resourceType\r\n     */\r\n    $scope.typeahead = {};\r\n    \r\n    // Detects location changes and checks if there are unsaved changes\r\n    $scope.$on(\"$locationChangeStart\", function(event, next, current){\r\n        if(ResourceService.checkRequired()){\r\n            confirmed = confirm(\"You have unsaved edits. Do you wish to leave?\");\r\n            if (event && !confirmed) event.preventDefault();\r\n            else if(event && confirmed) ResourceService.emptyUpdatedResources();\r\n            else console.log('Someting went wrong. Cannot determine action after locationChangeStart');\r\n        }\r\n    });\r\n    \r\n    // Function to change location to create a new resource\r\n    $scope.newResource = function(){\r\n        $location.url('/' + ifcName + '?new');\r\n    };\r\n    \r\n    // Function (reference) to check if there are pending promises for a resource\r\n    $scope.pendingPromises = ResourceService.pendingPromises;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myBluronenter', function() {\r\n    return function(scope, element, attrs) {\r\n        element.bind(\"keydown keypress\", function(event) {\r\n            if(event.which === 13) { // 13 = Carriage return\r\n                event.target.blur();\r\n\r\n                event.preventDefault();\r\n            }\r\n        });\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myShowonhoverBox', function (){\r\n    return {\r\n        link : function(scope, element, attrs) {\r\n            if(!element.closest('.box').hasClass('my-showonhover-box-show')) element.hide(); // default hide\r\n            \r\n            element.closest('.box').bind('mouseenter', function() {\r\n                element.closest('.box').addClass('my-showonhover-box-show');\r\n                element.show();\r\n            });\r\n            element.closest('.box').bind('mouseleave', function() {\r\n                element.closest('.box').removeClass('my-showonhover-box-show');\r\n                element.hide();\r\n            });\r\n        }\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('ResourceService', function($localStorage, $timeout, $location, Restangular, NotificationService, $q){\r\n    // http://blog.thoughtram.io/angular/2015/07/07/service-vs-factory-once-and-for-all.html\r\n    \r\n    let updatedResources = []; // contains list with updated resource objects in this interface. Used to check if there are uncommmitted changes (patches in cache)\r\n    \r\n    let ResourceService = {\r\n        /**\r\n         * Get resource data given a certain interface (ifc)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @returns {Promise}\r\n         */\r\n        getResource : function(resource, ifc, callingObj){\r\n            promise = Restangular\r\n            .one(resource._path_ + '/' + ifc)\r\n            .get()\r\n            .then(function(data){\r\n                try {\r\n                    data = data.plain();\r\n                }catch(error){}\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else if(resource[ifc] === null || Array.isArray(resource[ifc])) resource[ifc] = data;\r\n                else angular.extend(resource[ifc], data);\r\n                \r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n\r\n        /**\r\n         * Patch the given resource by calling the API and sending the list of stored patches \r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        saveResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .patch(resource._patchesCache_, {})\r\n            .then(function(data) {\r\n                data = data.plain();\r\n                \r\n                // Update resource data if committed\r\n                if(data.isCommitted) {\r\n                    if(resource._isRoot_) resource.get();\r\n                    else resource = angular.extend(resource, data.content);\r\n                }\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(resource, data);\r\n\r\n                return {resource : resource, saved: true};\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Cancel unsaved edits and get resource data\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {Promise}\r\n         */\r\n        cancelResource : function(resource){\r\n            promise = Restangular\r\n            .one(resource._path_)\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n                if($.isEmptyObject(data)) NotificationService.addInfo('No results found');\r\n                else angular.extend(resource, data);\r\n                \r\n                // Update visual feedback (notifications and buttons)\r\n                NotificationService.getNotifications();\r\n                ResourceService.initResourceMetaData(resource);\r\n\r\n                return resource;\r\n            });\r\n            \r\n            // Add promise to loading list\r\n            if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n            resource._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Create (POST) a new resource to a certain interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} callingObj will be used for loading indicator\r\n         * @param {int} insertAtIndex\r\n         * @returns {Promise}\r\n         */\r\n        createResource : function(resource, ifc, callingObj, insertAtIndex){\r\n            promise = Restangular\r\n            .one(resource._path_).all(ifc)\r\n            .post({}, {})\r\n            .then(function(data){\r\n                data = data.plain();\r\n                newResource = data.content;\r\n\r\n                // Update visual feedback (notifications and buttons)\r\n                ResourceService.processResponse(newResource, data);\r\n                \r\n                // Add new resource to ifc\r\n                if(Array.isArray(resource[ifc])){ // non-uni = list\r\n                    if(insertAtIndex === 'undefined') insertAtIndex = resource[ifc].length; // append by default\r\n                    resource[ifc].splice(insertAtIndex, 0, newResource);\r\n                }else{ // uni = object\r\n                    resource[ifc] = newResource;\r\n                }\r\n                \r\n                if(resource._isRoot_ && resource._id_ == '_NEW') $location.url('/' + ifc + '/'+ newResource._id_, false);\r\n\r\n                return newResource;\r\n            });\r\n\r\n            // Add promise to loading list\r\n            if(!Array.isArray(callingObj._loading_)) callingObj._loading_ = [];\r\n            callingObj._loading_.push(promise);\r\n            \r\n            return promise;\r\n        },\r\n        \r\n        /**\r\n         * Remove a resource from a certain interface list\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeResource : function(parent, ifc, resource, patchResource){\r\n            // Construct patch(es)\r\n            patch = ResourceService.createPatch('remove', resource, patchResource);\r\n\r\n            // Execute patch\r\n            return ResourceService\r\n            .addPatches(patchResource, [patch])\r\n            .then(function(data){\r\n                // Adapt js model\r\n                if(!data.saved) {\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n                }\r\n            });\r\n        },\r\n        \r\n        /**\r\n         * Delete a resource\r\n         * \r\n         * @param {Object} parent\r\n         * @param {string} ifc\r\n         * @param {Object} resource to delete\r\n         * @returns {Promise}\r\n         */\r\n        deleteResource : function(parent, ifc, resource){\r\n            if(confirm('Are you sure?')){\r\n                promise = Restangular\r\n                .one(resource._path_)\r\n                .remove({})\r\n                .then(function(data){\r\n                    data = data.plain();\r\n                    // Update visual feedback (notifications and buttons)\r\n                    NotificationService.updateNotifications(data.notifications);\r\n                    \r\n                    // Remove resource from ifc\r\n                    if(Array.isArray(parent[ifc])) parent[ifc].splice(parent[ifc].indexOf(resource), 1); // non-uni = list\r\n                    else parent[ifc] = null; // uni = object\r\n\r\n                    return parent;\r\n                });\r\n\r\n                // Add promise to loading list\r\n                if(!Array.isArray(resource._loading_)) resource._loading_ = [];\r\n                resource._loading_.push(promise);\r\n                \r\n                return promise;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save/patch a changed attribute\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        saveItem : function(resource, ifc, patchResource){\r\n            // Construct patch(es)\r\n            if(typeof resource[ifc] === 'undefined' || resource[ifc] === '') {\r\n                value = null;\r\n            } else {\r\n                value = resource[ifc];\r\n            }\r\n            patch = ResourceService.createPatch('replace', resource, patchResource, ifc, value);\r\n\r\n            // Register patch\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Add an item to an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {Object} selected item to add to the list\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        addItem : function(resource, ifc, selected, patchResource){\r\n            if(typeof selected.value === 'undefined') {\r\n                //console.log('Value undefined');\r\n                return $q.reject('Value undefined');\r\n            } else if(selected.value === '') {\r\n                //console.log('Empty value selected');\r\n                return $q.reject('Empty value selected');\r\n            } else if(!Array.isArray(resource[ifc])) {\r\n                //console.log('Error: trying to add item to non-array');\r\n                return $q.reject('Error: trying to add item to non-array');\r\n            } else{\r\n                // Adapt in js model\r\n                resource[ifc].push(selected.value);\r\n                \r\n                // Construct patch(es)\r\n                patch = ResourceService.createPatch('add', resource, patchResource, ifc, selected.value);\r\n                return ResourceService.addPatches(patchResource, [patch]).then(function(data){\r\n                    // Reset selected value\r\n                    delete(selected.value);\r\n                    return data;\r\n                });\r\n            }\r\n        },\r\n        \r\n        /**\r\n         * Remove an item from an interface list\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} ifc\r\n         * @param {int} index\r\n         * @param {Object} patchResource\r\n         * @returns {Promise}\r\n         */\r\n        removeItem : function(resource, ifc, index, patchResource){\r\n            // Construct patch(es)\r\n            value = resource[ifc][index];\r\n            patch = ResourceService.createPatch('remove', resource, patchResource, ifc, value);\r\n            \r\n            // Adapt js model\r\n            resource[ifc].splice(index, 1);\r\n\r\n            return ResourceService.addPatches(patchResource, [patch]);\r\n        },\r\n        \r\n        /**\r\n         * Construct patch object (with attributes 'op', 'path' and 'value')\r\n         * \r\n         * @param {string} operation choose from 'add', 'remove' or 'replace'\r\n         * @param {Object} resource\r\n         * @param {Object} patchResource\r\n         * @param {string} ifc\r\n         * @param {string} value\r\n         * @returns {Object}\r\n         */\r\n        createPatch : function(operation, resource, patchResource, ifc, value){\r\n            if(typeof patchResource === 'undefined') patchResource = resource;\r\n            pathLength = patchResource._path_.length;\r\n            \r\n            path = resource._path_.substring(pathLength);\r\n            if(typeof ifc !== 'undefined') path = path + '/' + ifc;\r\n            \r\n            if(typeof value === 'undefined') return { op : operation, path : path};\r\n            else return { op : operation, path : path, value : value};\r\n        },\r\n        \r\n        /**\r\n         * Add list of patches for given resource and call API (when auto-save is on)\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object[]} patches\r\n         * @returns {Promise}\r\n         */\r\n        addPatches : function(resource, patches){\r\n            // Add new patches to resource\r\n            if(!Array.isArray(resource._patchesCache_)) resource._patchesCache_ = [];\r\n            resource._patchesCache_ = resource._patchesCache_.concat(patches);\r\n            \r\n            // Add resource to updatedResources\r\n            if(updatedResources.indexOf(resource) === -1) updatedResources.push(resource);\r\n            \r\n            // Save if autoSave is enabled\r\n            if($localStorage.autoSave) {\r\n                return ResourceService.saveResource(resource);\r\n            } else {\r\n                // Update visual feedback\r\n                ResourceService.setResourceStatus(resource, 'warning');\r\n                resource._showButtons_ = {'save' : true, 'cancel' : true};\r\n                return $q.resolve({resource : resource, saved : false});\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns if there are unsaved changes (i.e. patches that are not yet sent to the API)\r\n         * \r\n         * @returns {bool}\r\n         */\r\n        checkRequired : function(){ \r\n            return updatedResources.reduce(function(prev, item, index, arr){\r\n                return prev || item._patchesCache_.length;\r\n            }, false);\r\n        },\r\n        \r\n        /**\r\n         * Clear list of updated resources\r\n         */\r\n        emptyUpdatedResources : function(){\r\n            updatedResources = [];\r\n        },\r\n        \r\n        /**\r\n         * Init/reset resource meta data\r\n         * \r\n         * @param {Object} resource\r\n         */\r\n        initResourceMetaData : function(resource){\r\n            resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n            resource._patchesCache_ = [];\r\n            ResourceService.setResourceStatus(resource, 'default');\r\n        },\r\n        \r\n        /**\r\n         * Process response: i.e. set resource buttons and status\r\n         * \r\n         * @param {Object} resource\r\n         * @param {Object} response from API\r\n         * @returns {Object}\r\n         */\r\n        processResponse : function(resource, response){\r\n            NotificationService.updateNotifications(response.notifications);\r\n            \r\n            if(response.isCommitted){\r\n                resource._showButtons_ = {'save' : false, 'cancel' : false};\r\n                resource._patchesCache_ = []; // empty patches cache\r\n                ResourceService.setResourceStatus(resource, 'success');\r\n                \r\n                // After 3 seconds, reset status to default\r\n                $timeout(function(){\r\n                    ResourceService.setResourceStatus(resource, 'default');\r\n                }, 3000);\r\n            }else{\r\n                resource._showButtons_ = {'save' : false, 'cancel' : true};\r\n                ResourceService.setResourceStatus(resource, 'danger');\r\n            }\r\n\r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Set resource status meta data\r\n         * \r\n         * @param {Object} resource\r\n         * @param {string} status choose from 'warning', 'danger', 'success' or 'default'\r\n         * @returns {Object}\r\n         */\r\n        setResourceStatus : function(resource, status){\r\n            // Reset all status properties\r\n            resource._status_ = { 'warning' : false,\r\n                                  'danger'  : false,\r\n                                  'default' : false,\r\n                                  'success' : false\r\n                                };\r\n            // Set status property\r\n            resource._status_[status] = true;\r\n            \r\n            return resource;\r\n        },\r\n        \r\n        /**\r\n         * Returns if resource has pending promises\r\n         * \r\n         * @param {Object} resource\r\n         * @returns {bool}\r\n         */\r\n        pendingPromises : function(resource){\r\n            if(!Array.isArray(resource._loading_)) return false; // empty array contains no pending promises\r\n            \r\n            return resource._loading_.some(function(val){\r\n                return val.$$state.status === 0; // promise status: 0 -> pending, 1 -> resolved, 2 -> rejected\r\n            });\r\n        }\r\n    };\r\n    \r\n    return ResourceService;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavbarResize', function ($window, $timeout, NavigationBarService) {\r\n    return function (scope, element) {\r\n        var w = angular.element($window);\r\n        \r\n        var resizeNavbar = function() {\r\n            $timeout(function(){\r\n                // moving ifc items from dropdown-menu to navbar itself\r\n                while($('#navbar-interfaces').width() < ($('#navbar-wrapper').width() - $('#navbar-options').width()) &&\r\n                        $('#navbar-interfaces-dropdown-menu').children().length > 0){\r\n                    $(\"#navbar-interfaces-dropdown-menu\").children().first().appendTo(\"#navbar-interfaces\");\r\n                }\r\n                \r\n                // moving ifc items from navbar to dropdown-menu\r\n                while($('#navbar-interfaces').width() > ($('#navbar-wrapper').width() - $('#navbar-options').width())){\r\n                    $(\"#navbar-interfaces\").children().last().prependTo(\"#navbar-interfaces-dropdown-menu\");\r\n                    \r\n                    // show/hide dropdown menu for more interfaces (must be inside loop, because it affects the width of the navbar\r\n                    $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n                }\r\n                \r\n                // show/hide dropdown menu when possible\r\n                $('#navbar-interfaces-dropdown').toggleClass('hidden', $('#navbar-interfaces-dropdown-menu').children().length <= 0);\r\n            });\r\n        };\r\n        \r\n        // watch navbar\r\n        scope.$watch('NavigationBarService.navbar', function() {\r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when window size gets changed\r\n        w.bind('resize', function () {        \r\n            resizeNavbar();\r\n        });\r\n        \r\n        // when page loads\r\n        resizeNavbar();\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.controller('NavigationBarController', function ($scope, $route, Restangular, $localStorage, $sessionStorage, $location, NotificationService, RoleService, NavigationBarService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.sessionStorage = $sessionStorage;\r\n    $scope.loadingNavBar = [];\r\n    $scope.navbar = NavigationBarService.navbar;\r\n    $scope.resetSettingsToDefault = NavigationBarService.resetSettingsToDefault;\r\n    \r\n    $scope.reload = function(){\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n        $route.reload();\r\n    };\r\n\r\n    $scope.toggleRole = function(roleId, set){\r\n        RoleService.toggleRole(roleId, set);\r\n        $scope.loadingNavBar = [];\r\n        $scope.loadingNavBar.push(\r\n            RoleService.setActiveRoles()\r\n            .then(function(data){\r\n                NavigationBarService.refreshNavBar();\r\n            })\r\n        );\r\n    };\r\n\r\n    $scope.checkAllRules = NotificationService.checkAllRules;\r\n\r\n    $scope.createNewResource = function(resourceType, openWithIfc){\r\n        Restangular.one('resource').all(resourceType)\r\n        .post({}, {})\r\n        .then(\r\n            function(data){\r\n                // Jumps to interface and requests newly created resource\r\n                $location.url(openWithIfc + '/' + data._id_);\r\n            }\r\n        );\r\n    };\r\n    \r\n    $scope.loadingNavBar.push(NavigationBarService.refreshNavBar());\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NavigationBarService', function(Restangular, $localStorage, $sessionStorage, $timeout, NotificationService){\r\n    let navbar = {\r\n        top: [],\r\n        new: [],\r\n        refresh: [],\r\n        role: [],\r\n        ext: []\r\n    };\r\n    let defaultSettings = {\r\n        notify_showSignals: true,\r\n        notify_showInfos: true,\r\n        notify_showSuccesses: true,\r\n        notify_autoHideSuccesses: true,\r\n        notify_showErrors: true,\r\n        notify_showWarnings: true,\r\n        notify_showInvariants: true,\r\n        autoSave: true\r\n    };\r\n\r\n    let service = {\r\n        navbar : navbar,\r\n        defaultSettings : defaultSettings,\r\n\r\n        refreshNavBar : function(){\r\n            return Restangular\r\n            .one('app/navbar')\r\n            .get()\r\n            .then(function(data){\r\n                data = data.plain();\r\n\r\n                // Content of navbar\r\n                navbar.top = data.top;\r\n                navbar.new = data.new;\r\n                navbar.refresh = data.refresh;\r\n                navbar.role = data.role;\r\n                navbar.ext = data.ext;\r\n\r\n                // Content for session storage\r\n                $sessionStorage.session = data.session;\r\n                $sessionStorage.sessionRoles = data.sessionRoles;\r\n                $sessionStorage.sessionVars = data.sessionVars;\r\n                \r\n                // Save default settings\r\n                service.defaultSettings = data.defaultSettings;\r\n                service.initializeSettings();\r\n                \r\n                // Update notifications\r\n                NotificationService.updateNotifications(data.notifications);\r\n            }, function(error){\r\n                service.initializeSettings();\r\n            });\r\n        },\r\n\r\n        initializeSettings : function(){\r\n            let resetRequired = false;\r\n\r\n            // Check for undefined settings\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                if($localStorage[index] === undefined) {\r\n                    resetRequired = true;\r\n                }\r\n            });\r\n\r\n            if(resetRequired) service.resetSettingsToDefault();\r\n        },\r\n\r\n        resetSettingsToDefault : function(){\r\n            // all off\r\n            angular.forEach(service.defaultSettings, function(value, index, obj){\r\n                $localStorage[index] = false;\r\n            });\r\n            \r\n            $timeout(function() {\r\n                // Reset to default\r\n                $localStorage.$reset(service.defaultSettings);\r\n            }, 500);\r\n        }\r\n    };\r\n    \r\n    return service;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('RoleService', function($sessionStorage, Restangular){\r\n    \r\n    /*\r\n     * Available roles are registered in $sessionStorage.sessionRoles\r\n     * A role has the following attributes: id, label, active\r\n     */\r\n    \r\n    RoleService = {\r\n        selectRole : function(roleId){\r\n            RoleService.toggleRole(roleId, true);\r\n        },\r\n        \r\n        selectRoleByLabel : function (roleLabel){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if(role.label == roleLabel) return RoleService.selectRole(role.id);\r\n            });\r\n        },\r\n        \r\n        toggleRole : function(roleId, set){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.id == roleId) {\r\n                    if(set === undefined) role.active = !role.active;\r\n                    else role.active = set;\r\n                }\r\n            });\r\n        },\r\n        \r\n        getActiveRoleIds : function(){\r\n            var roleIds = [];\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                if (role.active === true) {\r\n                    roleIds.push(role.id);\r\n                }\r\n            });\r\n            return roleIds;\r\n        },\r\n        \r\n        deactivateAllRoles : function(){\r\n            angular.forEach($sessionStorage.sessionRoles, function(role) {\r\n                role.active = false;\r\n            });\r\n        },\r\n        \r\n        setActiveRoles : function(){\r\n            return Restangular.all('app/roles').patch($sessionStorage.sessionRoles);\r\n        }\r\n    };\r\n    \r\n    return RoleService;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.service('NotificationService', function($localStorage, $sessionStorage, $timeout, Restangular){\r\n    // Initialize notifications container\r\n    let notifications = {\r\n        'signals' : [],\r\n        'invariants' : [],\r\n        'infos' : [],\r\n        'successes' : [],\r\n        'warnings' : [],\r\n        'errors' : []\r\n    };\r\n    \r\n    let NotificationService = {\r\n        notifications : notifications,\r\n        \r\n        // Function to get notifications again\r\n        getNotifications : function(){\r\n            return Restangular\r\n            .one('app/notifications')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.updateNotifications(data);\r\n                },\r\n                function(){\r\n                    NotificationService.addError('Something went wrong while getting notifications');\r\n                }\r\n            );\r\n        },\r\n\r\n        checkAllRules : function(){\r\n            return Restangular\r\n            .one('admin/ruleengine/evaluate/all')\r\n            .get()\r\n            .then(\r\n                function(data){\r\n                    data = data.plain();\r\n                    NotificationService.addSuccess('Evaluated all rules.');\r\n                    NotificationService.updateNotifications(data);\r\n                },function(){\r\n                    NotificationService.addError('Something went wrong while evaluating all rules');\r\n                }\r\n            );\r\n        },\r\n        \r\n        // Function to update notifications after api response\r\n        updateNotifications : function(data){\r\n            if(data === undefined) return;\r\n            \r\n            // Overwrite\r\n            notifications.signals = data.signals;\r\n            notifications.invariants = data.invariants;\r\n            \r\n            // Merge\r\n            notifications.infos = notifications.infos.concat(data.infos);\r\n            notifications.successes = notifications.successes.concat(data.successes);\r\n            notifications.warnings = notifications.warnings.concat(data.warnings);\r\n            notifications.errors = notifications.errors.concat(data.errors);\r\n            \r\n            if($localStorage.notify_autoHideSuccesses){\r\n                $timeout(function() {\r\n                    notifications.successes = [];\r\n                }, 3000);\r\n            }\r\n        },\r\n        \r\n        addSuccess : function(message){\r\n            notifications.successes.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n            \r\n            // TODO: move timeout function here for auto hide successes\r\n        },\r\n        \r\n        addError : function(message, code, persistent, details){\r\n            code = typeof code !== undefined ? code : null;\r\n            persistent = typeof persistent !== undefined ? persistent : false;\r\n            details = typeof details !== undefined ? details : false;\r\n            \r\n            let alreadyExists = false;\r\n            let arr = notifications.errors;\r\n            for (let i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    arr[i].code = code;\r\n                    arr[i].persistent = persistent;\r\n                    arr[i].details = details;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.errors.push({\r\n                'message' : message,\r\n                'code' : code,\r\n                'count' : 1,\r\n                'persistent' : persistent,\r\n                'details' : details\r\n            });\r\n        },\r\n        \r\n        addWarning : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.warnings;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.warnings.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        },\r\n        \r\n        addInfo : function(message){\r\n            let alreadyExists = false;\r\n            let arr = notifications.infos;\r\n            for (var i = 0; i < arr.length; i++) {\r\n                if (arr[i].message == message) {\r\n                    arr[i].count += 1;\r\n                    alreadyExists = true;\r\n                }\r\n            }\r\n            if(!alreadyExists) notifications.infos.push({\r\n                'message' : message,\r\n                'count' : 1\r\n            });\r\n        }\r\n    };\r\n    \r\n    return NotificationService;\r\n});\nangular.module('AmpersandApp')\r\n.controller('NotificationCenterController', function ($scope, $route, Restangular, $localStorage, NotificationService) {\r\n    \r\n    $scope.localStorage = $localStorage;\r\n    $scope.notifications = NotificationService.notifications;\r\n    \r\n    // Hide success-, error-, warnings-, info- and invariant violation messages (not signals) upon route change\r\n    $scope.$on(\"$routeChangeSuccess\", function(){\r\n        $scope.notifications.successes = [];\r\n        $scope.notifications.errors = $scope.notifications.errors.filter(function (error){\r\n            if(error.persistent){\r\n                error.persistent = false;\r\n                return true;\r\n            }\r\n            else return false;\r\n        });\r\n        $scope.notifications.warnings = [];\r\n        $scope.notifications.infos = [];\r\n        $scope.notifications.invariants = [];\r\n    });\r\n    \r\n    // Function to close notifications\r\n    $scope.closeAlert = function(alerts, index) {\r\n        alerts.splice(index, 1);\r\n    };\r\n    \r\n});\r\n\nangular.module('AmpersandApp')\r\n.filter('unsafe', function($sce){\r\n    return $sce.trustAsHtml;\r\n});\r\n\nangular.module('AmpersandApp')\r\n.value('cgBusyDefaults',{\r\n    message:'Loading...',\r\n    backdrop: true,\r\n    //templateUrl: 'my_custom_template.html',\r\n    //delay: 500, // in ms\r\n    minDuration: 500, // in ms\r\n    // wrapperClass: 'my-class my-class2'\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavToInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToInterfaces.html',\r\n        transclude : true\r\n    };\r\n});\r\n\nangular.module('AmpersandApp')\r\n.directive('myNavToOtherInterfaces', function(){\r\n    return {\r\n        restrict : 'E',\r\n        scope  : {resource : '=', target : '@'}, // '=' => two-way bind, '@' => evaluates string (use {{}} in html) \r\n        templateUrl : 'app/src/shared/myNavTo/myNavToOtherInterfaces.html'\r\n    };\r\n});\r\n\nangular.module('AmpersandApp').run(['$templateCache', function($templateCache) {$templateCache.put('app/src/admin/check-rules-menu-item.html','<a ng-click=\"checkAllRules()\"><span class=\"glyphicon glyphicon-check\"></span><span> (Re)evaluate all rules</span></a>');\n$templateCache.put('app/src/admin/execengine-menu-item.html','<a ng-controller=\"ExecEngineController\" href=\"\" ng-click=\"run()\">\\r\\n\\t<span class=\"glyphicon glyphicon-cog\"></span><span> Run execution engine</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/exporter-menu-item.html','<a ng-href=\"api/v1/admin/export/all\">\\r\\n    <span class=\"glyphicon glyphicon-download\"></span><span> Population export</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer-menu-item.html','<a href=\"#/admin/installer\">\\r\\n    <span class=\"glyphicon glyphicon-trash\"></span><span> Reinstall database</span>\\r\\n</a>');\n$templateCache.put('app/src/admin/installer.html','<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Installer</h1>\\r\\n        <p>This action will reinstall the application and delete all content.</p>\\r\\n        <p>If provided, the initial population will be installed.</p>\\r\\n        <div class=\"btn-group\">\\r\\n            <button type=\"button\" ng-click=\"install(true)\" class=\"btn btn-lg\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\">\\r\\n                <span ng-if=\"!installed && ! installing\">Reinstall application  </span>\\r\\n                <span ng-if=\"installing\">Application installing  </span>\\r\\n                <span ng-if=\"installed\">Application reinstalled  </span>\\r\\n                <img ng-if=\"installing\" ng-src=\"app/images/loading.gif\" style=\"height:20px;\"/>\\r\\n            </button>\\r\\n            <button type=\"button\" class=\"btn btn-lg dropdown-toggle\" ng-class=\"{\\'btn-danger\\' : (!installing && !installed), \\'btn-warning\\' : installing, \\'btn-success\\' : installed}\" ng-disabled=\"installing\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\\r\\n                <span class=\"caret\"></span>\\r\\n            </button>\\r\\n            <ul class=\"dropdown-menu\">\\r\\n                <li><a href=\"\" ng-click=\"install(true)\">Reinstall application</a></li>\\r\\n                <li><a href=\"\" ng-click=\"install(false)\">Reinstall application (without default population)</a></li>\\r\\n            </ul>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/importer/importer.html','<style>\\r\\n.my-drop-zone { \\r\\nborder: dotted 3px lightgray;\\r\\n}\\r\\n\\r\\n/* Default class applied to drop zones on over */\\r\\n.nv-file-over {\\r\\n\\tborder: dotted 3px red;\\r\\n}\\r\\n\\r\\n.another-file-over-class {\\r\\n\\tborder: dotted 3px green;\\r\\n}\\r\\n</style>\\r\\n<div class=\"container-fluid interface\">\\r\\n\\t<fieldset>\\r\\n\\t\\t<legend>Population importer</legend>\\r\\n\\t\\t<div class=\"row\">\\r\\n\\t\\t\\t<div class=\"col-md-3\" nv-file-drop=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t<h3>Select files</h3>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t<!-- 3. nv-file-over uploader=\"link\" over-class=\"className\" -->\\r\\n\\t\\t\\t\\t\\t<div class=\"well my-drop-zone\" nv-file-over=\"\" uploader=\"uploader\">\\r\\n\\t\\t\\t\\t\\t\\tBase drop zone\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<!-- Example: nv-file-select=\"\" uploader=\"{Object}\" options=\"{Object}\" filters=\"{String}\" -->\\r\\n\\t\\t\\t\\tMultiple\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" multiple  /><br/>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\tSingle\\r\\n\\t\\t\\t\\t<input type=\"file\" nv-file-select=\"\" uploader=\"uploader\" />\\r\\n\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t<div class=\"col-md-9\" style=\"margin-bottom: 40px\">\\r\\n\\t\\r\\n\\t\\t\\t\\t<h3>Upload queue</h3>\\r\\n\\t\\t\\t\\t<p>Queue length: {{ uploader.queue.length }}</p>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<table class=\"table\">\\r\\n\\t\\t\\t\\t\\t<thead>\\r\\n\\t\\t\\t\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th width=\"50%\">Name</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Size</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th ng-show=\"uploader.isHTML5\">Progress</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Status</th>\\r\\n\\t\\t\\t\\t\\t\\t\\t<th>Actions</th>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</thead>\\r\\n\\t\\t\\t\\t\\t<tbody>\\r\\n\\t\\t\\t\\t\\t\\t<tr ng-repeat=\"item in uploader.queue\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<td><strong>{{ item.file.name }}</strong></td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\" nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td ng-show=\"uploader.isHTML5\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress\" style=\"margin-bottom: 0;\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': item.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td class=\"text-center\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isSuccess\"><i class=\"glyphicon glyphicon-ok\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isCancel\"><i class=\"glyphicon glyphicon-ban-circle\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isError\"><i class=\"glyphicon glyphicon-remove\"></i></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span ng-show=\"item.isUploading\"><img src=\"app/images/loading.gif\" height=\"20\" width=\"20\"></span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t\\t<td nowrap>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-xs\" ng-click=\"item.upload()\" ng-disabled=\"item.isReady || item.isUploading\">  <!-- Removed: \"|| item.isSuccess\" to enable the re-upload of a file.-->\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-xs\" ng-click=\"item.cancel()\" ng-disabled=\"!item.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-xs\" ng-click=\"item.remove()\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t\\t\\t\\t</tr>\\r\\n\\t\\t\\t\\t\\t</tbody>\\r\\n\\t\\t\\t\\t</table>\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t<div>\\r\\n\\t\\t\\t\\t\\t\\tQueue progress:\\r\\n\\t\\t\\t\\t\\t\\t<div class=\"progress\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\"progress-bar\" role=\"progressbar\" ng-style=\"{ \\'width\\': uploader.progress + \\'%\\' }\"></div>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-success btn-sm\" ng-click=\"uploader.uploadAll()\" ng-disabled=\"!uploader.getNotUploadedItems().length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-upload\"></span> Upload all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-warning btn-sm\" ng-click=\"uploader.cancelAll()\" ng-disabled=\"!uploader.isUploading\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-ban-circle\"></span> Cancel all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t\\t<button type=\"button\" class=\"btn btn-danger btn-sm\" ng-click=\"uploader.clearQueue()\" ng-disabled=\"!uploader.queue.length\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\"glyphicon glyphicon-trash\"></span> Remove all\\r\\n\\t\\t\\t\\t\\t</button>\\r\\n\\t\\t\\t\\t</div>\\t\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</fieldset>\\r\\n</div>');\n$templateCache.put('app/src/importer/menu-item.html','<a ng-href=\"#/ext/importer/\">\\r\\n    <span class=\"glyphicon glyphicon-upload\"></span><span> Population importer</span>\\r\\n</a>');\n$templateCache.put('app/src/navbar/navigationBar.html','<nav class=\"navbar navbar-default\" role=\"navigation\" ng-controller=\"NavigationBarController\" cg-busy=\"{promise:loadingNavBar}\">\\r\\n    <div id=\"navbar-wrapper\" class=\"container\">\\r\\n        <ul class=\"nav navbar-nav\" id=\"navbar-interfaces\" my-navbar-resize>\\r\\n            <li><a href=\"#/\"><span class=\"glyphicon glyphicon-home\"></span></a></li>\\r\\n            <li id=\"navbar-interfaces-dropdown\" class=\"dropdown\" uib-tooltip=\"More interfaces\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-menu-hamburger\"></span></a>\\r\\n                <ul id=\"navbar-interfaces-dropdown-menu\" class=\"dropdown-menu\" role=\"menu\"></ul>\\r\\n            </li>\\r\\n            <li id=\"{{interface.label}}\" ng-repeat=\"interface in navbar.top\"> <!-- the interface id is there so we can style specific menu items with css -->\\r\\n                <a href=\"#/{{interface.id}}\">\\r\\n                    <span class=\"glyphicon glyphicon-list-alt\"></span> {{interface.label}}</a>\\r\\n            </li>\\r\\n        </ul>\\r\\n        <ul class=\"nav navbar-nav navbar-right\" id=\"navbar-options\">\\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Show/hide notifications\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"left\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-bullhorn\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\" ng-click=\"$event.stopPropagation();\">\\r\\n                    <li class=\"dropdown-header\">Transaction settings</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSignals\"> Show signals</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInvariants\"> Show invariants</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.autoSave\"> Auto save changes</switch></li>\\r\\n                    <li class=\"dropdown-header\">User logs</li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showErrors\"> Show errors</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showWarnings\"> Show warnings</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showInfos\"> Show infos</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_showSuccesses\"> Show successes</switch></li>\\r\\n                        <li><switch ng-model=\"localStorage.notify_autoHideSuccesses\"> Auto hide successes</switch></li>\\r\\n                    <li class=\"divider\" role=\"presentation\"></li>\\r\\n                        <li><a href=\"\" ng-click=\"resetSettingsToDefault();\"><span class=\"glyphicon glyphicon-repeat\" style=\"margin: 4px; width: 30px;\"></span> Default settings</a></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li class=\"dropdown hidden-xs\" uib-tooltip=\"Refresh/reset options\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-refresh\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li><a href=\"\" ng-click=\"reload()\"><span class=\"glyphicon glyphicon-refresh\"></span> Refresh page</a></li>\\r\\n                    <li ng-if=\"navbar.refresh.length\" class=\"divider\" role=\"presentation\"></li>\\r\\n                    <li ng-repeat=\"app in navbar.refresh\" ng-include=\"app.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li ng-if=\"navbar.ext.length\" class=\"dropdown hidden-xs\" uib-tooltip=\"Select application extensions\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-th\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"ext in navbar.ext\" ng-include=\"ext.url\"/>\\r\\n                    <!-- <li class=\"divider\" role=\"presentation\"></li>-->                    \\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <!-- hidden on extra small devices, e.g. phone (<768px) -->\\r\\n            <li ng-if=\"navbar.new.length\" class=\"dropdown hidden-xs\" uib-tooltip=\"Create new resource\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n                    <span class=\"glyphicon glyphicon-plus\"></span>\\r\\n                </a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"item in navbar.new\" ng-class=\"{\\'dropdown-submenu\\' : item.ifcs.length > 1}\">\\r\\n                        <!--<a  style=\"position:relative; display:inline-block;\">-->\\r\\n                        <a ng-if=\"item.ifcs.length > 1\" tabindex=\"-1\" href=\"#\">{{item.label}}</a>\\r\\n                        <ul ng-if=\"item.ifcs.length > 1\" class=\"dropdown-menu\" role=\"menu\">\\r\\n                            <li ng-repeat=\"ifc in item.ifcs\">\\r\\n                                <a tabindex=\"-1\" href=\"#\" ng-click=\"createNewResource(ifc.resourceType, ifc.link);\">{{ifc.label}}</a>\\r\\n                            </li>\\r\\n                        </ul>\\r\\n                        \\r\\n                        <a ng-if=\"item.ifcs.length == 1\" href=\"\" ng-click=\"createNewResource(item.ifcs[0].resourceType, item.ifcs[0].link);\">{{item.label}}</a>\\r\\n                        <span ng-if=\"item.ifcs.length == 0\">{{item.label}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            \\r\\n            <li ng-if=\"sessionStorage.sessionRoles.length || navbar.role.length\" class=\"dropdown\" uib-tooltip=\"Switch roles\" tooltip-trigger=\"mouseenter\" tooltip-placement=\"top\">\\r\\n                <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"glyphicon glyphicon-user\"></span></a>\\r\\n                <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                    <li ng-repeat=\"role in sessionStorage.sessionRoles\" ng-click=\"$event.stopPropagation();\"><switch ng-model=\"role.active\" ng-click=\"toggleRole(role.id);\"> {{role.label}}</switch></li>\\r\\n                    <li ng-if=\"navbar.role.length && sessionStorage.sessionRoles.length\" class=\"divider\" role=\"presentation\"></li>\\r\\n                    <li ng-repeat=\"ext in navbar.role\" ng-include=\"ext.url\"/>\\r\\n                </ul>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n</nav>');\n$templateCache.put('app/src/notifications/notificationCenter.html','<div class=\"container-fluid\">\\r\\n    <div id=\"notificationCenter\" ng-controller=\"NotificationCenterController\">\\r\\n        \\r\\n        <div id=\"infos\" ng-show=\"localStorage.notify_showInfos\">\\r\\n            <div class=\"alert alert-info alert-dismissible\" role=\"alert\" ng-repeat=\"info in notifications.infos\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.infos, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-info-sign\"></span><span> {{info.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"warnings\" ng-show=\"localStorage.notify_showWarnings\">\\r\\n            <div class=\"alert alert-warning alert-dismissible\" role=\"alert\" ng-repeat=\"warning in notifications.warnings\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.warnings, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-warning-sign\"></span><span> {{warning.message}}</span>\\r\\n                <span class=\"badge pull-right\" ng-show=\"warning.count > 1\">{{warning.count}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"errors\" ng-show=\"localStorage.notify_showErrors\">\\r\\n            <div class=\"panel panel-danger\" id=\"error-panel-{{key}}\" ng-repeat=\"(key, error) in notifications.errors\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#error-body-{{key}}\">\\r\\n                    <div class=\"text-left\">\\r\\n                        <span class=\"glyphicon glyphicon-exclamation-sign\"></span> <span ng-bind-html=\"error.message | unsafe\"></span>\\r\\n                        <button type=\"button\" class=\"close\" data-target=\"#error-panel-{{key}}\" data-dismiss=\"alert\" aria-label=\"Dismiss\" ng-click=\"closeAlert(notifications.errors, $index);\">\\r\\n                            <span aria-hidden=\"true\">&times;</span>\\r\\n                        </button>\\r\\n                        <span class=\"badge pull-right\" ng-show=\"error.count > 1\">{{error.count}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\"panel-body collapse\" id=\"error-body-{{key}}\">\\r\\n                    <div ng-if=\"error.details\" ng-bind-html=\"error.details | unsafe\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <div id=\"invariants\" ng-show=\"localStorage.notify_showInvariants\">\\r\\n            <div class=\"panel panel-danger\" ng-repeat=\"(key, val) in notifications.invariants\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#invariant-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.ruleMessage\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.tuples.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"invariant-{{key}}\">\\r\\n                    <li class=\"list-group-item\" ng-repeat=\"tuple in val.tuples track by $index\">\\r\\n                        <span>{{tuple.violationMessage}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n                    \\r\\n        <div id=\"signals\" ng-show=\"localStorage.notify_showSignals\">\\r\\n            <div class=\"panel panel-warning\" ng-repeat=\"(key, val) in notifications.signals\">\\r\\n                <div class=\"panel-heading btn btn-block\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">\\r\\n                    <div class=\"text-left\" style=\"display:flex; align-items:center;\">\\r\\n                        <span class=\"glyphicon glyphicon-warning-sign\"></span>\\r\\n                        <div marked=\"val.message\" style=\"display:inline-block; margin: 0px 10px;\"></div> <!-- uses angular-marked directive -->\\r\\n                        <span class=\"badge\" style=\"margin-left:auto;\">{{val.violations.length}}</span>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <ul class=\"list-group collapse\" id=\"violation-{{key}}\">\\r\\n                    <li class=\"dropdown list-group-item\" ng-repeat=\"violation in val.violations track by $index\">\\r\\n                        <div ng-if=\"violation.ifcs.length > 1\">\\r\\n                            <a href=\"\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">{{violation.message}}</a>\\r\\n                            <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n                                <li ng-repeat=\"ifc in violation.ifcs\">\\r\\n                                    <a ng-href=\"{{ifc.link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\"><small>View</small> {{ifc.label}}</a>\\r\\n                                </li>\\r\\n                            </ul>\\r\\n                        </div>\\r\\n                        <a ng-if=\"violation.ifcs.length == 1\" ng-href=\"{{violation.ifcs[0].link}}\" data-toggle=\"collapse\" data-target=\"#violation-{{key}}\">{{violation.message}}</a>\\r\\n                        <span ng-if=\"violation.ifcs.length == 0\">{{violation.message}}</span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n        \\r\\n        <!-- Success notifications must be last in notifications center because of position:absolute -->\\r\\n        <div id=\"successes\" ng-show=\"localStorage.notify_showSuccesses\">\\r\\n            <div class=\"alert alert-success alert-dismissible\" role=\"alert\" ng-repeat=\"success in notifications.successes\">\\r\\n                <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" ng-click=\"closeAlert(notifications.successes, $index);\"><span aria-hidden=\"true\">&times;</span></button>\\r\\n                <span class=\"glyphicon glyphicon-ok-sign\"></span><span> {{success.message}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/shared/404.html','<!-- 404 page -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"row\">\\r\\n        <div class=\"col-md-4\">\\r\\n            <h1>404 Page not found</h1>\\r\\n            <p>The requested page does not exist.</p>\\r\\n            <p><a class=\"btn btn-primary btn-lg\" href=\"#/\" role=\"button\">Goto startpage</a></p>\\r\\n        </div>\\r\\n        <div>\\r\\n            <img src=\"app/images/404-image.png\">\\r\\n        </div>\\r\\n    </div>\\r\\n</div>');\n$templateCache.put('app/src/shared/home.html','<!-- Home screen -->\\r\\n<div class=\"container-fluid\" id=\"Interface\">\\r\\n    <div class=\"jumbotron\">\\r\\n        <h1>Hello, world!</h1>\\r\\n        <p>You\\'ve successfully generated your Ampersand prototype.</p>\\r\\n        <p><a class=\"btn btn-primary btn-lg\" href=\"https://ampersandtarski.gitbooks.io/documentation\" target=\"_blank\" role=\"button\">See our documentation &raquo;</a></p>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/src/shared/loading/loading.html','<img src=\"app/images/loading.gif\" alt=\"Loading...\" style=\"height:20px;\"/>');\n$templateCache.put('app/src/shared/myNavTo/myNavToInterfaces.html','<div ng-if=\"resource._ifcs_.length > 1\" style=\"position:relative; display:inline-block;\">\\r\\n    <a class=\"dropdown-toggle\" data-toggle=\"dropdown\"><ng-transclude></ng-transclude></a>\\r\\n    <ul class=\"dropdown-menu\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>\\r\\n<a ng-if=\"resource._ifcs_.length == 1\" ng-href=\"#/{{resource._ifcs_[0].id}}/{{resource._id_}}\" target=\"{{target}}\"><ng-transclude></ng-transclude></a>\\r\\n<span ng-if=\"resource._ifcs_.length == 0 || resource._ifcs_ == undefined\"><ng-transclude></ng-transclude></span>');\n$templateCache.put('app/src/shared/myNavTo/myNavToOtherInterfaces.html','<!-- Only when ifcs has more than 1 interface, otherwise, the user is already there -->\\r\\n<!-- This menu includes the interface where the user currently is -->\\r\\n<div ng-if=\"resource._ifcs_.length > 1\" style=\"position:relative; display: inline-block;\">\\r\\n    <button type=\"button\" class=\"btn btn-xs dropdown-toggle\" data-toggle=\"dropdown\">\\r\\n        <span class=\"glyphicon glyphicon-menu-hamburger\"></span>\\r\\n    </button>\\r\\n    <ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">\\r\\n        <li ng-repeat=\"ifc in resource._ifcs_\">\\r\\n            <a ng-href=\"#/{{ifc.id}}/{{resource._id_}}\" target=\"{{target}}\">{{ifc.label}}</a>\\r\\n        </li>\\r\\n    </ul>\\r\\n</div>');}]);",null]}