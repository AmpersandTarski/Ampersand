angular.module("AmpersandApp",["ngResource","ngRoute","ngSanitize","restangular","ui.bootstrap","uiSwitch","cgBusy","siTable","ng-code-mirror","ngStorage","angularFileUpload","ui.bootstrap.datetimepicker","hc.marked"]).config(["$routeProvider",function(e){e.when("/",{controller:"",templateUrl:"app/components/shared/home.html",interfaceLabel:"Home"}).when("/admin/installer",{controller:"InstallerController",templateUrl:"app/components/admin/installer.html",interfaceLabel:"Installer"}).when("/404",{templateUrl:"app/components/shared/404.html",interfaceLabel:"404"}).otherwise({redirectTo:"/404"})}]).config(["RestangularProvider",function(e){e.setBaseUrl("api/v1"),e.setDefaultHeaders({"Content-Type":"application/json"})}]).run(["Restangular","$rootScope","$location","$route","NotificationService","RoleService","NavigationBarService",function(e,t,n,o,r,a,i){e.addFullRequestInterceptor(function(e,t,n,o,r,a){return a}),e.addResponseInterceptor(function(e,t,o,r,a,s){return"get"!=t&&"getList"!=t&&e.sessionRefreshAdvice&&i.refreshNavBar(),null!=e.navTo&&n.url(e.navTo),e}),e.setErrorInterceptor(function(e,t,o){var i,s;return 401==e.status&&(a.deactivateAllRoles(),n.path("")),"object"==typeof e.data?(404==e.data.error?r.addInfo(e.data.msg||"Resource not found"):(i=e.data.msg||e.statusText,r.addError(i,e.status,!0,e.data.html)),void 0!==e.data.notifications&&r.updateNotifications(e.data.notifications)):(i=e.status+" "+e.statusText,s=e.data,r.addError(i,e.status,!0,s)),!0}),t.getCurrentDateTime=function(){return new Date};var s=n.url;n.url=function(e,r){if(!1===r)var a=o.current,i=t.$on("$locationChangeSuccess",function(){o.current=a,i()});return s.apply(n,[e])}}]).value("cgBusyDefaults",{message:"Loading...",backdrop:!0,minDuration:500}).directive("myShowonhoverBox",function(){return{link:function(e,t,n){t.closest(".box").hasClass("my-showonhover-box-show")||t.hide(),t.closest(".box").bind("mouseenter",function(){t.closest(".box").addClass("my-showonhover-box-show"),t.show()}),t.closest(".box").bind("mouseleave",function(){t.closest(".box").removeClass("my-showonhover-box-show"),t.hide()})}}}).directive("myBluronenter",function(){return function(e,t,n){t.bind("keydown keypress",function(e){13===e.which&&(e.target.blur(),e.preventDefault())})}}).filter("toArray",function(){return function(e,t){return e?Array.isArray(e)?e:!1===t?Object.keys(e).map(function(t){return e[t]}):Object.keys(e).map(function(t){return Object.defineProperty(e[t],"$key",{enumerable:!1,value:t})}):e}}).directive("myNavToInterfaces",function(){return{restrict:"E",scope:{resource:"=",target:"@"},templateUrl:"app/components/shared/partials/myNavToInterfaces.html",transclude:!0}}).directive("myNavToOtherInterfaces",function(){return{restrict:"E",scope:{resource:"=",target:"@"},templateUrl:"app/components/shared/partials/myNavToOtherInterfaces.html"}}).filter("unsafe",["$sce",function(e){return e.trustAsHtml}]),angular.module("AmpersandApp").controller("ExecEngineController",["$scope","Restangular","NotificationService",function(e,t,n){e.run=function(){t.one("admin/execengine/run").get().then(function(e){e=e.plain(),n.updateNotifications(e)})}}]),angular.module("AmpersandApp").controller("InstallerController",["$scope","Restangular","NotificationService","RoleService",function(e,t,n,o){e.installing=!1,e.installed=!1,e.install=function(r){e.installing=!0,e.installed=!1,t.one("admin/installer").get({defaultPop:r}).then(function(t){t=t.plain(),n.updateNotifications(t),o.deactivateAllRoles(),e.installing=!1,e.installed=!0},function(){e.installing=!1,e.installed=!1})}}]);var app=angular.module("AmpersandApp");app.requires[app.requires.length]="angularFileUpload",app.config(["$routeProvider",function(e){e.when("/ext/importer",{controller:"PopulationImportController",templateUrl:"app/components/importer/importer.html",interfaceLabel:"Population importer"})}]).service("ImportService",["FileUploader","NotificationService",function(e,t){let n=new e({url:"api/v1/admin/import"});return n.onSuccessItem=function(e,n,o,r){t.updateNotifications(n.notifications)},n.onErrorItem=function(e,n,o,r){let a,i;"object"==typeof n?(a=n.msg||"Error while importing",t.addError(a,o,!0),void 0!==n.notifications&&t.updateNotifications(n.notifications)):(a=o+" Error while importing",i=n,t.addError(a,o,!0,i))},{uploader:n}}]).controller("PopulationImportController",["$scope","ImportService",function(e,t){e.uploader=t.uploader}]),angular.module("AmpersandApp").controller("AtomicController",["$scope","ResourceService",function(e,t){e.selected={},e.saveItem=t.saveItem,e.addItem=t.addItem,e.removeItem=t.removeItem,e.remove=t.removeResource,e.delete=t.deleteResource}]),angular.module("AmpersandApp").controller("AtomicDateController",["$scope","ResourceService",function(e,t){function n(e){var t=String(e);return 1===t.length&&(t="0"+t),t}function o(e){null!==e&&(e.toJSON=function(){return this.getUTCFullYear()+"-"+n(this.getMonth()+1)+"-"+n(this.getDate())})}e.isOpen=!1,e.openDatepicker=function(t){t.preventDefault(),t.stopPropagation(),e.isOpen=!0},e.selected={value:""},e.saveDateItem=function(e,n,r){o(e[n]),t.saveItem(e,n,r)},e.addDateItem=function(e,n,r,a){""!==r.value?(o(r.value),t.addItem(e,n,r,a)):console.log("Empty date selected")}}]),angular.module("AmpersandApp").controller("AtomicTypeAheadController",["$scope","Restangular","ResourceService",function(e,t,n){e.selected={},e.hasNoResults=!1,e.getTypeahead=function(n,o){o=void 0!==o&&o,(void 0===e.typeahead[n]||o)&&(e.typeahead[n]=t.all("resource/"+n).getList().$object)},e.typeaheadOnSelect=function(t,o,r,a,i,s){void 0===t._id_?console.log("Resource id undefined"):""===t._id_?console.log("Empty resource id provided"):(Array.isArray(a[i])?(a[i].push(angular.copy(t)),patch=n.createPatch("add",a,s,i,t._id_),n.addPatches(s,[patch])):null===a[i]?(a[i]=angular.copy(t),patch=n.createPatch("replace",a,s,i,t._id_),n.addPatches(s,[patch])):console.log("Error: Property already set and/or not defined"),e.hasNoResults=!1),e.selected.value=""},e.typeAheadCreate=function(t,o,r,a,i){Array.isArray(t[o])?n.addItem(t,o,r,a).then(function(){e.getTypeahead(i,!0)}):null===t[o]?(t[o]=r.value,n.saveItem(t,o,a)):console.log("Error: Property already set and/or not defined")}}]),angular.module("AmpersandApp").controller("AtomicUploadFileController",["$scope","FileUploader","NotificationService",function(e,t,n){e.FileUploader=new t({alias:"file",formData:[],removeAfterUpload:!0,autoUpload:!0}),e.FileUploader.onSuccessItem=function(e,t,o,r){n.updateNotifications(t.notifications),e.resource[e.ifc].push(t.content)},e.FileUploader.onErrorItem=function(e,t,o,r){n.addError(t.error.message,t.error.code,!0)}}]),angular.module("AmpersandApp").controller("BoxController",["$scope","ResourceService",function(e,t){e.createResource=t.createResource,e.save=t.saveResource,e.cancel=t.cancelResource,e.remove=t.removeResource,e.delete=t.deleteResource}]),angular.module("AmpersandApp").controller("InterfaceController",["$scope","$location","ResourceService",function(e,t,n){e.typeahead={},e.$on("$locationChangeStart",function(e,t,o){n.checkRequired()&&(confirmed=confirm("You have unsaved edits. Do you wish to leave?"),e&&!confirmed?e.preventDefault():e&&confirmed?n.emptyUpdatedResources():console.log("Someting went wrong. Cannot determine action after locationChangeStart"))}),e.newResource=function(){t.url("/"+ifcName+"?new")},e.pendingPromises=n.pendingPromises}]),angular.module("AmpersandApp").service("ResourceService",["$localStorage","$timeout","$location","Restangular","NotificationService",function(e,t,n,o,r){let a=[],i={getResource:function(e,t,n){return promise=o.one(e._path_+"/"+t).get().then(function(n){try{n=n.plain()}catch(e){}return $.isEmptyObject(n)?r.addInfo("No results found"):null===e[t]||Array.isArray(e[t])?e[t]=n:angular.extend(e[t],n),i.initResourceMetaData(e),e}),Array.isArray(n._loading_)||(n._loading_=[]),n._loading_.push(promise),promise},saveResource:function(e){return promise=o.one(e._path_).patch(e._patchesCache_,{}).then(function(t){return t=t.plain(),e._isRoot_?e.get():e=angular.extend(e,t.content),i.processResponse(e,t),e}),Array.isArray(e._loading_)||(e._loading_=[]),e._loading_.push(promise),promise},cancelResource:function(e){return promise=o.one(e._path_).get().then(function(t){return t=t.plain(),$.isEmptyObject(t)?r.addInfo("No results found"):angular.extend(e,t),r.getNotifications(),i.initResourceMetaData(e),e}),Array.isArray(e._loading_)||(e._loading_=[]),e._loading_.push(promise),promise},createResource:function(e,t,r,a){return"undefined"===a&&(a=!1),promise=o.one(e._path_).all(t).post({},{}).then(function(o){return o=o.plain(),i.processResponse(r,o),newResource=o.content,Array.isArray(e[t])?a?e[t].unshift(newResource):e[t].push(newResource):e[t]=newResource,e._isRoot_&&"_NEW"==e._id_&&n.url("/"+t+"/"+newResource._id_,!1),newResource}),Array.isArray(r._loading_)||(r._loading_=[]),r._loading_.push(promise),promise},removeResource:function(e,t,n,o){return Array.isArray(e[t])?e[t].splice(e[t].indexOf(n),1):e[t]=null,patch=i.createPatch("remove",n,o),i.addPatches(o,[patch])},deleteResource:function(e,t,n){if(confirm("Are you sure?"))return promise=o.one(n._path_).remove({}).then(function(o){return o=o.plain(),r.updateNotifications(o.notifications),Array.isArray(e[t])?e[t].splice(e[t].indexOf(n),1):e[t]=null,e}),Array.isArray(n._loading_)||(n._loading_=[]),n._loading_.push(promise),promise},saveItem:function(e,t,n){return void 0===e[t]||""===e[t]?value=null:value=e[t],patch=i.createPatch("replace",e,n,t,value),i.addPatches(n,[patch])},addItem:function(e,t,n,o){return void 0===n.value?$q.reject("Value undefined"):""===n.value?$q.reject("Empty value selected"):Array.isArray(e[t])?(e[t].push(n.value),patch=i.createPatch("add",e,o,t,n.value),i.addPatches(o,[patch]).then(function(e){return delete n.value,e})):$q.reject("Error: trying to add item to non-array")},removeItem:function(e,t,n,o){return value=e[t][n],patch=i.createPatch("remove",e,o,t,value),e[t].splice(n,1),i.addPatches(o,[patch])},createPatch:function(e,t,n,o,r){return void 0===n&&(n=t),pathLength=n._path_.length,path=t._path_.substring(pathLength),void 0!==o&&(path=path+"/"+o),void 0===r?{op:e,path:path}:{op:e,path:path,value:r}},addPatches:function(t,n){return Array.isArray(t._patchesCache_)||(t._patchesCache_=[]),t._patchesCache_=t._patchesCache_.concat(n),-1===a.indexOf(t)&&a.push(t),e.switchAutoSave?i.saveResource(t):(i.setResourceStatus(t,"warning"),t._showButtons_={save:!0,cancel:!0},$q.resolve(t))},checkRequired:function(){a.reduce(function(e,t,n,o){return e||t._patchesCache_.length},!1)},emptyUpdatedResources:function(){a=[]},initResourceMetaData:function(e){e._showButtons_={save:!1,cancel:!1},e._patchesCache_=[],i.setResourceStatus(e,"default")},processResponse:function(e,n){return r.updateNotifications(n.notifications),n.invariantRulesHold?(e._showButtons_={save:!1,cancel:!1},e._patchesCache_=[],i.setResourceStatus(e,"success"),t(function(){i.setResourceStatus(e,"default")},3e3)):(e._showButtons_={save:!1,cancel:!0},i.setResourceStatus(e,"danger")),e},setResourceStatus:function(e,t){return e._status_={warning:!1,danger:!1,default:!1,success:!1},e._status_[t]=!0,e},pendingPromises:function(e){return!!Array.isArray(e._loading_)&&e._loading_.some(function(e){return 0===e.$$state.status})}};return i}]),angular.module("AmpersandApp").controller("NavigationBarController",["$scope","$route","Restangular","$localStorage","$sessionStorage","$timeout","$location","NotificationService","RoleService","NavigationBarService",function(e,t,n,o,r,a,i,s,c,u){e.$storage=o,e.$sessionStorage=r,e.defaultSettings=u.defaultSettings,e.loadingNavBar=[],e.navbar=u.navbar,e.reload=function(){e.loadingNavBar=[],e.loadingNavBar.push(u.refreshNavBar()),t.reload()},e.checkAllRules=s.checkAllRules,e.createNewResource=function(e,t){n.one("resource").all(e).post({},{}).then(function(e){i.url(t+"/"+e._id_)})},e.resetSettings=function(){angular.forEach(e.$storage.notificationPrefs,function(e,t,n){n[t]=!1}),e.$storage.switchAutoSave=!1,a(function(){e.resetNotificationSettings(),e.resetSwitchAutoSave()},500)},e.resetNotificationSettings=function(){e.$storage.notificationPrefs=angular.extend(e.$storage.notificationPrefs,e.defaultSettings.notifications)},e.resetSwitchAutoSave=function(){e.$storage.switchAutoSave=e.defaultSettings.switchAutoSave},e.loadingNavBar.push(u.refreshNavBar())}]).directive("myNavbarResize",["$window","$timeout","NavigationBarService",function(e,t,n){return function(n,o){var r=angular.element(e),a=function(){t(function(){for(;$("#navbar-interfaces").width()<$("#navbar-wrapper").width()-$("#navbar-options").width()&&$("#navbar-interfaces-dropdown-menu").children().length>0;)$("#navbar-interfaces-dropdown-menu").children().first().appendTo("#navbar-interfaces");for(;$("#navbar-interfaces").width()>$("#navbar-wrapper").width()-$("#navbar-options").width();)$("#navbar-interfaces").children().last().prependTo("#navbar-interfaces-dropdown-menu"),$("#navbar-interfaces-dropdown").toggleClass("hidden",$("#navbar-interfaces-dropdown-menu").children().length<=0);$("#navbar-interfaces-dropdown").toggleClass("hidden",$("#navbar-interfaces-dropdown-menu").children().length<=0)})};n.$watch("NavigationBarService.navbar",function(){a()}),r.bind("resize",function(){a()}),a()}}]),angular.module("AmpersandApp").service("NavigationBarService",["Restangular","$localStorage","$sessionStorage","NotificationService",function(e,t,n,o){let r={},a={};return{navbar:r,defaultSettings:a,refreshNavBar:function(){return e.one("app/navbar").get().then(function(e){e=e.plain(),angular.extend(r,e),n.session=e.session,n.sessionRoles=e.sessionRoles,n.sessionVars=e.sessionVars,angular.extend(a,e.defaultSettings),void 0===t.notificationPrefs&&$scope.resetNotificationSettings(),void 0===t.switchAutoSave&&$scope.resetSwitchAutoSave(),o.updateNotifications(e.notifications)},function(e){})}}}]),angular.module("AmpersandApp").service("RoleService",["$sessionStorage","Restangular",function(e,t){return RoleService={selectRole:function(e){RoleService.toggleRole(e,!0)},selectRoleByLabel:function(t){angular.forEach(e.sessionRoles,function(e){if(e.label==t)return RoleService.selectRole(e.id)})},toggleRole:function(t,n){angular.forEach(e.sessionRoles,function(e){e.id==t&&(e.active=void 0===n?!e.active:n)})},getActiveRoleIds:function(){var t=[];return angular.forEach(e.sessionRoles,function(e){!0===e.active&&t.push(e.id)}),t},deactivateAllRoles:function(){angular.forEach(e.sessionRoles,function(e){e.active=!1})},setActiveRoles:function(){return t.all("app/roles").patch(e.sessionRoles)}},RoleService}]),angular.module("AmpersandApp").controller("RoleMenuController",["$scope","RoleService","NavigationBarService",function(e,t,n){e.toggleRole=function(e,o){t.toggleRole(e,o),n.promises.push(t.setActiveRoles().then(function(e){n.refreshNavBar()}))}}]),angular.module("AmpersandApp").service("NotificationService",["$localStorage","$sessionStorage","$timeout","Restangular",function(e,t,n,o){let r={signals:[],invariants:[],infos:[],successes:[],warnings:[],errors:[]},a={notifications:r,getNotifications:function(){return o.one("app/notifications").get().then(function(e){e=e.plain(),a.updateNotifications(e)},function(){a.addError("Something went wrong while getting notifications")})},checkAllRules:function(){return o.one("admin/ruleengine/evaluate/all").get().then(function(e){e=e.plain(),a.addSuccess("Evaluated all rules."),a.updateNotifications(e)},function(){a.addError("Something went wrong while evaluating all rules")})},updateNotifications:function(t){void 0!==t&&(r.signals=t.signals,r.invariants=t.invariants,r.infos=r.infos.concat(t.infos),r.successes=r.successes.concat(t.successes),r.warnings=r.warnings.concat(t.warnings),r.errors=r.errors.concat(t.errors),e.notificationPrefs.switchAutoHideSuccesses&&n(function(){r.successes=[]},3e3))},addSuccess:function(e){r.successes.push({message:e,count:1})},addError:function(e,t,n,o){t=void 0!==typeof t?t:null,n=void 0!==typeof n&&n,o=void 0!==typeof o&&o;let a=!1,i=r.errors;for(let r=0;r<i.length;r++)i[r].message==e&&(i[r].count+=1,i[r].code=t,i[r].persistent=n,i[r].details=o,a=!0);a||r.errors.push({message:e,code:t,count:1,persistent:n,details:o})},addWarning:function(e){let t=!1,n=r.warnings;for(var o=0;o<n.length;o++)n[o].message==e&&(n[o].count+=1,t=!0);t||r.warnings.push({message:e,count:1})},addInfo:function(e){let t=!1,n=r.infos;for(var o=0;o<n.length;o++)n[o].message==e&&(n[o].count+=1,t=!0);t||r.infos.push({message:e,count:1})}};return a}]),angular.module("AmpersandApp").controller("NotificationCenterController",["$scope","$route","Restangular","$localStorage","NotificationService",function(e,t,n,o,r){e.localStorage=o,e.notifications=r.notifications,e.$on("$routeChangeSuccess",function(){e.notifications.successes=[],e.notifications.errors=e.notifications.errors.filter(function(e){return!!e.persistent&&(e.persistent=!1,!0)}),e.notifications.warnings=[],e.notifications.infos=[],e.notifications.invariants=[]}),e.closeAlert=function(e,t){e.splice(t,1)}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
