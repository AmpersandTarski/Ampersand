angular.module("AmpersandApp",["ngResource","ngRoute","ngSanitize","restangular","ui.bootstrap","uiSwitch","cgBusy","siTable","ng-code-mirror","ngStorage","angularFileUpload","ui.bootstrap.datetimepicker","hc.marked"]).config(["$routeProvider",function(e){e.when("/",{controller:"",templateUrl:"app/src/shared/home.html",interfaceLabel:"Home"}).when("/admin/installer",{controller:"InstallerController",templateUrl:"app/src/admin/installer.html",interfaceLabel:"Installer"}).when("/404",{templateUrl:"app/src/shared/404.html",interfaceLabel:"404"}).otherwise({redirectTo:"/404"})}]).config(["RestangularProvider",function(e){e.setBaseUrl("api/v1"),e.setDefaultHeaders({"Content-Type":"application/json"})}]).run(["Restangular","$rootScope","$location","$route","NotificationService","RoleService","NavigationBarService",function(e,t,r,n,a,o,s){e.addFullRequestInterceptor(function(e,t,r,n,a,o){return o}),e.addResponseInterceptor(function(e,t,n,a,o,i){return"get"!=t&&"getList"!=t&&e.sessionRefreshAdvice&&s.refreshNavBar(),null!=e.navTo&&r.url(e.navTo),e}),e.setErrorInterceptor(function(e,t,n){var s,i;return 401==e.status&&(o.deactivateAllRoles(),r.path("")),"object"==typeof e.data?(404==e.data.error?a.addInfo(e.data.msg||"Resource not found"):(s=e.data.msg||e.statusText,a.addError(s,e.status,!0,e.data.html)),void 0!==e.data.notifications&&a.updateNotifications(e.data.notifications)):(s=e.status+" "+e.statusText,i=e.data,a.addError(s,e.status,!0,i)),!0}),t.getCurrentDateTime=function(){return new Date};var i=r.url;r.url=function(e,a){if(!1===a)var o=n.current,s=t.$on("$locationChangeSuccess",function(){n.current=o,s()});return i.apply(r,[e])}}]).value("cgBusyDefaults",{message:"Loading...",backdrop:!0,minDuration:500}).directive("myShowonhoverBox",function(){return{link:function(e,t,r){t.closest(".box").hasClass("my-showonhover-box-show")||t.hide(),t.closest(".box").bind("mouseenter",function(){t.closest(".box").addClass("my-showonhover-box-show"),t.show()}),t.closest(".box").bind("mouseleave",function(){t.closest(".box").removeClass("my-showonhover-box-show"),t.hide()})}}}).directive("myBluronenter",function(){return function(e,t,r){t.bind("keydown keypress",function(e){13===e.which&&(e.target.blur(),e.preventDefault())})}}).filter("toArray",function(){return function(e,t){return e?Array.isArray(e)?e:!1===t?Object.keys(e).map(function(t){return e[t]}):Object.keys(e).map(function(t){return Object.defineProperty(e[t],"$key",{enumerable:!1,value:t})}):e}}).directive("myNavToInterfaces",function(){return{restrict:"E",scope:{resource:"=",target:"@"},templateUrl:"app/src/shared/partials/myNavToInterfaces.html",transclude:!0}}).directive("myNavToOtherInterfaces",function(){return{restrict:"E",scope:{resource:"=",target:"@"},templateUrl:"app/src/shared/partials/myNavToOtherInterfaces.html"}}).filter("unsafe",["$sce",function(e){return e.trustAsHtml}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
