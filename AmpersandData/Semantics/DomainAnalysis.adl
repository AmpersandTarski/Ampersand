CONTEXT FormalAmpersand IN ENGLISH LATEX
-- The comments for this script can be found in DomainAnalysis.docadl
INCLUDE "Atoms.adl"

REPRESENT Representation TYPE ALPHANUMERIC
REPRESENT Identifier TYPE ALPHANUMERIC

PATTERN Terms
    CONCEPT Operator ""
    CONCEPT BinaryTerm ""
    CLASSIFY BinaryTerm ISA Term
    RELATION first[BinaryTerm*Term] [UNI]
    RELATION second[BinaryTerm*Term] [UNI]
    RELATION operator[BinaryTerm*Operator] [UNI]

    CONCEPT UnaryTerm ""
    CLASSIFY UnaryTerm ISA Term
    RELATION arg[UnaryTerm*Term] [UNI]
ENDPATTERN

PATTERN DefiningTypeTerms LABEL "Defining type terms"
    RELATION dom[Term*TypeTerm] [UNI]                         -- TOT is maintained in RULE "dom is total"
    RELATION cod[Term*TypeTerm] [UNI]                         -- TOT is maintained in RULE "cod is total"
    RELATION popset[Concept*TypeTerm] [UNI]                   -- TOT is maintained in RULE "popset is total"

    RULE "dom is total" :                                    
      I[Term] |- dom;dom~
      VIOLATION (TXT "{EX}_; InsPair_;dom_;Term_;", SRC I, TXT "_;TypeTerm_;dom(", SRC I, TXT ")")
      ROLE ExecEngine MAINTAINS "dom is total"
    RULE "cod is total" :                                     
      I[Term] |- cod;cod~
      VIOLATION (TXT "{EX}_; InsPair_;cod_;Term_;", SRC I, TXT "_;TypeTerm_;cod(", SRC I, TXT ")")
      ROLE ExecEngine MAINTAINS "cod is total"
    RULE "popset is total" : 
      I[Concept] |- popset;popset~
      VIOLATION (TXT "{EX}_; InsPair_;popset_;Concept_;", SRC I, TXT "_;TypeTerm_;popset(", SRC I, TXT ")")
      ROLE ExecEngine MAINTAINS "popset is total"
ENDPATTERN

PATTERN DefineOrderTypeTerms LABEL "Define order on type-terms"
    RELATION sub[TypeTerm*TypeTerm]
    MEANING "s sub g  means that each element of concept  s  is defined to be an element of concept  g  as well."
    RELATION subStar[TypeTerm*TypeTerm] -- Transitive, reflexive closure of sub, aka sub*
    MEANING "s subStar g  means that each element of type-term  s  is (defined or inferred to be) an element of type-term  g."
    RELATION subPlus[TypeTerm*TypeTerm] -- Transitive closure of sub, aka sub+
    MEANING "s subStar g  means that each element of type-term  s  is (defined or inferred to be) an element of type-term  g."

    RELATION subCopy[TypeTerm*TypeTerm] -- necessary only for calling the Transitive closure function.
    RULE "Compute transitive closure of sub" : sub = subCopy
    VIOLATION (TXT "{EX} TransitiveClosure;sub;TypeTerm;subCopy;subPlus")
    ROLE ExecEngine MAINTAINS "Compute transitive closure of sub"

    ROLE ExecEngine MAINTAINS "Compute transitive closure of sub by Ins", "Compute transitive closure of sub by Del"
    RULE "Compute transitive closure of sub by Ins" : subPlus\/I |- subStar
    VIOLATION (TXT "{EX}_; InsPair_;subStar_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
    RULE "Compute transitive closure of sub by Del" : subStar |- subPlus\/I
    VIOLATION (TXT "{EX}_; DelPair_;subStar_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPATTERN

PATTERN DomainAnalysisRules LABEL "Domain Analysis for Rules -- This includes both equalities (e.g. r = s) and inequalities (e.g. r |- s)"
    CONCEPT Rule ""
    RELATION formalTerm[Rule*Term] [UNI]
    VIEW Relation : Relation(name, TXT "[", source;name, TXT "*", target;name, TXT "]")

    CLASSIFY Equivalence ISA BinaryTerm
    VIEW Equivalence : Equivalence(TXT "RULE ", first, TXT " = ", second)

    CLASSIFY Inclusion ISA BinaryTerm
    VIEW Inclusion : Inclusion(TXT "RULE ", first, TXT " |- ", second)

    CLASSIFY Truth ISA Term
    VIEW Truth : Truth(TXT "RULE ", I[Term])

    ROLE ExecEngine MAINTAINS domainDomRule
    RULE domainDomRule : dom~;first~;(I[Equivalence]\/I[Inclusion]);second;dom \/ dom~;second~;(I[Equivalence]\/I[Inclusion]);first;dom |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)

    ROLE ExecEngine MAINTAINS domainCodRule
    RULE domainCodRule : cod~;first~;(I[Equivalence]\/I[Inclusion]);second;cod \/ cod~;second~;(I[Equivalence]\/I[Inclusion]);first;cod |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPATTERN

PATTERN DomainAnalysisRelations LABEL "Domain Analysis for Relations -- This includes Vee-terms (e.g. V[A*B]) and I-terms (e.g. I[A])"
    --RELATION repr[Term*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    VIEW Relation : Relation(name, TXT "[", source;name, TXT "*", target;name, TXT "]")
    CLASSIFY Relation ISA Term

    {-Example: for relation r[A*B] we get  dom(r) |- popset(A)   and   cod(r) |- popset(B) -}
    RULE subRelation : dom~;source;popset \/ cod~;target;popset |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subRelation
    {- FYI: Haskell equivalent
       case rel of PNamedRel _ _ (Just s) -> dom x.<.thing src .+. cod x.<.thing trg where Sign src trg = pSign2aSign s
    -}
ENDPATTERN

PATTERN DomainAnalysisIntersections LABEL "Domain Analysis for Intersections"
    VIEW Intersection : Intersection(TXT "(", first, TXT "/\\", second, TXT ")")
    CLASSIFY Intersection ISA BinaryTerm

    RULE subIntersection :
      dom~;I[Intersection];first[BinaryTerm*Term];dom \/ dom~;I[Intersection];second[BinaryTerm*Term];dom \/
      cod~;I[Intersection];first[BinaryTerm*Term];cod \/ cod~;I[Intersection];second[BinaryTerm*Term];cod |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subIntersection
    {- FYI: Haskell equivalent
    = case term of (PIsc _ a b)  -> dom x.<.dom a .+. dom x.<.dom b .+. cod x.<.cod a .+. cod x.<.cod b
                                    .+. mSpecific Src a Src b Src x .+. mSpecific Tgt a Tgt b Tgt x
    -}
ENDPATTERN

PATTERN DomainAnalysisUnions LABEL "Domain Analysis for Unions"
    VIEW Union : Union(TXT "(", first, TXT "\\/", second, TXT ")")
    CLASSIFY Union ISA BinaryTerm

    RULE subUnion :
      dom~;first[BinaryTerm*Term]~;I[Union];dom \/ dom~;second[BinaryTerm*Term]~;I[Union];dom \/
      cod~;first[BinaryTerm*Term]~;I[Union];cod \/ cod~;second[BinaryTerm*Term]~;I[Union];cod |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subUnion
    {- FYI: Haskell equivalent
    = case term of (PUni _ a b)  -> dom a.<.dom x .+. dom b.<.dom x .+. cod a.<.cod x .+. cod b.<.cod x
                                    .+. mGeneric Src a Src b Src x .+. mGeneric Tgt a Tgt b Tgt x
    -}
ENDPATTERN

PATTERN DomainAnalysisMinuses LABEL "Domain Analysis for Minuses"
    VIEW Minus : Minus(TXT "(", first, TXT "-", second, TXT ")")
    CLASSIFY Minus ISA BinaryTerm

    RULE subMinus :
      dom~;I[Minus];first[BinaryTerm*Term] ;dom \/
      cod~;I[Minus];second[BinaryTerm*Term];cod |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subMinus
    {- FYI: Haskell equivalent
    = case term of (PDif o a b) -> dom x.<.dom a .+. cod x.<.cod a
                                   .+. mGeneric Src x Src b Src (PUni o a b) .+. mGeneric Tgt x Tgt b Tgt (PUni o a b)
    -}
ENDPATTERN

PATTERN DomainAnalysisCompositions LABEL "Domain Analysis for Compositions"
    VIEW Composition : Composition(TXT "(", first, TXT ";", second, TXT ")")
    CLASSIFY Composition ISA BinaryTerm
    RELATION inter[Composition*TypeTerm]

    ROLE ExecEngine MAINTAINS compositionNewTypeTerm
    RULE compositionNewTypeTerm : I[Composition] {-/\ first;cod;(subStar;subStar~);dom~;second~-} |- inter;inter~
    VIOLATION ( TXT "{EX}_; InsPair_;inter_;Composition_;", SRC I, TXT "_;TypeTerm_;inter(", SRC I, TXT ")" )

    RULE subComposition :
      dom~;I[Composition];first[BinaryTerm*Term];dom  \/
      cod~;I[Composition];second[BinaryTerm*Term];cod \/
      inter[Composition*TypeTerm]~;first;cod \/ inter[Composition*TypeTerm]~;second;dom |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subComposition
    {- FYI: Haskell equivalent
    = case term of (PCps _ a b) -> dom x.<.dom a .+. cod x.<.cod b .+. mSpecific' Tgt a Src b x
    -}
ENDPATTERN

PATTERN DomainAnalysisConverses LABEL "Domain Analysis for Converses"
    VIEW Converse : Converse(arg, TXT "~")
    CLASSIFY Converse ISA UnaryTerm

    RULE subConverse :
      dom~;I[Converse];arg ;cod \/ cod~;I[Converse];arg; dom \/
      dom~;arg~;I[Converse];cod \/ cod~;arg~;I[Converse];dom |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subConverse
    {- FYI: Haskell equivalent
    = (PFlp _ e)   -> cod e.=.dom x .+. dom e.=.cod x
    -}
ENDPATTERN

PATTERN DomainAnalysisCartesian product LABEL "Domain Analysis for Cartesian product"
    VIEW CartesianProduct : CartesianProduct(TXT "(", first, TXT "#", second, TXT ")")
    CLASSIFY CartesianProduct ISA BinaryTerm

    RULE subCartProd :
      dom~;I[CartesianProduct];first ;dom \/ cod~;I[CartesianProduct];second ;cod \/
      dom~;first~;I[CartesianProduct];dom \/ cod~;second~;I[CartesianProduct];cod |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subCartProd
    {- FYI: Haskell equivalent
    = case term of  (PPrd _ a b) -> dom x.=.dom a .+. cod x.=.cod b
    -}
ENDPATTERN

PATTERN DomainAnalysisKleeneClosures LABEL "Domain Analysis for Kleene closures"
    VIEW KleeneStar : KleeneStar(arg, TXT "*")
    VIEW KleenePlus : KleenePlus(arg, TXT "+")
    CLASSIFY KleeneStar ISA UnaryTerm
    CLASSIFY KleenePlus ISA UnaryTerm

    RULE subKleeneClosures :
      dom~;arg~;(I[KleeneStar]\/I[KleenePlus]);dom \/ cod~;arg~;(I[KleeneStar]\/I[KleenePlus]);cod |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subKleeneClosures
    {- FYI: Haskell equivalent
    = case term of  (PKl0 _ e) -> dom e.<.dom x .+. cod e.<.cod x
                    (PKl1 _ e) -> dom e.<.dom x .+. cod e.<.cod x
    -}
ENDPATTERN

PATTERN DomainAnalysisUnaryComplement LABEL "Domain Analysis for Unary complement"
    CLASSIFY UnaryMinus ISA UnaryTerm
    CLASSIFY UnaryMinus ISA Minus

    {- FYI: Haskell equivalent
    = case term of  (PCpl o a) -> let e = PDif o (PVee o) a
                                  in dom x.=.dom e .+. cod x.=.cod e
    -}
ENDPATTERN

PATTERN DomainAnalysisRelationalAddition LABEL "Domain Analysis for Relational Addition"
    VIEW RelationalAddition : RelationalAddition(TXT "(", first, TXT "!", second, TXT ")")
    CLASSIFY RelationalAddition ISA BinaryTerm
    RELATION inter[RelationalAddition*TypeTerm]

    ROLE ExecEngine MAINTAINS relAddNewTypeTerm
    RULE relAddNewTypeTerm : I[RelationalAddition] |- inter;inter~
    VIOLATION ( TXT "{EX}_; InsPair_;inter_;RelationalAddition_;", SRC I, TXT "_;TypeTerm_;inter(", SRC I, TXT ")"
              , TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC  first;cod   , TXT "_;TypeTerm_;inter(", SRC I, TXT ")"
              , TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC second;dom   , TXT "_;TypeTerm_;inter(", SRC I, TXT ")"
              )

    RULE subRelationalAddition :
      dom~;I[RelationalAddition];first[BinaryTerm*Term];dom  \/
      cod~;I[RelationalAddition];second[BinaryTerm*Term];cod \/
      cod~;first~;inter[RelationalAddition*TypeTerm] \/ dom~;second~;inter[RelationalAddition*TypeTerm] |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subRelationalAddition
    {- FYI: Haskell equivalent
    = case term of (PRad _ a b) -> dom x .<. dom a .+. cod x .<. cod b .+. mGeneric' Tgt a Src b x
    -}
ENDPATTERN

PATTERN DomainAnalysisLeftResidual LABEL "Domain Analysis for Left residual"
    VIEW LeftResidual : LeftResidual(TXT "(", first, TXT "/", second, TXT ")")
    CLASSIFY LeftResidual ISA BinaryTerm
    RELATION lResidualSource[LeftResidual*TypeTerm]
    RELATION lResidualTarget[LeftResidual*TypeTerm]

    ROLE ExecEngine MAINTAINS leftResSrcTerm
    RULE leftResSrcTerm : I[LeftResidual] |- lResidualSource;lResidualSource~
    VIOLATION ( TXT "{EX}_; InsPair_;lResidualSource_;LeftResidual_;", SRC I, TXT "_;TypeTerm_;lResSrc(", SRC I, TXT ")" )

    ROLE ExecEngine MAINTAINS leftResTgtTerm
    RULE leftResTgtTerm : I[LeftResidual] |- lResidualTarget;lResidualTarget~
    VIOLATION ( TXT "{EX}_; InsPair_;lResidualTarget_;LeftResidual_;", SRC I, TXT "_;TypeTerm_;lResTgT(", SRC I, TXT ")" )

    RULE subLeftResidual :
      dom~;I[LeftResidual];lResidualSource \/
      dom~;first~;I[LeftResidual];lResidualSource \/
      cod~;I[LeftResidual];lResidualTarget \/
      dom~;second~;I[LeftResidual];lResidualTarget |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subLeftResidual

    {- FYI: Haskell equivalent
    = case term of  (PRrs o a b) -> let e = complement (PCps o (p_flp a) (complement b))
                                    in dom x.=.dom e .+. cod x.=.cod e
    = case term of  (PRrs o a b) -> mGeneric' Src a Src x x .+. mGeneric' Src b Tgt x x
    -}
ENDPATTERN

PATTERN DomainAnalysisRightResidual LABEL "Domain Analysis for Right residual"
    VIEW RightResidual : RightResidual(TXT "(", first, TXT "\\", second, TXT ")")
    CLASSIFY RightResidual ISA BinaryTerm
    RELATION rResidualSource[RightResidual*TypeTerm] [UNI]
    RELATION rResidualTarget[RightResidual*TypeTerm] [UNI]

    ROLE ExecEngine MAINTAINS rightResSrcTerm
    RULE rightResSrcTerm : I[RightResidual] |- rResidualSource;rResidualSource~
    VIOLATION ( TXT "{EX}_; InsPair_;rResidualSource_;RightResidual_;", SRC I, TXT "_;TypeTerm_;rResSrc(", SRC I, TXT ")" )

    ROLE ExecEngine MAINTAINS rightResTgtTerm
    RULE rightResTgtTerm : I[RightResidual] |- rResidualTarget;rResidualTarget~
    VIOLATION ( TXT "{EX}_; InsPair_;rResidualTarget_;RightResidual_;", SRC I, TXT "_;TypeTerm_;rResTgT(", SRC I, TXT ")" )

    RULE subRightResidual :
      dom~;I[RightResidual];rResidualSource \/
      cod~;first~;I[RightResidual];rResidualSource \/
      cod~;I[RightResidual];rResidualTarget \/
      cod~;second~;I[RightResidual];rResidualTarget |- sub
      VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
      ROLE ExecEngine MAINTAINS subRightResidual

    {- FYI: Haskell equivalent
    = case term of  (PRrs o a b) -> let e = complement (PCps o (p_flp a) (complement b))
                                    in dom x.=.dom e .+. cod x.=.cod e
    = case term of  (PRrs o a b) -> mGeneric' Tgt a Src x x .+. mGeneric' TgT b Tgt x x
    -}
ENDPATTERN

PATTERN AllocateSignatures LABEL "Allocate signatures to terms"
    RELATION src[Term*Concept] -- Do not define this as [UNI]. That would inhibit exposing type errors.
    RELATION tgt[Term*Concept] -- Do not define this as [UNI]. That would inhibit exposing type errors.

    ROLE ExecEngine MAINTAINS signatureInsDom, signatureDelDom, signatureInsCod, signatureDelCod
    RULE signatureInsDom : dom;pretype |- src
    VIOLATION (TXT "{EX} InsPair;src;Term;", SRC I, TXT ";Concept;", TGT I)
    RULE signatureDelDom : src |- dom;pretype
    VIOLATION (TXT "{EX} DelPair;src;Term;", SRC I, TXT ";Concept;", TGT I)
    RULE signatureInsCod : cod;pretype |- tgt
    VIOLATION (TXT "{EX} InsPair;tgt;Term;", SRC I, TXT ";Concept;", TGT I)
    RULE signatureDelCod : tgt |- cod;pretype
    VIOLATION (TXT "{EX} DelPair;tgt;Term;", SRC I, TXT ";Concept;", TGT I)
ENDPATTERN

PATTERN AnalysingTerms LABEL "Analysing terms"
    RELATION pretype[TypeTerm*Concept]

    ROLE ExecEngine MAINTAINS "Insert into pretype"
    RULE "Insert into pretype" : subStar;popset~-subStar;popset~;isa |- pretype
    VIOLATION (TXT "{EX}_; InsPair_;pretype_;TypeTerm_;", SRC I, TXT "_;Concept_;", TGT I)

    ROLE ExecEngine MAINTAINS "INS isa INTO sub"
    RULE "INS isa INTO sub" : popset~;isa;popset |- sub
    VIOLATION (TXT "{EX}_; InsPair_;sub_;TypeTerm_;", SRC I, TXT "_;TypeTerm_;", TGT I)
ENDPATTERN

ENDCONTEXT