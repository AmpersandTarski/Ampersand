CONTEXT RAP IN ENGLISH

PURPOSE PATTERN Enforcements
{+Enforcements are introduced for separating the specification of rules from their enforcements.
This relates to discussions held in Github issues #311 and #398.

In the compiler, we will introduce a data structure `Enforcement` in the A-structure:

data Enforcement =
       Block
     | Process Role
     | Automated PA_Clause

In the Ampersand-metamodel (FormalAmpersand\Enforcements.adl) we introduce this pattern.

Preliminaries (sloppily, just for reminding):
1. residence: `(a,b)\in t` means that pair `(a,b)` resides in term `t`.
2. residence: `(a,b)\not\in t` means that pair `(a,b)` does not reside in term `t`.
3. context: A context consists of a set of relations and rules.
4. relation: A relation is a term. A declaration of relation `d` between `CONTEXT C` and `ENDCONTEXT` means that relation `d` exists in context `C`.
5. population: The population of a relation is the set of all pairs that reside in that relation.
6. population: The population of a context is the set of all pairs that reside in relations of that context.
7. violation: A violation of `RULE p |- c` is a pair `(a,b)\in p` such that `(a,b)\not\in c`
8. violation: A violation of `RULE p = c` is a violation of a rule `p |- c` or violation of a rule `c |- p`.
9. satisfaction: A rule is satisfied in a context if there are no violations of that rule in that context.
10. validity of a rule: A rule `r` is valid in a context if it is supposed to be satisfied in that context.
11. validity of a rule: The declaration of a rule between `CONTEXT C` and `ENDCONTEXT` means that the rule is valid in context `C`.
12. restoring: To restore a rule `r` means to change the population of context `C` so that rule `r` is satisfied in `C`.
13. monitoring: To monitor a rule `r` means to compute all violations of rule `r` and signal their existence.
14. monitoring: To monitor a context means to monitor every rule that is valid in that context.
15. maintaining: A rule is being maintained if it is being monitored continuously and it will be restored.
16. application: An Ampersand-application is a software-program generated by an Ampersand-compiler, which monitors one or more contexts.
17. transaction: A transaction is an action that changes the population of a context.
18. An interface in a context is meant to implement transactions whilst maintaining all enforced rules.

Ad 4. Is there any purpose for having rules that are valid in part of a context only? Sebastiaan and I think not. In contrast, enforcement can be done differently in different parts of a context. For instance, the same rule can be enforced differently in different interfaces in the same context.

An Ampersand-user can write enforcement-statements to specify how the Ampersand-application will enforce the rules it monitors.
An enforcement-statement of rule `r` between `INTERFACE i` and `ENDINTERFACE` means that rule `r` is being enforced in interface `i`.
In every situation there is at most one enforcement for every rule. Multiple enforcement-statements for the same rule result in a compile-time error.

The following alternatives exist:
1. Blocking: (previously called "invariant") The rule has to remain satisfied at all times. Only within a database transaction it may be "violated temporarily" as long as the transaction remains open. Commit is possible only when the rule is satisfied. Rollback is always an option and it leaves the database in the state it was when the transaction was started. Users not involved in the transaction will never notice what has occured within the transaction; they will only see the result. I.e. the transaction behaviour you would expect from any database.
2. Automated: There is a rule, which restores satisfaction of the rule when executed by the computer. Note that other rules may be violated as a result. The rule to be executed is not just any Ampersand rule. Executable rules are called "clause" or "ECA-rule".
3. Process: A human agent, represented generically by one or more Roles, is required to restore the rule. No code for restoring the rule is generated, but code for monitoring is.

Examples:
a. The rule `RULE r\/s = s\/r` is always true without being enforced. It may be written and needs no enforcement-statements to keep it satisfied.
b. The rule
       RULE UNI_r : r~;r |- I
       ENFORCE UNI_r AUTOMATED ON INSERT delta INTO r DO SEQ [DELETE V;delta FROM r, INSERT delta INTO r]
   can be implemented in a database simply by creating an attribute for r.
   Each time this attribute is overwritten, the new value replaces the old one.
   This implements the enforcement without having to write any code.
-}

PATTERN Enforcements
RELATION context[Enforcement*Context] [UNI]
RELATION in[Interface*Context] [UNI]
RELATION interface[Enforcement*Interface] [UNI]
RELATION type[Enforcement*EnforcementType] [UNI]
RELATION rule[Enforcement*Rule] [UNI]
RELATION role[Enforcement*Role] [UNI]
RELATION clause[Enforcement*PA_Clause] [UNI]
RELATION valid[Enforcement*Context] [UNI]
RELATION valid[Enforcement*Interface] [UNI]

RULE EnforcementType   : I[EnforcementType] = 'Blocking' \/ 'Automated' \/ Process'
MEANING "There are four types of enforcement: 'Blocking', 'Automated', and 'Process'"
RULE EnforceRoleTot    : type;'Process'[EnforcementType];type~ /\ I[Enforcement] |- role;role~
MEANING "For every enforcement of type `Process` there exists a role."
RULE EnforceRoleUni    : role~;(type;'Process'[EnforcementType];type~ /\ I);role |-  I[Role]
MEANING "For every enforcement of type `Process` there is at most one role."
RULE EnforceClauseTot  : type;'Automated';type~ /\ I[Enforcement]     |- clause;clause~
MEANING "For every enforcement of type `Automated` there exists a clause."
RULE EnforceClauseUni  : clause~;(type;'Automated';type~ /\ I);clause |-  I[PA_Clause]
MEANING "For every enforcement of type `Automated` there is at most one clause."
RULE validInInterface  : valid[Enforcement*Interface] = interface \/ (context;in~/\-interface)
MEANING "An enforcement that is declared in an interface precedes any enforcement that is valid in the context of that interface."
ENDPATTERN

ENDCONTEXT