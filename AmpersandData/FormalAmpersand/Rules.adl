CONTEXT FormalAmpersand IN ENGLISH LATEX
-- The documentation of this script can be found in Rules.docadl
-- This file has been aligned with ShowMeatgrinder on 2017-07-21 by SJ.

PATTERN Rules
    CONCEPT FormalAmpersand.Rule "A rule is a statement that must be satisfied in each context in which it is valid."
    CONCEPT FormalAmpersand.RuleName ""
    CLASSIFY FormalAmpersand.RuleName ISA FormalAmpersand.Name
    IDENT Rules: FormalAmpersand.Rule(FormalAmpersand.context[FormalAmpersand.Rule*FormalAmpersand.Context],FormalAmpersand.name[FormalAmpersand.Rule*FormalAmpersand.RuleName])

    RELATION FormalAmpersand.ctxrs[FormalAmpersand.Rule*FormalAmpersand.Context]  -- This contains all rules declared inside a context but outside the patterns it contains.
    RELATION FormalAmpersand.context[FormalAmpersand.Rule*FormalAmpersand.Context] [UNI]  -- This contains all rules declared inside a context

    MEANING "If a rule is declared in a context outside any pattern, that rule exists in that context. This is registered in the system."
    RELATION FormalAmpersand.name[FormalAmpersand.Rule*FormalAmpersand.RuleName] [UNI] -- e.g. 'ASY bfOUprop::BusinessFunction*BusinessFunction'
    MEANING "The name of a rule."
      ROLE ExecEngine MAINTAINS FormalAmpersand.DelUnusedRuleName
      RULE FormalAmpersand.DelUnusedRuleName LABEL "del unused RuleName" : I[FormalAmpersand.RuleName] |- FormalAmpersand.name~;FormalAmpersand.name
      MEANING "A RuleName without Rule will be removed."
      VIOLATION ( TXT "{EX} DelAtom;FormalAmpersand.RuleName;", SRC I )
    REPRESENT FormalAmpersand.EncodedName TYPE ALPHANUMERIC
    RELATION FormalAmpersand.urlEncodedName[FormalAmpersand.Rule*FormalAmpersand.EncodedName] [UNI]
    RELATION FormalAmpersand.urlEncodedName[FormalAmpersand.Pattern*FormalAmpersand.EncodedName] [UNI]
    RELATION FormalAmpersand.urlEncodedName[FormalAmpersand.Concept*FormalAmpersand.EncodedName] [UNI]
    RELATION FormalAmpersand.origin[FormalAmpersand.Rule*FormalAmpersand.Origin] [UNI]
    MEANING "The location where a rule is defined."  -- e.g. 'line 367:10, file "C:\\\\Ampersand\\\\Workspace\\\\NRM\\\\NRM-BasicProcesses.adl"'
    RELATION FormalAmpersand.message[FormalAmpersand.Rule*FormalAmpersand.Message] -- e.g. 'bfOUprop[BusinessFunction] is not antisymmetric'
--    RELATION srcConcept[Rule*Concept][UNI,TOT] -- e.g. 'BusinessFunction'
--    RELATION tgtConcept[Rule*Concept][UNI,TOT] -- e.g. 'BusinessFunction'
    RELATION FormalAmpersand.formalTerm[FormalAmpersand.Rule*FormalAmpersand.Term] [UNI]
    MEANING "The rule expressed in relation algebra."
    RELATION FormalAmpersand.meaning[FormalAmpersand.Rule*FormalAmpersand.Meaning] -- e.g. 'BusinessFunction' 
  --  RELATION sign[Rule*Signature] [UNI,TOT]
    RELATION FormalAmpersand.declaredthrough[FormalAmpersand.PropertyRule*FormalAmpersand.Property] [TOT]
    MEANING "A property is defined as part of the declaration of relation."
    RELATION FormalAmpersand.propertyRule[FormalAmpersand.Relation*FormalAmpersand.PropertyRule] [SUR]
    MEANING "The properties of a relation."

    CONCEPT FormalAmpersand.Conjunct "A conjunct is an term that represents an invariant in an information system."
    CONCEPT FormalAmpersand.Quad "A quad is a Haskell data structure that corresponds to one rule in an Ampersand script."
REPRESENT FormalAmpersand.Quad TYPE ALPHANUMERIC
    CONCEPT FormalAmpersand.PairView "A pairview is the definition of an error message for violations or a rule."
    CONCEPT FormalAmpersand.PairViewSegment "A pairviewsegment is a fragment of a pairview"
ENDPATTERN

PATTERN PropertyRules
    CONCEPT FormalAmpersand.PropertyRule "A property rule is a rule, that is a property of a user-declared relation"
    CLASSIFY FormalAmpersand.PropertyRule ISA FormalAmpersand.Rule
    CONCEPT FormalAmpersand.Property "UNI<|>TOT<|>INJ<|>SUR<|>RFX<|>IRF<|>SYM<|>ASY<|>TRN<|>PROP"
    RULE FormalAmpersand.propertyEnum : I[Property] |- "UNI" \/ "TOT" \/ "INJ" \/ "SUR" \/ "RFX" \/ "IRF" \/ "SYM" \/ "ASY" \/ "TRN" \/ "MAP" \/ "BIJ" \/ "PROP"
    MEANING "There are twelve tokens, that can be used to define properties on a relation. -> is syntactic sugar for UNI and TOT; UNI means univalent; TOT means total; INJ means injective; SUR means surjective; RFX means reflexive; IRF means irreflexive; SYM means symmetric; ASY means antisymmetric; TRN means transitive; and PROP means symmetric and antisymmetric."
    REPRESENT FormalAmpersand.Property TYPE ALPHANUMERIC

    RELATION FormalAmpersand.isUni[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isUni := I/\FormalAmpersand.prop;("UNI"\/"MAP");FormalAmpersand.prop~
    RELATION FormalAmpersand.isTot[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isTot := I/\FormalAmpersand.prop;("TOT"\/"MAP");FormalAmpersand.prop~
    RELATION FormalAmpersand.isInj[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isInj := I/\FormalAmpersand.prop;("INJ"\/"BIJ");FormalAmpersand.prop~
    RELATION FormalAmpersand.isSur[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isSur := I/\FormalAmpersand.prop;("SUR"\/"BIJ");FormalAmpersand.prop~
    RELATION FormalAmpersand.isRfx[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isRfx := I/\FormalAmpersand.prop;"RFX";FormalAmpersand.prop~
    RELATION FormalAmpersand.isIrf[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isIrf := I/\FormalAmpersand.prop;"IRF";FormalAmpersand.prop~
    RELATION FormalAmpersand.isSym[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isSym := I/\FormalAmpersand.prop;("SYM"\/"PROP");FormalAmpersand.prop~
    RELATION FormalAmpersand.isAsy[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isAsy := I/\FormalAmpersand.prop;("ASY"\/"PROP");FormalAmpersand.prop~
    RELATION FormalAmpersand.isTrn[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isTrn := I/\FormalAmpersand.prop;"TRN";FormalAmpersand.prop~
    RELATION FormalAmpersand.isMapping[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isMapping := (I/\FormalAmpersand.prop;"MAP";FormalAmpersand.prop~)\/(FormalAmpersand.isUni/\FormalAmpersand.isTot)
    RELATION FormalAmpersand.isBijective[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isBijective := (I/\FormalAmpersand.prop;"BIJ";FormalAmpersand.prop~)\/(FormalAmpersand.isInj/\FormalAmpersand.isSur)
    RELATION FormalAmpersand.isProp[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isProp := (I/\FormalAmpersand.prop;"PROP";FormalAmpersand.prop~)\/(FormalAmpersand.isSym/\FormalAmpersand.isAsy)

    RELATION FormalAmpersand.isAttribute[FormalAmpersand.Relation] [PROP]
    ENFORCE FormalAmpersand.isAttribute :=
              (FormalAmpersand.isUni/\FormalAmpersand.source;FormalAmpersand.ttype;"OBJECT";FormalAmpersand.ttype~;FormalAmpersand.source~)\/
              (FormalAmpersand.isInj/\FormalAmpersand.target;FormalAmpersand.ttype;"OBJECT";FormalAmpersand.ttype~;FormalAmpersand.target~)

    RELATION FormalAmpersand.hasAttributes[FormalAmpersand.Concept] [PROP]
    ENFORCE FormalAmpersand.hasAttributes := 
              (I/\FormalAmpersand.source~;FormalAmpersand.isUni;FormalAmpersand.source) \/
              (I/\FormalAmpersand.target~;FormalAmpersand.isInj;FormalAmpersand.target)
ENDPATTERN

ENDCONTEXT