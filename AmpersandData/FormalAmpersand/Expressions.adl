CONTEXT AST IN ENGLISH LATEX
-- The comments for this script can be found in Atoms.doc
INCLUDE "Concepts.adl"


PROCESS "Expression definitions"
    RELATION usedIn[Relation*Expression]
    MEANING "The rule expressed in relation algebra."
    RELATION src[Expression*Concept]
    RELATION tgt[Expression*Concept]
    RELATION bind[BindedRelation*Relation][UNI,TOT]
    RELATION formalExpression[Rule*Expression]
    RELATION in[Pair*Expression]
    VIEW BindedRelation     : BindedRelation (bind)
    
    VIEW Equivalence        : Equivalence(TXT "RULE ", first[BinaryTerm*Expression], TXT " = ", second[BinaryTerm*Expression])
    VIEW Inclusion          : Inclusion  (TXT "RULE ", first[BinaryTerm*Expression], TXT " |- ", second[BinaryTerm*Expression])
  --  VIEW Truth              : Truth      (TXT "RULE ", I[Expression])
    VIEW Relation           : Relation(name[Relation*RelationName], TXT "[", source[Relation*Concept];name[Concept*ConceptName], TXT "*", target[Relation*Concept];name[Concept*ConceptName], TXT "]")
    VIEW UnaryMinus         : UnaryMinus(TXT "-", arg[UnaryTerm*Expression])
    VIEW Converse           : Converse  (arg[UnaryTerm*Expression], TXT "~")
    VIEW KleeneStar         : KleeneStar(arg[UnaryTerm*Expression], TXT "*")
    VIEW KleenePlus         : KleenePlus(arg[UnaryTerm*Expression], TXT "+")
    VIEW Intersection       : Intersection      (TXT "(", first[BinaryTerm*Expression], TXT "/\\", second[BinaryTerm*Expression], TXT ")")
    VIEW Union              : Union             (TXT "(", first[BinaryTerm*Expression], TXT "\\/", second[BinaryTerm*Expression], TXT ")")
    VIEW BinaryMinus        : BinaryMinus       (TXT "(", first[BinaryTerm*Expression], TXT  "-" , second[BinaryTerm*Expression], TXT ")")
    VIEW Composition        : Composition       (TXT "(", first[BinaryTerm*Expression], TXT  ";" , second[BinaryTerm*Expression], TXT ")")
    VIEW CartesianProduct   : CartesianProduct  (TXT "(", first[BinaryTerm*Expression], TXT  "#" , second[BinaryTerm*Expression], TXT ")")
    VIEW RelationalAddition : RelationalAddition(TXT "(", first[BinaryTerm*Expression], TXT  "!" , second[BinaryTerm*Expression], TXT ")")
    VIEW LeftResidual       : LeftResidual      (TXT "(", first[BinaryTerm*Expression], TXT  "/" , second[BinaryTerm*Expression], TXT ")")
    VIEW RightResidual      : RightResidual     (TXT "(", first[BinaryTerm*Expression], TXT "\\" , second[BinaryTerm*Expression], TXT ")")


    CONCEPT Rule ""
    RELATION formalExpression[Rule*Expression] [UNI,TOT]

    CONCEPT Operator ""
    REPRESENT Operator TYPE ALPHANUMERIC
    CONCEPT BinaryTerm ""
    CLASSIFY BinaryTerm ISA Expression
    RELATION first[BinaryTerm*Expression] [UNI]
    RELATION second[BinaryTerm*Expression] [UNI]
    RELATION operator[BinaryTerm*Operator] [UNI]

    CONCEPT UnaryTerm ""
    CLASSIFY UnaryTerm ISA Expression
    RELATION arg[UnaryTerm*Expression] [UNI]
    RELATION operator[UnaryTerm*Operator] [UNI]

    CONCEPT AtomValue "A value can exist on it's own, without having one or more concepts, where it is a value of an atom in it."
    RELATION singleton[Singleton*AtomValue] [UNI]
    
    CONCEPT "V" "The cartesian product."
    CLASSIFY "V" ISA Expression
    RELATION userSrc["V"*Concept] [UNI]
    RELATION userTrg["V"*Concept] [UNI]
    
    CONCEPT "I" "The identity expression on a concept."
    CLASSIFY "I" ISA Expression
    RELATION userCpt["I"*Concept] [UNI]
    
    CLASSIFY Equivalence ISA BinaryTerm
    CLASSIFY Inclusion   ISA BinaryTerm
    
    --RELATION repr[Expression*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    CLASSIFY Singleton          ISA Expression
    CLASSIFY BindedRelation     ISA Expression
    CLASSIFY Converse           ISA UnaryTerm
    CLASSIFY KleeneStar         ISA UnaryTerm
    CLASSIFY KleenePlus         ISA UnaryTerm
    CLASSIFY UnaryMinus         ISA UnaryTerm
    CLASSIFY Intersection       ISA BinaryTerm
    CLASSIFY Union              ISA BinaryTerm
    CLASSIFY BinaryMinus        ISA BinaryTerm
    CLASSIFY Composition        ISA BinaryTerm
    CLASSIFY CartesianProduct   ISA BinaryTerm
    CLASSIFY RelationalAddition ISA BinaryTerm
    CLASSIFY LeftResidual       ISA BinaryTerm
    CLASSIFY RightResidual      ISA BinaryTerm
ENDPROCESS

RELATION showADL[Expression*ShowADL] [UNI,TOT]
REPRESENT ShowADL TYPE BIGALPHANUMERIC
--HJI20161004: This execEngine rule doesn't work, because of the ';'-characters that may be in the ShowADL expression
      ROLE ExecEngine MAINTAINS "del unused ShowADL"
      RULE "del unused ShowADL" : I[ShowADL] |- showADL~;showADL
      MEANING "A ShowADL without Expression will be removed."
      VIOLATION ( TXT "{EX}_;DelAtom_;ShowADL_;", SRC I )
VIEW Expression : Expression(showADL)

{- I can't get the following to work...  Grrr!
PROCESS "Type graph"
    RELATION elem[TypeTerm*Node] [UNI]

    ROLE ExecEngine MAINTAINS elemFill, elemNew
    RULE elemNew : I[TypeTerm] |- elem;elem~
    VIOLATION (TXT "{EX}_; NewStruct_;Node" -- maak een nieuw atoom in concept Node
                    ,TXT "_;elem_;TypeTerm_;", SRC I, TXT "_;Node_;_NEW"
              )
    RULE elemFill : (subStar/\subStar~);elem |- elem
    VIOLATION (TXT "{EX} InsPair;elem;TypeTerm;", SRC I, TXT ";Node;", TGT I)
ENDPROCESS -}

ENDCONTEXT