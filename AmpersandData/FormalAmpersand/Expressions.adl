CONTEXT AST IN ENGLISH LATEX
-- The comments for this script can be found in Atoms.doc
INCLUDE "Atoms.adl"


PROCESS "Expression definitions"
    RELATION patterns[Context*Pattern]
    RELATION src[Expression*Concept]
    RELATION tgt[Expression*Concept]
    RELATION bind[Expression*Relation]
    RELATION term[Rule*Expression]
    RELATION in[Pair*Expression]
    
    VIEW Equivalence        : Equivalence(TXT "RULE ", first, TXT " = ", second)
    VIEW Inclusion          : Inclusion  (TXT "RULE ", first, TXT " |- ", second)
    VIEW Truth              : Truth      (TXT "RULE ", I[Expression])
    VIEW Relation           : Relation(name[Relation*Name], TXT "[", source[Relation*Concept];name[Concept*Identifier], TXT "*", target[Relation*Concept];name[Concept*Identifier], TXT "]")
    VIEW UnaryMinus         : UnaryMinus(TXT "-", arg[UnaryTerm*Expression])
    VIEW Converse           : Converse  (arg[UnaryTerm*Expression], TXT "~")
    VIEW KleeneStar         : KleeneStar(arg[UnaryTerm*Expression], TXT "*")
    VIEW KleenePlus         : KleenePlus(arg[UnaryTerm*Expression], TXT "+")
    VIEW Intersection       : Intersection      (TXT "(", first, TXT "/\\", second, TXT ")")
    VIEW Union              : Union             (TXT "(", first, TXT "\\/", second, TXT ")")
    VIEW Minus              : Minus             (TXT "(", first, TXT  "-" , second, TXT ")")
    VIEW Composition        : Composition       (TXT "(", first, TXT  ";" , second, TXT ")")
    VIEW CartesianProduct   : CartesianProduct  (TXT "(", first, TXT  "#" , second, TXT ")")
    VIEW RelationalAddition : RelationalAddition(TXT "(", first, TXT  "!" , second, TXT ")")
    VIEW LeftResidual       : LeftResidual      (TXT "(", first, TXT  "/" , second, TXT ")")
    VIEW RightResidual      : RightResidual     (TXT "(", first, TXT "\\" , second, TXT ")")


    CONCEPT Rule ""
    RELATION term[Rule*Expression] [UNI,TOT]

    CONCEPT Operator ""
    CONCEPT BinaryTerm ""
    CLASSIFY BinaryTerm ISA Expression
    RELATION first[BinaryTerm*Expression] [UNI]
    RELATION second[BinaryTerm*Expression] [UNI]
    RELATION operator[BinaryTerm*Operator] [UNI]

    CONCEPT UnaryTerm ""
    CLASSIFY UnaryTerm ISA Expression
    RELATION arg[UnaryTerm*Expression] [UNI]

    CONCEPT Atom ""
    CLASSIFY Atom ISA Expression
    RELATION singleton[Atom*Expression] [UNI]
    
    CONCEPT "V" "The cartesian product."
    CLASSIFY "V" ISA Expression
    RELATION userSrc["V"*Concept] [UNI]
    RELATION userTrg["V"*Concept] [UNI]
    
    CLASSIFY Equivalence ISA Rule
    CLASSIFY Inclusion   ISA Rule
    CLASSIFY Truth       ISA Rule
    CLASSIFY Rule        ISA BinaryTerm
    --RELATION repr[Expression*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    CLASSIFY Relation           ISA Expression
    CLASSIFY Converse           ISA UnaryTerm
    CLASSIFY KleeneStar         ISA UnaryTerm
    CLASSIFY KleenePlus         ISA UnaryTerm
    CLASSIFY UnaryMinus         ISA UnaryTerm
    CLASSIFY UnaryMinus         ISA Minus
    CLASSIFY Intersection       ISA BinaryTerm
    CLASSIFY Union              ISA BinaryTerm
    CLASSIFY Minus              ISA BinaryTerm
    CLASSIFY Composition        ISA BinaryTerm
    CLASSIFY CartesianProduct   ISA BinaryTerm
    CLASSIFY RelationalAddition ISA BinaryTerm
    CLASSIFY LeftResidual       ISA BinaryTerm
    CLASSIFY RightResidual      ISA BinaryTerm
ENDPROCESS


{- I can't get the following to work...  Grrr!
PROCESS "Type graph"
    RELATION elem[TypeTerm*Node] [UNI]

    ROLE ExecEngine MAINTAINS elemFill, elemNew
    RULE elemNew : I[TypeTerm] |- elem;elem~
    VIOLATION (TXT "{EX}_; NewStruct_;Node" -- maak een nieuw atoom in concept Node
                    ,TXT "_;elem_;TypeTerm_;", SRC I, TXT "_;Node_;_NEW"
              )
    RULE elemFill : (subStar/\subStar~);elem |- elem
    VIOLATION (TXT "{EX} InsPair;elem;TypeTerm;", SRC I, TXT ";Node;", TGT I)
ENDPROCESS -}

ENDCONTEXT