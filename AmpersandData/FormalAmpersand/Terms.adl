CONTEXT FormalAmpersand IN ENGLISH LATEX
-- The comments for this script can be found in Atoms.doc
INCLUDE "Concepts.adl"
INCLUDE "Relations.adl"


PATTERN FormalAmpersand.TermDefinitions LABEL "Term definitions"
    RELATION FormalAmpersand.usedIn[FormalAmpersand.Relation*FormalAmpersand.Term]
    MEANING "The rule expressed in relation algebra."
--    TODO make transitive closure of usedIn
    ROLE ExecEngine MAINTAINS FormalAmpersand.bindUsedIn
    RULE FormalAmpersand.bindUsedIn : FormalAmpersand.bind |- FormalAmpersand.usedIn~
    VIOLATION (TXT "{EX} InsPair;FormalAmpersand.usedIn;FormalAmpersand.Relation;", TGT I, TXT ";FormalAmpersand.Term;", SRC I[FormalAmpersand.Term])

    RELATION FormalAmpersand.sign[FormalAmpersand.Term*FormalAmpersand.Signature] [UNI]  -- TODO should be TOT also, but this is TODO for ObjectDefs

    VIEW FormalAmpersand.Equivalence        : FormalAmpersand.Equivalence(TXT "RULE ", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT " = ", second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term])
    VIEW FormalAmpersand.Inclusion          : FormalAmpersand.Inclusion  (TXT "RULE ", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT " |- ", second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term])
  --  VIEW Truth              : Truth      (TXT "RULE ", I[Term])
    VIEW FormalAmpersand.Relation           : FormalAmpersand.Relation(FormalAmpersand.name[FormalAmpersand.Relation*FormalAmpersand.RelationName], TXT "[", FormalAmpersand.source[FormalAmpersand.Relation*FormalAmpersand.Concept];FormalAmpersand.name[FormalAmpersand.Concept*FormalAmpersand.ConceptName], TXT "*", FormalAmpersand.target[FormalAmpersand.Relation*FormalAmpersand.Concept];FormalAmpersand.name[FormalAmpersand.Concept*FormalAmpersand.ConceptName], TXT "]")
    VIEW FormalAmpersand.UnaryMinus         : FormalAmpersand.UnaryMinus(TXT "-", FormalAmpersand.arg[FormalAmpersand.UnaryTerm*FormalAmpersand.Term])
    VIEW FormalAmpersand.Converse           : FormalAmpersand.Converse  (FormalAmpersand.arg[FormalAmpersand.UnaryTerm*FormalAmpersand.Term], TXT "~")
    VIEW FormalAmpersand.KleeneStar         : FormalAmpersand.KleeneStar(FormalAmpersand.arg[FormalAmpersand.UnaryTerm*FormalAmpersand.Term], TXT "*")
    VIEW FormalAmpersand.KleenePlus         : FormalAmpersand.KleenePlus(FormalAmpersand.arg[FormalAmpersand.UnaryTerm*FormalAmpersand.Term], TXT "+")
    VIEW FormalAmpersand.Intersection       : FormalAmpersand.Intersection      (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT "/\\", FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.Union              : FormalAmpersand.Union             (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT "\\/", FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.BinaryMinus        : FormalAmpersand.BinaryMinus       (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT  "-" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.Composition        : FormalAmpersand.Composition       (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT  ";" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.CartesianProduct   : FormalAmpersand.CartesianProduct  (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT  "#" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.RelationalAddition : FormalAmpersand.RelationalAddition(TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT  "!" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.LeftResidual       : FormalAmpersand.LeftResidual      (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT  "/" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")
    VIEW FormalAmpersand.RightResidual      : FormalAmpersand.RightResidual     (TXT "(", FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT "\\" , FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term], TXT ")")

    CONCEPT FormalAmpersand.Operator ""
    REPRESENT FormalAmpersand.Operator TYPE ALPHANUMERIC
    CONCEPT FormalAmpersand.BinaryTerm ""
    CLASSIFY FormalAmpersand.BinaryTerm ISA Term
    RELATION FormalAmpersand.first[FormalAmpersand.BinaryTerm*FormalAmpersand.Term] [UNI]
    RELATION FormalAmpersand.second[FormalAmpersand.BinaryTerm*FormalAmpersand.Term] [UNI]
    RELATION FormalAmpersand.operator[FormalAmpersand.BinaryTerm*FormalAmpersand.Operator] [UNI]

    CONCEPT FormalAmpersand.UnaryTerm ""
    CLASSIFY FormalAmpersand.UnaryTerm ISA FormalAmpersand.Term
    RELATION FormalAmpersand.arg[FormalAmpersand.UnaryTerm*FormalAmpersand.Term] [UNI]
    RELATION FormalAmpersand.operator[FormalAmpersand.UnaryTerm*FormalAmpersand.Operator] [UNI]

    CONCEPT FormalAmpersand.AtomValue "A value can exist on its own, without having one or more concepts, where it is a value of an atom in it."
    REPRESENT FormalAmpersand.AtomValue TYPE ALPHANUMERIC
    RELATION FormalAmpersand.singleton[FormalAmpersand.Singleton*FormalAmpersand.AtomValue] [UNI]
    
    CONCEPT FormalAmpersand.V "The cartesian product."
    CLASSIFY FormalAmpersand.V ISA FormalAmpersand.Term
    RELATION FormalAmpersand.userSrc[FormalAmpersand.V*FormalAmpersand.Concept] [UNI]
    RELATION FormalAmpersand.userTgt[FormalAmpersand.V*FormalAmpersand.Concept] [UNI]
    
    CONCEPT FormalAmpersand.Epsilon "An term between two concepts that have an generalisation relation between them" 
    CLASSIFY FormalAmpersand.Epsilon ISA FormalAmpersand.Term
    RELATION FormalAmpersand.userCpt[FormalAmpersand.Epsilon*FormalAmpersand.Concept] [UNI]
    CONCEPT FormalAmpersand.I "The identity term on a concept."
    CLASSIFY FormalAmpersand.I ISA FormalAmpersand.Epsilon
    
    CLASSIFY FormalAmpersand.Equivalence ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.Inclusion   ISA FormalAmpersand.BinaryTerm
    
    --RELATION repr[Term*Representation] [UNI, TOT, INJ]
    --The relation repr, i.e. the representation of terms, is supplied by a spreadsheet or by the meatgrinder. Make sure it is injective.
    CLASSIFY FormalAmpersand.Singleton          ISA FormalAmpersand.Term
    CLASSIFY FormalAmpersand.BindedRelation     ISA FormalAmpersand.Term
    CLASSIFY FormalAmpersand.Converse           ISA FormalAmpersand.UnaryTerm
    CLASSIFY FormalAmpersand.KleeneStar         ISA FormalAmpersand.UnaryTerm
    CLASSIFY FormalAmpersand.KleenePlus         ISA FormalAmpersand.UnaryTerm
    CLASSIFY FormalAmpersand.UnaryMinus         ISA FormalAmpersand.UnaryTerm
    CLASSIFY FormalAmpersand.Intersection       ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.Union              ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.BinaryMinus        ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.Composition        ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.CartesianProduct   ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.RelationalAddition ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.LeftResidual       ISA FormalAmpersand.BinaryTerm
    CLASSIFY FormalAmpersand.RightResidual      ISA FormalAmpersand.BinaryTerm
ENDPATTERN

RELATION FormalAmpersand.showADL[FormalAmpersand.Term*FormalAmpersand.ShowADL] [UNI]  -- TODO should be TOT also, but this is TODO for ObjectDefs
REPRESENT FormalAmpersand.ShowADL TYPE BIGALPHANUMERIC
--HJI20161004: This execEngine rule doesn't work, because of the ';'-characters that may be in the ShowADL term
      ROLE ExecEngine MAINTAINS FormalAmpersand.DelUnusedShowADL
      RULE FormalAmpersand.DelUnusedShowADL LABEL "del unused ShowADL" : I[FormalAmpersand.ShowADL] |- FormalAmpersand.showADL~;FormalAmpersand.showADL
      MEANING "A ShowADL without Term will be removed."
      VIOLATION ( TXT "{EX}_;DelAtom_;FormalAmpersand.ShowADL_;", SRC FormalAmpersand.I )
VIEW FormalAmpersand.Term : FormalAmpersand.Term(FormalAmpersand.showADL)

{- I can't get the following to work...  Grrr!
PATTERN TypeGraph LABEL "Type graph"
    RELATION elem[TypeTerm*Node] [UNI]

    ROLE ExecEngine MAINTAINS elemFill, elemNew
    RULE elemNew : I[TypeTerm] |- elem;elem~
    VIOLATION (TXT "{EX}_; NewStruct_;Node" -- maak een nieuw atoom in concept Node
                    ,TXT "_;elem_;TypeTerm_;", SRC I, TXT "_;Node_;_NEW"
              )
    RULE elemFill : (subStar/\subStar~);elem |- elem
    VIOLATION (TXT "{EX} InsPair;elem;TypeTerm;", SRC I, TXT ";Node;", TGT I)
ENDPATTERN -}

ENDCONTEXT