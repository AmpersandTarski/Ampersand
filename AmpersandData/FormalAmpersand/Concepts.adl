CONTEXT AST IN ENGLISH 

PATTERN Concepts
    RELATION name[Concept*ConceptName] [UNI,TOT,SUR]
      ROLE ExecEngine MAINTAINS "del unused ConceptName"
      RULE "del unused ConceptName" : I[ConceptName] |- name~;name
      MEANING "A ConceptName without Concept will be removed."
      VIOLATION ( TXT "{EX} DelAtom;ConceptName;", SRC I )
    

    RELATION name[Relation*RelationName] [UNI,TOT]
    MEANING "Every relation has a name by which it can be referenced within its Context(s)."
    RELATION source[Relation*Concept] [UNI,TOT]
    RELATION target[Relation*Concept] [UNI,TOT]

    REPRESENT ConceptName,RelationName TYPE ALPHANUMERIC
ENDPATTERN
VIEW Concept: Concept(name[Concept*ConceptName])

--    RULE "Identifiability of concepts": name[Concept*ConceptName];name[Concept*ConceptName]~ |- I[Concept]

PATTERN Specialization
--    VIEW Isa: Isa( TXT "CLASSIFY ", genspc;name{-[Concept*ConceptName]-} , TXT " ISA " , gengen;name{-[Concept*ConceptName]-} )
--    RULE "eq gen": gengen;gengen~ /\ genspc;genspc~ |- I
--    MEANING "Two generalization rules are identical when the specific concepts are identical and the generic concepts are identical."
-- HJO, 20160906: Disabled above rule and view, because a generalisation can currently have more than one generic concepts (CLASSIFY A IS B /\ C )
    RELATION gengen[Isa*Concept] [UNI,TOT]
    MEANING "A generalization rule refers to one or more generic concepts."
    RELATION genspc[Isa*Concept] [UNI,TOT]
    MEANING "A generalization rule refers to one or more specific concepts."
    RELATION gengen[IsE*Concept] [TOT]
    MEANING "A generalization rule refers to one or more generic concepts."
    RELATION genspc[IsE*Concept] [UNI,TOT]
    MEANING "A generalization rule refers to one or more specific concepts."

--PURPOSE RULE specialization
--{+Specialization has the consequence that an atom is not necessarily an instance of one concept only.
--If limes are citrus fruits, then every lime is not only lime but a citrus fruit as well.
---}
--RELATION instanceOf[Atom*Concept] [TOT] 
--RULE specialization : instanceOf;genspc~;gengen |- instanceOf
--MEANING "Every instance of a specialized concept is an instance of the generic concept too."

ENDPATTERN

PROCESS "Compute Closures"
    RELATION isa[Concept*Concept] [IRF,ASY]
    MEANING "s isa g  means that each element of concept  s  is defined to be an element of concept  g  as well."
    RELATION isaStar[Concept*Concept] -- Transitive, reflexive closure of isa, aka isa*
    MEANING "s isaStar g  means that  s  is  g  or  each element of concept s  is an element of concept  g  as well."
    RELATION isaPlus[Concept*Concept] -- Transitive closure of isa, aka isa+
    MEANING "s isaPlus g  means that each element of concept  s  is an element of concept  g  as well."

    RELATION isaCopy[Concept*Concept] -- necessary only for calling the Transitive closure function.
    ROLE ExecEngine MAINTAINS "Compute transitive closure of isa"
    RULE "Compute transitive closure of isa" : isa[Concept*Concept] = isaCopy[Concept*Concept]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} TransitiveClosure;isa[Concept*Concept];Concept;isaCopy[Concept*Concept];isaPlus")

    ROLE ExecEngine MAINTAINS "Compute transitive closure of isa by Ins", "Compute transitive closure of isa by Del"
    RULE "Compute transitive closure of isa by Ins" : isaPlus\/I |- isaStar
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} InsPair;isaStar;Concept;", SRC I, TXT ";Concept;", TGT I)
    RULE "Compute transitive closure of isa by Del" : isaStar |- isaPlus\/I
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} DelPair;isaStar;Concept;", SRC I, TXT ";Concept;", TGT I)
ENDPROCESS

PROCESS "Reflexive isa closures"
    RELATION isaRfxStar[Concept*Concept] -- Transitive, reflexive closure of isa[Concept*Concept]\/isa[Concept*Concept]~
    MEANING "s isaRfxStar g  means that  s  is  g  or  each element of concept s  is an element of concept  g  or vice-versa."
    RELATION isaRfxPlus[Concept*Concept] -- Transitive closure of isa[Concept*Concept]\/isa[Concept*Concept]~
    MEANING "s isaRfxPlus g  means that each element of concept  s  is an element of concept  g  or vice-versa."

    RELATION isaRfx[Concept*Concept] -- isaRfx[Concept*Concept]=isa[Concept*Concept]\/isa[Concept*Concept]~
    ROLE ExecEngine MAINTAINS "Compute isaRfxIns", "Compute isaRfxDel"
    RULE "Compute isaRfxIns" : isa[Concept*Concept]\/isa[Concept*Concept]~ |- isaRfx[Concept*Concept]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} InsPair;isaRfx[Concept*Concept];Concept;", SRC I, TXT ";Concept;", TGT I)
    RULE "Compute isaRfxDel" : isaRfx[Concept*Concept] |- isa[Concept*Concept]\/isa[Concept*Concept]~
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} DelPair;isaRfx[Concept*Concept];Concept;", SRC I, TXT ";Concept;", TGT I)

    RELATION isaRfxCopy[Concept*Concept] -- necessary only for calling the Transitive closure function.
    ROLE ExecEngine MAINTAINS "Compute transitive closure of isa[Concept*Concept]\\/isa[Concept*Concept]~"
    RULE "Compute transitive closure of isa[Concept*Concept]\\/isa[Concept*Concept]~" : isaRfx[Concept*Concept] = isaRfxCopy[Concept*Concept]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} TransitiveClosure;isaRfx[Concept*Concept];Concept;isaRfxCopy[Concept*Concept];isaRfxPlus[Concept*Concept]")

    ROLE ExecEngine MAINTAINS "Compute isaRfxStar by Ins", "Compute isaRfxStar by Del"
    RULE "Compute isaRfxStar by Ins" : isaRfxPlus[Concept*Concept]\/I |- isaRfxStar[Concept*Concept]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} InsPair;isaRfxStar[Concept*Concept];Concept;", SRC I, TXT ";Concept;", TGT I)
    RULE "Compute isaRfxStar by Del" : isaRfxStar[Concept*Concept] |- isaRfxPlus[Concept*Concept]\/I
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "{EX} DelPair;isaRfxStar[Concept*Concept];Concept;", SRC I, TXT ";Concept;", TGT I)
ENDPROCESS

ENDCONTEXT