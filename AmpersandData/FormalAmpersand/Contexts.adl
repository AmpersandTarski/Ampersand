CONTEXT RAP IN ENGLISH
INCLUDE "Rules.adl"
INCLUDE "Relations.adl"
--! It is allowed to change texts and/or the order of texts IF AND ONLY IF this is also done in the corresponding Haskell files !--

RELATION name[Concept*Identifier] [UNI,TOT]

VIEW Signature: Signature( TXT "[" , src;name[Concept*Identifier] , TXT "*" , tgt;name[Concept*Identifier] , TXT "]" )


--PATTERN Authorizations
--PURPOSE PATTERN Authorizations
--{+
---}
--PURPOSE RELATION owner[Context*Account]
--{+In RAP, every context must have one owner, who can exercise all ownership rights that contexts have.
--Initially, the creator of a context is its owner.
---}
--    RELATION owner[Context*Account] [UNI]
--    MEANING "A context has an owner, which is an account."
--    ROLE ExecEngine MAINTAINS TOTowner
--    RULE TOTowner : (I[Context]#'_SESSION'[SESSION]);ingelogd |- owner
--    MEANING "The creator of a context is the account that was logged in when the context was created."
--    VIOLATION ( TXT "{EX} InsPair;owner;Context;", SRC I, TXT ";Account;", TGT I )
--ENDPATTERN

PATTERN Context
    CONCEPT Context "A context is the root of the abstract syntax tree of a valid Ampersand rule specification." 
    IDENT Context: Context(name[Context*ContextIdentifier])  
    REPRESENT ContextIdentifier TYPE ALPHANUMERIC
    RELATION name[Context*ContextIdentifier] [UNI,TOT,INJ]
    MEANING "The name of a context."
    RELATION name[Rule*RuleID] [UNI,TOT,INJ]
    RELATION name[Concept*Identifier] [UNI,TOT,INJ] 
    MEANING "Every relation has a name by which it can be referenced within its Context(s)."
    RELATION gens[Context*Gen]
    MEANING "The user-defined generalization rules in a context."
    RELATION declaredIn[Relation*Pattern]  -- comes from class Language. This contains all relations declared inside a pattern.
    MEANING "The relations that are declared in a pattern."
    RELATION concepts[Pattern*Concept]
    RELATION uses[Context*Pattern]
    MEANING "If a context uses a pattern, everything declared in that pattern is valid within the context."
    RELATION context[Concept*Context] [UNI] -- comes from concs, which is defined in FSpec. This contains all concepts declared inside a context but outside the patterns it contains.
    MEANING "If a concept declaration is used in a context, that concept exists in that context. This is registered in the system."
    RELATION ctxds[Relation*Context] [UNI] -- comes from ctxds, which is defined in A_Context. This contains all relations declared inside a context but outside the patterns it contains.
    MEANING "Any relation declared anywhere in a context outside the scope of a pattern is registered in the system."
    RELATION declaredIn[Relation*Context] [UNI] -- comes from relsDefdIn, which is defined in FSpec. This contains all relations declared inside a context including the patterns it contains.
    MEANING "Any relation declared anywhere in a context is registered in the system."
    RELATION declaredIn[Rule*Context] [UNI]  -- This contains all rules declared inside a context but outside the patterns it contains.
    MEANING "If a rule is declared in a context, that rule exists in that context. This is registered in the system."
    RELATION context[Pattern*Context] [UNI]  -- comes from patterns, which is defined in FSpec. This contains all patterns declared inside a context.
    MEANING "If a pattern is declared inside a context, this is registered in the system."
ENDPATTERN

PURPOSE PATTERN Validity
{+The mechanism to define truth within context is represented by the relation `valid`.
The idea is that a context determines concepts, relations and rules, all of which we say are `valid` in the context.
For this purpose we define three relations, `valid[Concept*Context]`, `valid[Relation*Context]`, and `valid[Rule*Context]`.
-}
PATTERN Validity
    RELATION valid[Concept*Context]
    MEANING "A concept/context pair in the relation `valid[Concept*Context]` means that this concept exists with the context."
    ROLE ExecEngine MAINTAINS validConcepts
    PURPOSE RULE validRelations MARKDOWN
    {+In order to compute validity of concepts within a context,
    three categories of concepts are taken into account:
     - the concept defined in the context
     - all concept defined in patterns within the context
     - all concept defined in patterns used by the context
    -}
    ROLE ExecEngine MAINTAINS validConcepts
    RULE validConcepts : concepts~;(context\/uses~) \/ context |- valid[Concept*Context]
    MEANING "Every concept defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Concept;", SRC I, TXT ";Context;", TGT I)
    RULE AllValidConcepts : valid[Concept*Context] |- concepts~;(context\/uses~) \/ context[Concept*Context]
    VIOLATION (TXT "Concept ", SRC name, TXT " is not valid in context ", TGT I)

    RELATION valid[Relation*Context]
    MEANING "A relation/context pair in the relation `valid[Relation*Context]` means that this relation exists with the context."
    ROLE ExecEngine MAINTAINS validRelations
    PURPOSE RULE validRelations MARKDOWN
    {+In order to compute validity of relations within a context,
    three categories of relations are taken into account:
     - the relation defined in the context
     - all relation defined in patterns within the context
     - all relation defined in patterns used by the context
    -}
    RULE validRelations : declaredIn[Relation*Pattern];(context\/uses~) \/ ctxds |- valid[Relation*Context]
    MEANING "Every relation defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Relation;", SRC I, TXT ";Context;", TGT I)
    RULE AllValidRelations : valid[Relation*Context] |- declaredIn[Relation*Pattern];(context\/uses~) \/ ctxds
    VIOLATION (TXT "Relation ", SRC name, TXT " is not valid in context ", TGT I)

    RELATION valid[Rule*Context]
    MEANING "A rule/context pair in the relation `valid[Rule*Context]` means that this rule exists with the context."
    ROLE ExecEngine MAINTAINS validRules
    PURPOSE RULE validRules MARKDOWN
    {+In order to compute validity of rules within a context,
    three categories of rules are taken into account:
     - the rules defined in the context
     - all rules defined in patterns within the context
     - all rules defined in patterns used by the context
    -}
    RULE validRules : declaredIn;(context\/uses~) \/ declaredIn |- valid[Rule*Context]
    MEANING "Every rule defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Rule;", SRC I, TXT ";Context;", TGT I)
    RULE AllValidRules : valid[Rule*Context] |- declaredIn;(context\/uses~) \/ declaredIn
    VIOLATION (TXT "Rule ", SRC name, TXT " is not valid in context ", TGT I)

    ROLE ExecEngine MAINTAINS "validity of concepts in a context"
    RULE "validity of concepts in a context" : uses;declaredIn~;I[Relation];sign;(tgt\/src) |- context[Concept*Context]~
    MEANING "Every concept in the signature of relations is valid in every context that uses the pattern in which that relation is declared.."
    VIOLATION ( TXT "{EX} InsPair;context;Concept;", TGT I, TXT ";Context;", SRC I )

    ROLE ExecEngine MAINTAINS "validity of relations in a context"
    RULE "validity of relations in a context" : declaredIn[Relation*Pattern];uses~ |- valid
    MEANING "All rules that are declared in a pattern, which is used in a context ar valid in that context."
    VIOLATION ( TXT "{EX} InsPair;valid;Relation;", SRC I, TXT ";Context;", TGT I )

    ROLE ExecEngine MAINTAINS "validity of rules in a context"
    RULE "validity of rules in a context" : declaredIn;uses~ \/ declaredIn |- valid[Rule*Context]
    MEANING "All rules that are declared in a pattern, which is used in a context ar valid in that context."
    VIOLATION ( TXT "{EX} InsPair;valid;Rule;", SRC I, TXT ";Context;", TGT I )
ENDPATTERN

PATTERN Patterns
    CONCEPT Pattern "A pattern is a container for relation declarations and rule definitions"
    IDENT Pattern: Pattern(name[Pattern*PatternIdentifier])
    REPRESENT PatternIdentifier TYPE ALPHANUMERIC
    RELATION name[Pattern*PatternIdentifier] [UNI,TOT,INJ]
    MEANING "The name of a pattern."
    RELATION declaredIn[Rule*Pattern] [UNI]
    MEANING "The user-defined rules in a pattern."
    RELATION declaredIn[Relation*Pattern]
    MEANING "The relations that are declared in a pattern."
    RELATION purpose[Pattern*Purpose]
    MEANING "The purposes of a pattern."

    ROLE ExecEngine MAINTAINS "Remove rule atom"
    RULE "Remove rule atom" : I[Rule]- (declaredIn;I[Pattern];declaredIn~\/declaredIn;I[Context];declaredIn~) |- -V
    MEANING "A relation without declaration will be removed."
    VIOLATION ( TXT "{EX} DelAtom;Rule;", SRC I )

    ROLE ExecEngine MAINTAINS "Remove relation atom"
    RULE "Remove relation atom" : I[Relation] - (declaredIn;I[Pattern];declaredIn~\/declaredIn;I[Context];declaredIn~) |- -V
    MEANING "A relation without declaration will be removed."
    VIOLATION ( TXT "{EX} DelAtom;Relation;", SRC I )

    ROLE User MAINTAINS "self-sustained rules"
    RULE "self-sustained rules" : usedIn;formalExpression~;declaredIn |- declaredIn[Relation*Pattern]
    MEANING "A relation that is used in a rule, which is declared in a pattern, must be declared in that same pattern."
    VIOLATION ( TXT "{EX} InsPair;valid;Rule;", SRC I, TXT ";Context;", TGT I )

ENDPATTERN

PATTERN Specialization
    VIEW Gen: Gen( TXT "CLASSIFY ", genspc;name{-[Concept*Identifier]-} , TXT " ISA " , gengen;name{-[Concept*Identifier]-} )
    RULE "eq gen": gengen;gengen~ /\ genspc;genspc~ |- I
    MEANING "Two generalization rules are identical when the specific concepts are identical and the generic concepts are identical."

    RELATION gengen[Gen*Concept] [UNI,TOT]
    MEANING "A generalization rule refers to one more generic concept."
    RELATION genspc[Gen*Concept] [UNI,TOT]
    MEANING "A generalization rule refers to one more specific concept."

--PURPOSE RULE specialization
--{+Specialization has the consequence that an atom is not necessarily an instance of one concept only.
--If limes are citrus fruits, then every lime is not only lime but a citrus fruit as well.
---}
--RELATION instanceOf[Atom*Concept] [TOT] 
--RULE specialization : instanceOf;genspc~;gengen |- instanceOf
--MEANING "Every instance of a specialized concept is an instance of the generic concept too."

ENDPATTERN

ENDCONTEXT


