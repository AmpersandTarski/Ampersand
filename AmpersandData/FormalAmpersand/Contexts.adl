CONTEXT RAP IN ENGLISH
INCLUDE "Rules.adl"
INCLUDE "Relations.adl"
INCLUDE "Patterns.adl"


VIEW Signature: Signature( TXT "[" , src;name[Concept*ConceptName] , TXT "*" , tgt;name[Concept*ConceptName] , TXT "]" )


--PATTERN Authorizations
--PURPOSE PATTERN Authorizations
--{+
--+}
--PURPOSE RELATION owner[Context*Account]
--{+In RAP, every context must have one owner, who can exercise all ownership rights that contexts have.
--Initially, the creator of a context is its owner.
--+}
--    RELATION owner[Context*Account] [UNI]
--    MEANING "A context has an owner, which is an account."
--    ROLE ExecEngine MAINTAINS TOTowner
--    RULE TOTowner : (I[Context]#"_SESSION"[SESSION]);ingelogd |- owner
--    MEANING "The creator of a context is the account that was logged in when the context was created."
--    VIOLATION ( TXT "{EX} InsPair;owner;Context;", SRC I, TXT ";Account;", TGT I )
--ENDPATTERN

PATTERN Context
    CONCEPT Context "A context is the root of the abstract syntax tree of a valid Ampersand rule specification." 
    REPRESENT ContextName TYPE ALPHANUMERIC
    RELATION name[Context*ContextName] [UNI] --Removed TOT, for it gives a nasty violation
    MEANING "The name of a context."
      ROLE ExecEngine MAINTAINS DelUnusedContextName
      RULE DelUnusedContextName : I[ContextName] |- name~;name
      MEANING "A ContextName without Context will be removed."
      VIOLATION ( TXT "{EX} DelAtom;ContextName;", SRC I )

    IDENT Pattern: Pattern(name[Pattern*PatternName],context[Pattern*Context])

    RELATION name[Concept*ConceptName] [UNI,TOT] 
    MEANING "Every relation has a name by which it can be referenced within its Context(s)."
    REPRESENT ConceptName TYPE ALPHANUMERIC
    RELATION context[Isa*Context] [UNI,TOT]
    RELATION context[IsE*Context] [UNI,TOT]
    MEANING "The user-defined generalization rules in a context."
    RELATION concepts[Pattern*Concept]
    RELATION uses[Context*Pattern]
    MEANING "If a context uses a pattern, everything declared in that pattern is valid within the context."
    RELATION context[Concept*Context] [UNI] -- This contains all concepts declared inside a context.
    MEANING "If a concept declaration is used in a context, that concept exists in that context. This is registered in the system."
    RELATION ctxds[Relation*Context] [UNI] -- comes from ctxds, which is defined in A_Context. This contains all relations declared inside a context but outside the patterns it contains.
    MEANING "Any relation declared anywhere in a context outside the scope of a pattern is registered in the system."
    RELATION relsDefdIn[Relation*Context] [UNI] -- comes from relsDefdIn, which is defined in FSpec. This contains all relations declared inside a context including the patterns it contains.
    MEANING "Any relation declared anywhere in a context is registered in the system."
    RELATION ctxrs[Rule*Context] [UNI]  -- This contains all rules declared inside a context but outside the patterns it contains.
    MEANING "If a rule is declared in a context outside any pattern, that rule exists in that context. This is registered in the system."
    RELATION udefrules[Rule*Context] [UNI]      -- ^ all rules the user has declared within this context including the patterns it contains,
                                                --   which are not property- and not identity rules. See ViewPoint.hs
    RELATION proprules[Rule*Context] [UNI]      -- ^ all property rules the user has declared within this context including the patterns it contains.
    RELATION identityRules[Rule*Context] [UNI]  -- ^ all identity rules the user has declared within this context. This contains all rules declared inside a context including the patterns it contains.
    -- Use allRules[Rule*Context] to get all rules declared inside a context, including all rules declared inside the patterns in that context. A rule can be either user defined, a property rule, or identity rule
  
    MEANING "If a rule is declared anywhere in a context, that rule exists in that context. This is registered in the system."
    RELATION context[Pattern*Context] [UNI]     -- comes from patterns, which is defined in FSpec. This contains all patterns declared inside a context.
    MEANING "If a pattern is declared inside a context, this is registered in the system."

    PURPOSE RULE RuleDeclaredOutsidePattern
    {+Ampersand allows its users to declare rules in a context, outside the scope of a pattern.
    +}
    ROLE ExecEngine MAINTAINS RuleDeclaredOutsidePattern
    RULE RuleDeclaredOutsidePattern : ctxrs[Rule*Context] |- udefrules[Rule*Context]
    MEANING "A rule declared in a context outside the scope of a pattern is registered in the system."
    VIOLATION (TXT "{EX} InsPair;udefrules;Rule;", SRC I, TXT ";Context;", TGT I)

    PURPOSE RULE RelationDeclaredOutsidePattern
    {+Ampersand allows its users to declare relations in a context, outside the scope of a pattern.
    +}
    ROLE ExecEngine MAINTAINS RelationDeclaredOutsidePattern
    RULE RelationDeclaredOutsidePattern : ctxds[Relation*Context] |- relsDefdIn[Relation*Context]
    MEANING "A relation declared in a context outside the scope of a pattern is registered in the system."
    VIOLATION (TXT "{EX} InsPair;relsDefdIn;Relation;", SRC I, TXT ";Context;", TGT I)

    PURPOSE RULE PatDefinedInMeansUsedIn
    {+Patterns can be defined inside a context. This means that all declarations in that pattern are used in that context.
    +}
    ROLE ExecEngine MAINTAINS PatDefinedInMeansUsedIn
    RULE PatDefinedInMeansUsedIn : context[Pattern*Context] |- uses[Context*Pattern]~
    MEANING "Every pattern defined in a context is used in that context."
    VIOLATION (TXT "{EX} InsPair;uses;Context;", TGT I, TXT ";Pattern;", SRC I)
ENDPATTERN

PURPOSE PATTERN Validity
{+The mechanism to define truth within context is represented by the relation `valid`.
The idea is that a context determines concepts, relations and rules, all of which we say are `valid` in the context.
For this purpose we define three relations, `valid[Concept*Context]`, `valid[Relation*Context]`, and `valid[Rule*Context]`.
+}
PATTERN Validity
    RELATION valid[Concept*Context]
    MEANING "A concept/context pair in the relation `valid[Concept*Context]` means that this concept exists with the context."
    PURPOSE RULE validRelations MARKDOWN
    {+In order to compute validity of concepts within a context,
    three categories of concepts are taken into account:
     - the concept defined in the context
     - all concept defined in patterns within the context
     - all concept defined in patterns used by the context
    +}
    ROLE ExecEngine MAINTAINS validConcepts
    RULE validConcepts : concepts~;(context\/uses~) \/ context |- valid[Concept*Context]
    MEANING "Every concept defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Concept;", SRC I, TXT ";Context;", TGT I)
    RULE AllValidConcepts : valid[Concept*Context] |- concepts~;(context\/uses~) \/ context[Concept*Context]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "Concept ", SRC name, TXT " is not valid in context ", TGT I)

    ROLE ExecEngine MAINTAINS ValidityOfConceptsInContext
    RULE ValidityOfConceptsInContext : uses;declaredIn~;I[Relation];sign;(tgt\/src) |- context[Concept*Context]~
    MEANING "Every concept in the signature of relations is valid in every context that uses the pattern in which that relation is declared.."
    VIOLATION ( TXT "{EX} InsPair;context;Concept;", TGT I, TXT ";Context;", SRC I )

    RELATION valid[Relation*Context]    -- TODO: this relation is called 'relsDefdIn' in FormalAmpersand.
    MEANING "A relation/context pair in the relation `valid[Relation*Context]` means that this relation exists with the context."
    PURPOSE RULE validRelations MARKDOWN
    {+In order to compute validity of relations within a context,
    three categories of relations are taken into account:
     - the relations defined in the context
     - all relations defined in patterns within the context
     - all relations defined in patterns used by the context
    +}
    ROLE ExecEngine MAINTAINS validRelations
    RULE validRelations : declaredIn;(context\/uses~) \/ ctxds |- valid[Relation*Context]
    MEANING "Every relation defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Relation;", SRC I, TXT ";Context;", TGT I)

    RELATION valid[Rule*Context]
    MEANING "A rule/context pair in the relation `valid[Rule*Context]` means that this rule exists with the context."
    PURPOSE RULE validRules MARKDOWN
    {+In order to compute validity of rules within a context,
    three categories of rules are taken into account:
     - the rules defined in the context
     - all rules defined in patterns within the context
     - all rules defined in patterns used by the context
    +}
    ROLE ExecEngine MAINTAINS validRules
    RULE validRules : patRules[Pattern*Rule]~;(context\/uses~) \/ context[Rule*Context] |- valid[Rule*Context]
    MEANING "Every rule defined in one of the patterns inside a context, or in the context itself, or in one of the contexts used by this context, is valid throughout that context."
    VIOLATION (TXT "{EX} InsPair;valid;Rule;", SRC I, TXT ";Context;", TGT I)
    ROLE User MAINTAINS AllValidRules
    RULE AllValidRules : valid[Rule*Context] |- patRules[Pattern*Rule]~;(context\/uses~) \/ context[Rule*Context]
    MEANING "TODO: MEANING ONTBREEKT"
    VIOLATION (TXT "Rule ", SRC name, TXT " is not valid in context ", TGT I)
ENDPATTERN

ENDCONTEXT


