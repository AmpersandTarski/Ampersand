CONTEXT RAP IN ENGLISH
--! It is allowed to change texts and/or the order of texts IF AND ONLY IF this is also done in the corresponding Haskell files !--

-- RJ: I wish you guys would use relation names that are easily interpretable by people that do not know about the Haskell stuff behind all this. Use 'ifcPurpose' rather than 'ifcPrp', and use something like 'ifcViolatableRules' rather than 'viol'. More or less self explanatory naming is considered a good practice. Use it.

PATTERN Interfaces
CONCEPT Interface "An interface is a mechanism that communicates data between different (two) contexts."
IDENT Interface: Interface(ifcObj;name)
CONCEPT ObjectDef "An ObjectDef is the (recursive) structure that corresponds with a BOX in an Ampersand script." 

{-Han,
ifcParams contain the editable relations. This needs to be enhanced to ifcInputs and ifcOutputs.
So I have substituted ifcParams by ifcInputs everywhere in the Haskell code.
ifcOutputs has to be added yet.
-}
RELATION name[Interface*InterfaceName] [UNI,TOT]
MEANING "This relation contains the name of each interface."
REPRESENT InterfaceName TYPE ALPHANUMERIC
RELATION ifcInputs[Interface*Relation]  -- was: ifcParams
MEANING "This relation contains the relations that can be edited in an interface by a user or another computer."
RELATION ifcOutputs[Interface*Relation]
MEANING "This relation contains the relations that can be edited by the computer for restoring invariants."
{- Replace ifcInputs and ifcOutputs with:
CONCEPT ContextRelation "a relation in a specific context"
RELATION ifcRelation[Interface*ContextRelation]
MEANING "This relation contains the relations in either of the contexts that the Interface connects and whose population may be modified within a transaction.
-}
RELATION ifcClass[Interface*String] [UNI] --RJ: What is this for?
RELATION ifcRoles[Interface*Role]
MEANING "This relation contains the roles for which an interface is available (empty means: available for all roles)."
RELATION ifcObj[Interface*ObjectDef] [UNI,TOT,INJ]
MEANING "Every interface has precisely one object definition, which defines the structure of objects to be changed by transactions of this interface."
RELATION ifcQuads[Interface*Quad] -- RJ: What is a Quad?
MEANING "All quads that are needed to perform computations for maintaining rules in an interface are registered."
RELATION ifcControls[Interface*Conjunct] -- RJ: Why not call this 'ifcConjuncts'?
MEANING "All conjuncts that must be evaluated after a transation are registered."
RELATION ifcPos[Interface*Origin] [UNI,TOT]
MEANING "The position in the file (filename, line- and column number)."
RELATION ifcPrp[Interface*String] [UNI] -- RJ: use more self-explanatory (longer) name, please
MEANING "The purpose of each interface is being registered."
RELATION viol[Interface*Rule] -- RJ: use more self-explanatory (longer) name, please
MEANING "All rules that can be violated by an interface are included in viol."

RELATION name[ObjectDef*ObjectName] [UNI,TOT]
MEANING "Every object definition has a name."
REPRESENT ObjectName TYPE ALPHANUMERIC
RELATION objpos[ObjectDef*Origin] [UNI,TOT]
MEANING "Every object definition has a position in the text of the Ampersand source file (filename, line number and column number)."
RELATION objExpression[ObjectDef*Expression] [UNI,TOT] -- RJ: Why not call this thing 'objExpr(ession)'?
MEANING "Every object definition has an expression, which determines the population for which that definition is applicable."
RELATION objmView[ObjectDef*View] [UNI] -- RJ: Why not call this thing 'objView' or 'objdefView'
MEANING "An object definition can have a view that should be used for this object (e.g. TABS, COLS, etc.)."
RELATION usedIn[Relation*Expression]
MEANING "If a relation is used in an expression, this is registered in usedIn."
RELATION formalExpression[Rule*Expression] 
MEANING "The expression, of which a rule consists, is accessible via the relation formalExpression."

RULE violatableByInterface : viol = (ifcInputs\/ifcOutputs);usedIn;formalExpression~
MEANING "An interface may violate any rule that uses an input- or output relation of that interface."
RELATION getExpressionRelation[Expression*Relation] [UNI] -- RJ: use a more self-explanatory name, please
MEANING "An Expression that is equivalent to a Relation, allows that relation to be edited."

RULE checkExpressionRelation : getExpressionRelation |- (usedIn~;-I;usedIn/\I);getExpressionRelation
-- How is that different from: usedIn~;getExpressionRelation |- I
MEANING "An editable expression contains one relation only."

{- HJO, 20170825 Disabled this rule, for kleenePlus is currently not supported by the database 
RULE "possible inputs" : ifcInputs |- ifcObj;(attIn~;attObj)+;objExpression;getExpressionRelation
MEANING "Allow only those input relations that have an editable field inside the interface."
MESSAGE "Unusable input relation in interface:"
VIOLATION (TXT "Relation ", TGT I, TXT " has no editable field in interface ", SRC I)
-}
RULE "accessible relations" : V[Context*Interface];ifcObj;objExpression;getExpressionRelation
MEANING "For every relation that is potentially editable, there exists an interface through which it can be accessed."
ROLE "FormalAmpersand" MAINTAINS "accessible relations"
ENDPATTERN

{-
PATTERN InterfaceSession
RELATION sessAtom[SESSION*Atom] [UNI,TOT]
MEANING "Each session has a root atom, from which all data in the current interface is accessible."
RELATION sessIfc[SESSION*Interface] [UNI,TOT]
MEANING "Each session has a current interface."
RELATION sessionRole[SESSION*Role] [UNI,TOT]
MEANING "The current role of the session user is registered with the session a user is in."
RULE "Current role" : sessIfc |- sessionRole;ifcRoles~ \/ -(V;ifcRoles~)
MEANING "Each session has a current interface, which is linked to one of the roles allowed for that interface, or to any interface if no roles are specified."
RULE "Current atom" : sessIfc |- sessAtom;right~;in;(ifcObj;objExpression)~
MEANING "Each session has a current interface, which is linked to one of the roles allowed for that interface, or to any interface if no roles are specified."
ENDPATTERN
-}

PATTERN InterfaceSemantics
CONCEPT Transaction "A transaction is an instance of an interface, which is being used (by a user or a program) to interact with the system."   -- Transactions reside in the front end.
CONCEPT Object "An object is an instance of an ObjectDef."  -- Objects reside in the front end.
CONCEPT Act "An act is an event that inserts or deletes a set of pairs in a relation."   -- Acts occur in the front end.

CLASSIFY Object ISA Pair
RELATION inst[Object*ObjectDef] [UNI,TOT]
MEANING "Because each object is an instance of an ObjectDef, we need to know that ObjectDef."
RELATION left[Pair*Atom] [UNI,TOT]
RELATION right[Pair*Atom] [UNI,TOT]
RELATION in[Pair*Expression]
MEANING "The combination of a pair and an expression yields a statement, which makes sense to users."
RULE "atoms in objects" : inst;objExpression = I[Object];in
MEANING "An object is a pair of atoms that is in the object expression"

RELATION attIn[Attribute*ObjectDef] [UNI,TOT]
MEANING "Every attribute belongs to an ObjectDef."
RELATION attObj[Attribute*ObjectDef] [UNI,TOT]
MEANING "Every attribute represents an ObjectDef (inside another Objectdef)."
RULE "attributes in objects" : left~;inst[Object*ObjectDef];attObj~;attIn = right~;inst[Object*ObjectDef]
MEANING "A left atom in an attribute ob an object is the right atom in that object's instance."
RULE "attributes with unique names" : name;name~ /\ attIn~;attIn |- I[ObjectDef]
MEANING "Every attribute within one object definition has a unique name."

RELATION transactionObject[Transaction*Object] [UNI,TOT]
MEANING "Each Ampersand transaction has a transaction object, in which the front end administers the progress of a transaction."
RELATION inst[Transaction*Interface] [UNI,TOT]
MEANING "Because each transaction is an instance of an interface, we need to know that interface."
RELATION delta[Act*Pair]
MEANING "The pairs that are inserted or deleted by an act are known as the delta."
RELATION changes[Act*Relation] [UNI,TOT]
MEANING "The relation affected by an act."
RELATION inQ[Quad*Act] [UNI,TOT]
MEANING "The act that causes a Quad to fire."
RELATION outQ[Quad*Act]
MEANING "The acts that can be caused by a Quad firing."
RULE quadsInInterface : ifcQuads = ifcInputs;changes~;inQ~ /\ ifcOutputs;changes~;outQ~
MEANING "An interface contains those quads that are fired by its inputs and that produce changes in its outputs."
ENDPATTERN


ENDCONTEXT


