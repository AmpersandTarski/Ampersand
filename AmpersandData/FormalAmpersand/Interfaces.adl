--! It is allowed to change texts and/or the order of texts IF AND ONLY IF this is also done in the corresponding Haskell files !--

-- SJ: I made some changes. By the way, the story is being told in the accompanying file called Interfaces.docadl.
CONTEXT RAP IN ENGLISH

INCLUDE "Concepts.adl"
--INCLUDE "AtomsAsShouldBe.adl"

PATTERN "Static Interface Structure"
    CLASSIFY Interface ISA ObjectDef
    CONCEPT ObjectDef "An ObjectDef is the (recursive) structure that corresponds with a BOX in an Ampersand script." 

    CLASSIFY ObjectDef ISA Term
    CONCEPT Term "Formerly known as Expression." 

    {-Han,
    ifcParams contain the editable relations. This needs to be enhanced to ifcInputs and ifcOutputs.
    So I have substituted ifcParams by ifcInputs everywhere in the Haskell code.
    ifcOutputs has to be added yet.
    -}
    RELATION name[Interface*InterfaceName] [UNI,TOT]
    MEANING "This relation contains the name of each interface."
    REPRESENT InterfaceName TYPE ALPHANUMERIC

    RELATION context[Interface*Context][UNI]
    CONCEPT Interface "An interface is a mechanism that communicates data between different (two) contexts."
    CONCEPT SubInterface "What exactly is a subinterface?"
    CONCEPT InterfaceRef "A subinterface that references an Interface."
    CONCEPT Box "A subinterface containing a list of boxitems."
    
    REPRESENT Origin TYPE ALPHANUMERIC
    RELATION ifcPos[Interface*Origin] [UNI]
    MEANING "The position in the file (filename, line- and column number)."
    RELATION ifcPurpose[Interface*Purpose] [UNI]
    MEANING "The purpose of each interface is being registered."
    RELATION ifcObj[Interface*ObjectDef] [UNI,TOT,INJ]
    MEANING "This is the syntactic link between the Interface and its ObjectDef."
    RELATION isAPI[Interface*Interface] [PROP]
    MEANING "This property states that an interface is meant as API (machine-2-machine)"
    RELATION label[FieldDef*FieldName] [UNI,TOT]
    MEANING "Every field definition has a label."
    REPRESENT FieldName TYPE ALPHANUMERIC
    RELATION origin[ObjectDef*Origin] [UNI]
    MEANING "Every object definition has a position in the text of the Ampersand source file (filename, line number and column number)."
    RELATION objTerm[ObjectDef*Term] [UNI, TOT]
    MEANING "Every object definition has a term to determine the atoms, each of which gets its own html-div."
    RELATION objcruds[ObjectDef*Cruds][UNI,TOT] -- TODO: Refactor Cruds in Haskell to a set of enumerations
    MEANING "The CRUD annotation that comes with a specific ObjectDef"  
    RELATION objView[ObjectDef*View] [UNI]
    MEANING "An object definition can have a view that should be used for this object (e.g. TABS, TABLE, etc.)."
    RELATION objSub[ObjectDef * SubInterface] [UNI]
    RELATION usedIn[Relation*Term]
    MEANING "If a relation is used in an term, this is registered in usedIn."
    RELATION formalTerm[Rule*Term] 
    MEANING "The term, of which a rule consists, is accessible via the relation formalTerm."

    RELATION origin[SubInterface*Origin][UNI]
    CLASSIFY Box,InterfaceRef ISA SubInterface
    RELATION siConcept[Box*Concept][UNI,TOT]
    MEANING "The box concept is the type of the runtime atom of the box."
    RELATION siHeader[Box*BoxHeader][UNI,TOT]
    MEANING "The boxheader is the definition of the way the box is drawn on the screen."
    RELATION siObjs[Box*BoxItem]
    MEANING "The (ordered) elements/items in the box."
    RELATION isLink[InterfaceRef*InterfaceRef][PROP]
    MEANING "Is the interface expanded or drawn as hyperlink?"
    RELATION references[InterfaceRef*Interface][UNI,TOT]



    RELATION isPublic[Interface*Interface] [PROP]
        MEANING "This property states that an interface is accessible for all roles (i.e. public)"

        -- Cannot enforce this rule yet, because ExecEngine is still required to add missing roles
        -- RULE "Public interface integrity" : isPublic;V[Interface*Role] |- ifcRoles
    -- TODO: This should be implemented in the Atlas, see issue #1479
    -- EQUIVALENCE ifcRoles[Interface*Role] == isPublic;V[Interface*Role]
    ROLE ExecEngine MAINTAINS "Equivalence - InsPair ifcRoles"
    RULE "Equivalence - InsPair ifcRoles": isPublic;V[Interface*Role] |- ifcRoles
    VIOLATION (TXT "{EX} InsPair;ifcRoles;Interface;", SRC I, TXT ";Role;", TGT I)


    PURPOSE RELATION edit[FieldDef*Relation]
    {+ To allow editing to insert, update and delete links,
    Ampersand registers whether the term in a field def is just the relation.+}
    RELATION edit[FieldDef*Relation]
    MEANING "The term in this FieldDef is just the relation."
    PURPOSE RELATION editFlp[FieldDef*Relation]
    {+ To allow editing to insert, update and delete links,
    Ampersand registers whether the term in a field def is just the flipped relation.+}
    RELATION editFlp[FieldDef*Relation]
    MEANING "The term in this FieldDef is just the flipped relation."

ENDPATTERN

PATTERN Interfaces
RELATION ifcInputs[Interface*Relation]
MEANING "This relation contains the relations that can be edited in an interface by a user or another computer."
RELATION ifcOutputs[Interface*Relation]
MEANING "This relation contains the relations that can be edited by the computer for restoring invariants."

RELATION ifcRoles[Interface*Role]
MEANING "This relation contains the roles for which an interface is available (empty means: available for all roles)."
RELATION ifcQuads[Interface*Quad] -- RJ: What is a Quad?
MEANING "All quads that are needed to perform computations for maintaining rules in an interface are registered."
RELATION ifcConjuncts[Interface*Conjunct]
MEANING "All conjuncts that must be evaluated after a transation are registered."
RELATION violatable[Interface*Rule]
MEANING "All rules that can be violated by an interface are included in violatable."

RULE violatableByInterface : violatable = (ifcInputs\/ifcOutputs);usedIn;formalTerm~
MEANING "An interface may violate any rule that uses an input- or output relation of that interface."
ENDPATTERN

ENDCONTEXT