{-
Context Test1     : tests declaration functionality in one Context and different Patterns in this Context
                    + ConceptDefs at Context or Patterns
                    + KeyDefs at Context or Patterns
                    + ObjectDefs at Context
                    + Gens at Patterns
                    + Relation declarations at Patterns
                    + Rules at Patterns
Context Test2,3,4 : tests multiple extensions and context constructure
Context Test5     : tests how lower level declarations are available in Context Test
                    + ConceptDefs are extended
                    + KeyDefs are extended
                    + ObjectDefs are extended
                    + Gens from all Patterns are known in Isa tree
                    + Relation declarations from all Patterns are available
                    + Rules are extended
TODO -> Only errors from the type checker are displayed to the user, and not a correcty processed [Context]. To test a correct [Context]
        I should be able to serialize a correct [Context] resulting from the typechecker, and do a regression test on this expected output
        instead of a regression test on the output of an old typechecker.
-}

CONTEXT Test
EXTENDS Test2

CONCEPT Xx "descrX"
KEY Bkey : I[Ba] [Aprop : I[Aa], Dprop : I[Da], SAprop : sa]
SERVICE Svc1 : I[Ba]

PATTERN PatA
KEY patABkey : I[Ba] [Apropa : I[Aa], Dpropa : I[Da]]
GEN Aa ISA Ba
GEN Aa ISA Ca
GEN Ba ISA Da
GEN Ba ISA Ca
GEN Ca ISA Da
sa :: Ba * Ba.
ra :: Ba * Ea.
ha :: Ha * Ha [SYM, ASY, TRN, RFX].
I[Fa] = I[Fa]
I[Fb] = I[Fb]
CONCEPT Xa "descrA"
ENDPATTERN

PATTERN PatB
KEY patBBkey : I[Bb] [Apropb : I[Ab], Dpropb : I[Db]]
GEN Ab ISA Bb
GEN Ab ISA Cb
GEN Bb ISA Db
GEN Bb ISA Cb
GEN Cb ISA Db
rb :: Bb * Eb.
I[Fb] = I[Fb]
CONCEPT Xb "descrB"
ENDPATTERN

ENDCONTEXT


CONTEXT Test2
EXTENDS Test3, Test4
ENDCONTEXT

CONTEXT Test3
EXTENDS Test5
ENDCONTEXT

CONTEXT Test4
EXTENDS Test5
ENDCONTEXT

CONTEXT Test5

CONCEPT Xx5 "descrX5"
KEY Bkey5 : I[Ba5] [Aprop5 : I[Aa5], Dprop5 : I[Da5]]
SERVICE Svc15 : I[Ba5]

PATTERN PatA5
KEY patABkey5 : I[Ba5] [Apropa5 : I[Aa5], Dpropa5 : I[Da5]]
GEN Aa5 ISA Ba5
GEN Aa5 ISA Ca5
GEN Ba5 ISA Da5
GEN Ba5 ISA Ca5
GEN Ca5 ISA Da5
r :: Ba5 * Ea5.
I[Fa5] = I[Fa5]
CONCEPT Xa5 "descrA5"
ENDPATTERN

PATTERN PatB5
KEY patBBkey5 : I[Bb5] [Apropb5 : I[Ab5], Dpropb5 : I[Db5]]
GEN Ab5 ISA Bb5
GEN Ab5 ISA Cb5
GEN Bb5 ISA Db5
GEN Bb5 ISA Cb5
GEN Cb5 ISA Db5
r :: Bb5 * Eb5.
I[Fb5] = I[Fb5]
CONCEPT Xb5 "descrB5"
ENDPATTERN
ENDCONTEXT


